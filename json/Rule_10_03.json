[{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/early_serial.c",
  "before-lines": [
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80
  ],
  "before-code": "#define FCR_FIFO_1  0       /* 1 byte in RCVR FIFO       */\n\nstatic bool early_serial_init_done;\nstatic uint32_t suppressed_chars;\n\nstatic void serout(int c)\n{\n\twhile ((IN(REG_LSR) & LSR_THRE) == 0) {\n\t}\n\tOUT(REG_THR, c);\n}\n\nint arch_printk_char_out(int c)\n{\n\tif (!early_serial_init_done) {\n\t\tsuppressed_chars++;\n\t\treturn c;\n\t}\n\n\tif (c == '\\n') {\n\t\tserout('\\r');\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/early_serial.c",
  "after-lines": [
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80
  ],
  "after-code": "#define FCR_FIFO_1  0x00U   /* 1 byte in RCVR FIFO       */\n\nstatic bool early_serial_init_done;\nstatic uint32_t suppressed_chars;\n\nstatic void serout(uint8_t c)\n{\n\twhile ((IN(REG_LSR) & LSR_THRE) == 0) {\n\t}\n\tOUT(REG_THR, c);\n}\n\nint arch_printk_char_out(int c)\n{\n\tif (!early_serial_init_done) {\n\t\tsuppressed_chars++;\n\t\treturn c;\n\t}\n\n\tif (c == (int)'\\n') {\n\t\tserout((uint8_t)'\\r');\n",
  "violation-line": 70,
  "violation-message": "The int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/fatal.c",
  "before-lines": [
    349,
    350,
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369
  ],
  "before-code": "__pinned_func\nFUNC_NORETURN void z_x86_unhandled_cpu_exception(uintptr_t vector,\n\t\t\t\t\t\t const z_arch_esf_t *esf)\n{\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tlog_exception(vector, esf_get_code(esf));\n#else\n\tARG_UNUSED(vector);\n#endif\n\tz_x86_fatal_error(K_ERR_CPU_EXCEPTION, esf);\n}\n\n#ifdef CONFIG_USERSPACE\nZ_EXC_DECLARE(z_x86_user_string_nlen);\n\nstatic const struct z_exc_handle exceptions[] = {\n\tZ_EXC_HANDLE(z_x86_user_string_nlen)\n};\n#endif\n\n__pinned_func\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/fatal.c",
  "after-lines": [
    349,
    350,
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369
  ],
  "after-code": "__pinned_func\nFUNC_NORETURN void z_x86_unhandled_cpu_exception(uintptr_t vector,\n\t\t\t\t\t\t const z_arch_esf_t *esf)\n{\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tlog_exception(vector, esf_get_code(esf));\n#else\n\tARG_UNUSED(vector);\n#endif\n\tz_x86_fatal_error((unsigned int)K_ERR_CPU_EXCEPTION, esf);\n}\n\n#ifdef CONFIG_USERSPACE\nZ_EXC_DECLARE(z_x86_user_string_nlen);\n\nstatic const struct z_exc_handle exceptions[] = {\n\tZ_EXC_HANDLE(z_x86_user_string_nlen)\n};\n#endif\n\n__pinned_func\n",
  "violation-line": 359,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/fatal.c",
  "before-lines": [
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449
  ],
  "before-code": "\t\t\treturn;\n\t\t}\n#endif /* CONFIG_X86_64 */\n\t}\n#endif\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tdump_page_fault(esf);\n#endif\n#ifdef CONFIG_THREAD_STACK_INFO\n\tif (z_x86_check_stack_bounds(esf_get_sp(esf), 0, esf->cs)) {\n\t\tz_x86_fatal_error(K_ERR_STACK_CHK_FAIL, esf);\n\t}\n#endif\n\tz_x86_fatal_error(K_ERR_CPU_EXCEPTION, esf);\n\tCODE_UNREACHABLE;\n}\n\n__pinned_func\nvoid z_x86_do_kernel_oops(const z_arch_esf_t *esf)\n{\n\tuintptr_t reason;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/fatal.c",
  "after-lines": [
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447
  ],
  "after-code": "\t\t\treturn;\n\t\t}\n#endif /* CONFIG_X86_64 */\n\t}\n#endif\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tdump_page_fault(esf);\n#endif\n#ifdef CONFIG_THREAD_STACK_INFO\n\tif (z_x86_check_stack_bounds(esf_get_sp(esf), 0, (uint16_t)esf->cs)) {\n\t\tz_x86_fatal_error((unsigned int)K_ERR_STACK_CHK_FAIL, esf);\n\t}\n#endif\n\tz_x86_fatal_error((unsigned int)K_ERR_CPU_EXCEPTION, esf);\n\tCODE_UNREACHABLE;\n}\n\n__pinned_func\nvoid z_x86_do_kernel_oops(const z_arch_esf_t *esf)\n{\n\tunsigned int reason;\n\n",
  "violation-line": 438,
  "violation-message": "The unsigned int type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/fatal.c",
  "before-lines": [
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449
  ],
  "before-code": "\t\t\treturn;\n\t\t}\n#endif /* CONFIG_X86_64 */\n\t}\n#endif\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tdump_page_fault(esf);\n#endif\n#ifdef CONFIG_THREAD_STACK_INFO\n\tif (z_x86_check_stack_bounds(esf_get_sp(esf), 0, esf->cs)) {\n\t\tz_x86_fatal_error(K_ERR_STACK_CHK_FAIL, esf);\n\t}\n#endif\n\tz_x86_fatal_error(K_ERR_CPU_EXCEPTION, esf);\n\tCODE_UNREACHABLE;\n}\n\n__pinned_func\nvoid z_x86_do_kernel_oops(const z_arch_esf_t *esf)\n{\n\tuintptr_t reason;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/fatal.c",
  "after-lines": [
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447
  ],
  "after-code": "\t\t\treturn;\n\t\t}\n#endif /* CONFIG_X86_64 */\n\t}\n#endif\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tdump_page_fault(esf);\n#endif\n#ifdef CONFIG_THREAD_STACK_INFO\n\tif (z_x86_check_stack_bounds(esf_get_sp(esf), 0, (uint16_t)esf->cs)) {\n\t\tz_x86_fatal_error((unsigned int)K_ERR_STACK_CHK_FAIL, esf);\n\t}\n#endif\n\tz_x86_fatal_error((unsigned int)K_ERR_CPU_EXCEPTION, esf);\n\tCODE_UNREACHABLE;\n}\n\n__pinned_func\nvoid z_x86_do_kernel_oops(const z_arch_esf_t *esf)\n{\n\tunsigned int reason;\n\n",
  "violation-line": 439,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/fatal.c",
  "before-lines": [
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452
  ],
  "before-code": "#endif\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tdump_page_fault(esf);\n#endif\n#ifdef CONFIG_THREAD_STACK_INFO\n\tif (z_x86_check_stack_bounds(esf_get_sp(esf), 0, esf->cs)) {\n\t\tz_x86_fatal_error(K_ERR_STACK_CHK_FAIL, esf);\n\t}\n#endif\n\tz_x86_fatal_error(K_ERR_CPU_EXCEPTION, esf);\n\tCODE_UNREACHABLE;\n}\n\n__pinned_func\nvoid z_x86_do_kernel_oops(const z_arch_esf_t *esf)\n{\n\tuintptr_t reason;\n\n#ifdef CONFIG_X86_64\n\treason = esf->rax;\n#else\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/fatal.c",
  "after-lines": [
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450
  ],
  "after-code": "#endif\n#ifdef CONFIG_EXCEPTION_DEBUG\n\tdump_page_fault(esf);\n#endif\n#ifdef CONFIG_THREAD_STACK_INFO\n\tif (z_x86_check_stack_bounds(esf_get_sp(esf), 0, (uint16_t)esf->cs)) {\n\t\tz_x86_fatal_error((unsigned int)K_ERR_STACK_CHK_FAIL, esf);\n\t}\n#endif\n\tz_x86_fatal_error((unsigned int)K_ERR_CPU_EXCEPTION, esf);\n\tCODE_UNREACHABLE;\n}\n\n__pinned_func\nvoid z_x86_do_kernel_oops(const z_arch_esf_t *esf)\n{\n\tunsigned int reason;\n\n#ifdef CONFIG_X86_64\n\treason = (unsigned int)esf->rax;\n#else\n",
  "violation-line": 442,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/fatal.c",
  "before-lines": [
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469
  ],
  "before-code": "\tuintptr_t *stack_ptr = (uintptr_t *)esf->esp;\n\n\treason = *stack_ptr;\n#endif\n\n#ifdef CONFIG_USERSPACE\n\t/* User mode is only allowed to induce oopses and stack check\n\t * failures via this software interrupt\n\t */\n\tif ((esf->cs & 0x3) != 0 && !(reason == K_ERR_KERNEL_OOPS ||\n\t\t\t\t      reason == K_ERR_STACK_CHK_FAIL)) {\n\t\treason = K_ERR_KERNEL_OOPS;\n\t}\n#endif\n\n\tz_x86_fatal_error(reason, esf);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/fatal.c",
  "after-lines": [
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467
  ],
  "after-code": "\tuintptr_t *stack_ptr = (uintptr_t *)esf->esp;\n\n\treason = *stack_ptr;\n#endif\n\n#ifdef CONFIG_USERSPACE\n\t/* User mode is only allowed to induce oopses and stack check\n\t * failures via this software interrupt\n\t */\n\tif ((esf->cs & 0x3U) != 0 && !(reason == (unsigned int)K_ERR_KERNEL_OOPS ||\n\t\t\t\t      reason == (unsigned int)K_ERR_STACK_CHK_FAIL)) {\n\t\treason = (unsigned int)K_ERR_KERNEL_OOPS;\n\t}\n#endif\n\n\tz_x86_fatal_error(reason, esf);\n}\n",
  "violation-line": 465,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/fatal.c",
  "before-lines": [
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469
  ],
  "before-code": "\t/* User mode is only allowed to induce oopses and stack check\n\t * failures via this software interrupt\n\t */\n\tif ((esf->cs & 0x3) != 0 && !(reason == K_ERR_KERNEL_OOPS ||\n\t\t\t\t      reason == K_ERR_STACK_CHK_FAIL)) {\n\t\treason = K_ERR_KERNEL_OOPS;\n\t}\n#endif\n\n\tz_x86_fatal_error(reason, esf);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/fatal.c",
  "after-lines": [
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467
  ],
  "after-code": "\t/* User mode is only allowed to induce oopses and stack check\n\t * failures via this software interrupt\n\t */\n\tif ((esf->cs & 0x3U) != 0 && !(reason == (unsigned int)K_ERR_KERNEL_OOPS ||\n\t\t\t\t      reason == (unsigned int)K_ERR_STACK_CHK_FAIL)) {\n\t\treason = (unsigned int)K_ERR_KERNEL_OOPS;\n\t}\n#endif\n\n\tz_x86_fatal_error(reason, esf);\n}\n",
  "violation-line": 469,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298
  ],
  "before-code": " * Utility functions\n */\n\n/* For a table at a particular level, get the entry index that corresponds to\n * the provided virtual address\n */\n__pinned_func\nstatic inline int get_index(void *virt, int level)\n{\n\treturn (((uintptr_t)virt >> paging_levels[level].shift) %\n\t\tpaging_levels[level].entries);\n}\n\n__pinned_func\nstatic inline pentry_t *get_entry_ptr(pentry_t *ptables, void *virt, int level)\n{\n\treturn &ptables[get_index(virt, level)];\n}\n\n__pinned_func\nstatic inline pentry_t get_entry(pentry_t *ptables, void *virt, int level)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298
  ],
  "after-code": " * Utility functions\n */\n\n/* For a table at a particular level, get the entry index that corresponds to\n * the provided virtual address\n */\n__pinned_func\nstatic inline uintptr_t get_index(void *virt, unsigned int level)\n{\n\treturn (((uintptr_t)virt >> paging_levels[level].shift) %\n\t\tpaging_levels[level].entries);\n}\n\n__pinned_func\nstatic inline pentry_t *get_entry_ptr(pentry_t *ptables, void *virt, unsigned int level)\n{\n\treturn &ptables[get_index(virt, level)];\n}\n\n__pinned_func\nstatic inline pentry_t get_entry(pentry_t *ptables, void *virt, unsigned int level)\n",
  "violation-line": 288,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    1095,
    1096,
    1097,
    1098,
    1099,
    1100,
    1101,
    1102,
    1103,
    1104,
    1105,
    1106,
    1107,
    1108,
    1109,
    1110,
    1111,
    1112,
    1113,
    1114,
    1115
  ],
  "before-code": "\t * Any new mappings need to be applied to all page tables.\n\t */\n#if defined(CONFIG_USERSPACE) && !defined(CONFIG_X86_COMMON_PAGE_TABLE)\n\tsys_snode_t *node;\n\n\tSYS_SLIST_FOR_EACH_NODE(&x86_domain_list, node) {\n\t\tstruct arch_mem_domain *domain =\n\t\t\tCONTAINER_OF(node, struct arch_mem_domain, node);\n\n\t\trange_map_ptables(domain->ptables, virt, phys, size,\n\t\t\t\t  entry_flags, mask, options | OPTION_USER);\n\t}\n#endif /* CONFIG_USERSPACE */\n\trange_map_ptables(z_x86_kernel_ptables, virt, phys, size, entry_flags,\n\t\t\t  mask, options);\n\n#ifdef CONFIG_SMP\n\tif ((options & OPTION_FLUSH) != 0U) {\n\t\ttlb_shootdown();\n\t}\n#endif /* CONFIG_SMP */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    1094,
    1095,
    1096,
    1097,
    1098,
    1099,
    1100,
    1101,
    1102,
    1103,
    1104,
    1105,
    1106,
    1107,
    1108,
    1109,
    1110,
    1111,
    1112,
    1113,
    1114
  ],
  "after-code": "\t * Any new mappings need to be applied to all page tables.\n\t */\n#if defined(CONFIG_USERSPACE) && !defined(CONFIG_X86_COMMON_PAGE_TABLE)\n\tsys_snode_t *node;\n\n\tSYS_SLIST_FOR_EACH_NODE(&x86_domain_list, node) {\n\t\tstruct arch_mem_domain *domain =\n\t\t\tCONTAINER_OF(node, struct arch_mem_domain, node);\n\n\t\trange_map_ptables(domain->ptables, virt, phys, size,\n\t\t\t\t  entry_flags, mask, options | OPTION_USER);\n\t}\n#endif /* CONFIG_USERSPACE */\n\trange_map_ptables(z_x86_kernel_ptables, virt, phys, size, entry_flags,\n\t\t\t  mask, options);\n\n#ifdef CONFIG_SMP\n\tif ((options & OPTION_FLUSH) != 0U) {\n\t\ttlb_shootdown();\n\t}\n#endif /* CONFIG_SMP */\n",
  "violation-line": 1105,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    1171,
    1172,
    1173,
    1174,
    1175,
    1176,
    1177,
    1178,
    1179,
    1180,
    1181,
    1182,
    1183,
    1184,
    1185,
    1186,
    1187,
    1188,
    1189,
    1190,
    1191
  ],
  "before-code": "void arch_mem_map(void *virt, uintptr_t phys, size_t size, uint32_t flags)\n{\n\trange_map_unlocked(virt, phys, size, flags_to_entry(flags),\n\t\t\t   MASK_ALL, 0);\n}\n\n/* unmap region addr..addr+size, reset entries and flush TLB */\nvoid arch_mem_unmap(void *addr, size_t size)\n{\n\trange_map_unlocked((void *)addr, 0, size, 0, 0,\n\t\t\t   OPTION_FLUSH | OPTION_CLEAR);\n}\n\n#ifdef Z_VM_KERNEL\n__boot_func\nstatic void identity_map_remove(uint32_t level)\n{\n\tsize_t size, scope = get_entry_scope(level);\n\tpentry_t *table;\n\tuint32_t cur_level;\n\tuint8_t *pos;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    1170,
    1171,
    1172,
    1173,
    1174,
    1175,
    1176,
    1177,
    1178,
    1179,
    1180,
    1181,
    1182,
    1183,
    1184,
    1185,
    1186,
    1187,
    1188,
    1189,
    1190
  ],
  "after-code": "void arch_mem_map(void *virt, uintptr_t phys, size_t size, uint32_t flags)\n{\n\trange_map_unlocked(virt, phys, size, flags_to_entry(flags),\n\t\t\t   MASK_ALL, 0);\n}\n\n/* unmap region addr..addr+size, reset entries and flush TLB */\nvoid arch_mem_unmap(void *addr, size_t size)\n{\n\trange_map_unlocked((void *)addr, 0, size, 0, 0,\n\t\t\t   OPTION_FLUSH | OPTION_CLEAR);\n}\n\n#ifdef Z_VM_KERNEL\n__boot_func\nstatic void identity_map_remove(uint32_t level)\n{\n\tsize_t size, scope = get_entry_scope(level);\n\tpentry_t *table;\n\tuint32_t cur_level;\n\tuint8_t *pos;\n",
  "violation-line": 1181,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    1309,
    1310,
    1311,
    1312,
    1313,
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320,
    1321,
    1322,
    1323,
    1324,
    1325,
    1326,
    1327,
    1328,
    1329
  ],
  "before-code": "\tsize_t aligned_size;\n\tint ret = 0;\n\n\t/* addr/size arbitrary, fix this up into an aligned region */\n\tk_mem_region_align((uintptr_t *)&virt, &aligned_size,\n\t\t\t   (uintptr_t)addr, size, CONFIG_MMU_PAGE_SIZE);\n\n\tfor (size_t offset = 0; offset < aligned_size;\n\t     offset += CONFIG_MMU_PAGE_SIZE) {\n\t\tif (!page_validate(ptables, virt + offset, write)) {\n\t\t\tret = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tbcb_fence();\n\n\treturn ret;\n}\n#ifdef CONFIG_X86_COMMON_PAGE_TABLE\n/* Very low memory configuration. A single set of page tables is used for\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    1308,
    1309,
    1310,
    1311,
    1312,
    1313,
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320,
    1321,
    1322,
    1323,
    1324,
    1325,
    1326,
    1327,
    1328
  ],
  "after-code": "\tsize_t aligned_size;\n\tint ret = 0;\n\n\t/* addr/size arbitrary, fix this up into an aligned region */\n\tk_mem_region_align((uintptr_t *)&virt, &aligned_size,\n\t\t\t   (uintptr_t)addr, size, CONFIG_MMU_PAGE_SIZE);\n\n\tfor (size_t offset = 0; offset < aligned_size;\n\t     offset += CONFIG_MMU_PAGE_SIZE) {\n\t\tif (!page_validate(ptables, virt + offset, write)) {\n\t\t\tret = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tbcb_fence();\n\n\treturn ret;\n}\n#ifdef CONFIG_X86_COMMON_PAGE_TABLE\n/* Very low memory configuration. A single set of page tables is used for\n",
  "violation-line": 1319,
  "violation-message": "The int type has been assigned to the object of bool which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    1521,
    1522,
    1523,
    1524,
    1525,
    1526,
    1527,
    1528,
    1529,
    1530,
    1531,
    1532,
    1533,
    1534,
    1535,
    1536,
    1537,
    1538,
    1539,
    1540,
    1541
  ],
  "before-code": "\t}\n\n\treturn ret;\n}\n\n/* Debugging function to show how many pages are free in the pool */\n__pinned_func\nstatic inline unsigned int pages_free(void)\n{\n\treturn (page_pos - page_pool) / CONFIG_MMU_PAGE_SIZE;\n}\n\n/**\n*  Duplicate an entire set of page tables\n *\n * Uses recursion, but depth at any given moment is limited by the number of\n * paging levels.\n *\n * x86_mmu_lock must be held.\n *\n * @param dst a zeroed out chunk of memory of sufficient size for the indicated\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    1520,
    1521,
    1522,
    1523,
    1524,
    1525,
    1526,
    1527,
    1528,
    1529,
    1530,
    1531,
    1532,
    1533,
    1534,
    1535,
    1536,
    1537,
    1538,
    1539,
    1540
  ],
  "after-code": "\t}\n\n\treturn ret;\n}\n\n/* Debugging function to show how many pages are free in the pool */\n__pinned_func\nstatic inline size_t pages_free(void)\n{\n\treturn (size_t)(page_pos - page_pool) / CONFIG_MMU_PAGE_SIZE;\n}\n\n/**\n*  Duplicate an entire set of page tables\n *\n * Uses recursion, but depth at any given moment is limited by the number of\n * paging levels.\n *\n * x86_mmu_lock must be held.\n *\n * @param dst a zeroed out chunk of memory of sufficient size for the indicated\n",
  "violation-line": 1531,
  "violation-message": "The long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    1605,
    1606,
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625
  ],
  "before-code": "\n__pinned_func\nstatic void region_map_update(pentry_t *ptables, void *start,\n\t\t\t      size_t size, pentry_t flags, bool reset)\n{\n\tuint32_t options = OPTION_USER;\n\tk_spinlock_key_t key;\n\n\tif (reset) {\n\t\toptions |= OPTION_RESET;\n\t}\n\tif (ptables == z_x86_page_tables_get()) {\n\t\toptions |= OPTION_FLUSH;\n\t}\n\n\tkey = k_spin_lock(&x86_mmu_lock);\n\t(void)range_map_ptables(ptables, start, 0, size, flags, MASK_PERM,\n\t\t\t\toptions);\n\tk_spin_unlock(&x86_mmu_lock, key);\n\n#ifdef CONFIG_SMP\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    1604,
    1605,
    1606,
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624
  ],
  "after-code": "\n__pinned_func\nstatic void region_map_update(pentry_t *ptables, void *start,\n\t\t\t      size_t size, pentry_t flags, bool reset)\n{\n\tuint32_t options = OPTION_USER;\n\tk_spinlock_key_t key;\n\n\tif (reset) {\n\t\toptions |= OPTION_RESET;\n\t}\n\tif (ptables == z_x86_page_tables_get()) {\n\t\toptions |= OPTION_FLUSH;\n\t}\n\n\tkey = k_spin_lock(&x86_mmu_lock);\n\t(void)range_map_ptables(ptables, start, 0, size, flags, MASK_PERM,\n\t\t\t\toptions);\n\tk_spin_unlock(&x86_mmu_lock, key);\n\n#ifdef CONFIG_SMP\n",
  "violation-line": 1615,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "before-lines": [
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627,
    1628
  ],
  "before-code": "\t\t\t      size_t size, pentry_t flags, bool reset)\n{\n\tuint32_t options = OPTION_USER;\n\tk_spinlock_key_t key;\n\n\tif (reset) {\n\t\toptions |= OPTION_RESET;\n\t}\n\tif (ptables == z_x86_page_tables_get()) {\n\t\toptions |= OPTION_FLUSH;\n\t}\n\n\tkey = k_spin_lock(&x86_mmu_lock);\n\t(void)range_map_ptables(ptables, start, 0, size, flags, MASK_PERM,\n\t\t\t\toptions);\n\tk_spin_unlock(&x86_mmu_lock, key);\n\n#ifdef CONFIG_SMP\n\ttlb_shootdown();\n#endif\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/arch/x86/core/x86_mmu.c",
  "after-lines": [
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627
  ],
  "after-code": "\t\t\t      size_t size, pentry_t flags, bool reset)\n{\n\tuint32_t options = OPTION_USER;\n\tk_spinlock_key_t key;\n\n\tif (reset) {\n\t\toptions |= OPTION_RESET;\n\t}\n\tif (ptables == z_x86_page_tables_get()) {\n\t\toptions |= OPTION_FLUSH;\n\t}\n\n\tkey = k_spin_lock(&x86_mmu_lock);\n\t(void)range_map_ptables(ptables, start, 0, size, flags, MASK_PERM,\n\t\t\t\toptions);\n\tk_spin_unlock(&x86_mmu_lock, key);\n\n#ifdef CONFIG_SMP\n\ttlb_shootdown();\n#endif\n}\n",
  "violation-line": 1618,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/console/uart_console.c",
  "before-lines": [
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101
  ],
  "before-code": "\tif (handled_by_debug_server) {\n\t\treturn c;\n\t}\n\n#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */\n\n\tif ('\\n' == c) {\n\t\tuart_poll_out(uart_console_dev, '\\r');\n\t}\n\tuart_poll_out(uart_console_dev, c);\n\n\treturn c;\n}\n\n#endif\n\n#if defined(CONFIG_STDOUT_CONSOLE)\nextern void __stdout_hook_install(int (*hook)(int c));\n#else\n#define __stdout_hook_install(x) \\\n\tdo {    /* nothing */\t \\\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/console/uart_console.c",
  "after-lines": [
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101
  ],
  "after-code": "\tif (handled_by_debug_server) {\n\t\treturn c;\n\t}\n\n#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */\n\n\tif ((int)'\\n' == c) {\n\t\tuart_poll_out(uart_console_dev, (unsigned char)'\\r');\n\t}\n\tuart_poll_out(uart_console_dev, (unsigned char)c);\n\n\treturn c;\n}\n\n#endif\n\n#if defined(CONFIG_STDOUT_CONSOLE)\nextern void __stdout_hook_install(int (*hook)(int c));\n#else\n#define __stdout_hook_install(x) \\\n\tdo {    /* nothing */\t \\\n",
  "violation-line": 91,
  "violation-message": "The int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "before-lines": [
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161
  ],
  "before-code": "\n#ifdef CONFIG_IOAPIC_MASK_RTE\n\tint32_t ix;\t/* redirection table index */\n\tuint32_t rteValue; /* value to copy into redirection table entry */\n\n\trteValue = IOAPIC_EDGE | IOAPIC_HIGH | IOAPIC_FIXED | IOAPIC_INT_MASK |\n\t\t   IOAPIC_LOGICAL | 0 /* dummy vector */;\n\n\tfor (ix = 0; ix < ioapic_rtes; ix++) {\n\t\tioApicRedSetHi(ix, DEFAULT_RTE_DEST);\n\t\tioApicRedSetLo(ix, rteValue);\n\t}\n#endif\n\treturn 0;\n}\n\n__pinned_func\nuint32_t z_ioapic_num_rtes(void)\n{\n\treturn ioapic_rtes;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "after-lines": [
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161
  ],
  "after-code": "\n#ifdef CONFIG_IOAPIC_MASK_RTE\n\tuint32_t ix;\t/* redirection table index */\n\tuint32_t rteValue; /* value to copy into redirection table entry */\n\n\trteValue = IOAPIC_EDGE | IOAPIC_HIGH | IOAPIC_FIXED | IOAPIC_INT_MASK |\n\t\t   IOAPIC_LOGICAL | 0 /* dummy vector */;\n\n\tfor (ix = 0; ix < ioapic_rtes; ix++) {\n\t\tioApicRedSetHi(ix, DEFAULT_RTE_DEST);\n\t\tioApicRedSetLo(ix, rteValue);\n\t}\n#endif\n\treturn 0;\n}\n\n__pinned_func\nuint32_t z_ioapic_num_rtes(void)\n{\n\treturn ioapic_rtes;\n}\n",
  "violation-line": 151,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "before-lines": [
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162
  ],
  "before-code": "#ifdef CONFIG_IOAPIC_MASK_RTE\n\tint32_t ix;\t/* redirection table index */\n\tuint32_t rteValue; /* value to copy into redirection table entry */\n\n\trteValue = IOAPIC_EDGE | IOAPIC_HIGH | IOAPIC_FIXED | IOAPIC_INT_MASK |\n\t\t   IOAPIC_LOGICAL | 0 /* dummy vector */;\n\n\tfor (ix = 0; ix < ioapic_rtes; ix++) {\n\t\tioApicRedSetHi(ix, DEFAULT_RTE_DEST);\n\t\tioApicRedSetLo(ix, rteValue);\n\t}\n#endif\n\treturn 0;\n}\n\n__pinned_func\nuint32_t z_ioapic_num_rtes(void)\n{\n\treturn ioapic_rtes;\n}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "after-lines": [
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162
  ],
  "after-code": "#ifdef CONFIG_IOAPIC_MASK_RTE\n\tuint32_t ix;\t/* redirection table index */\n\tuint32_t rteValue; /* value to copy into redirection table entry */\n\n\trteValue = IOAPIC_EDGE | IOAPIC_HIGH | IOAPIC_FIXED | IOAPIC_INT_MASK |\n\t\t   IOAPIC_LOGICAL | 0 /* dummy vector */;\n\n\tfor (ix = 0; ix < ioapic_rtes; ix++) {\n\t\tioApicRedSetHi(ix, DEFAULT_RTE_DEST);\n\t\tioApicRedSetLo(ix, rteValue);\n\t}\n#endif\n\treturn 0;\n}\n\n__pinned_func\nuint32_t z_ioapic_num_rtes(void)\n{\n\treturn ioapic_rtes;\n}\n\n",
  "violation-line": 152,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "before-lines": [
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447
  ],
  "before-code": " *\n * This routine reads the low-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n * @return 32 low-order bits\n */\n__pinned_func\nstatic uint32_t ioApicRedGetLo(unsigned int irq)\n{\n\tint32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */\n\n\treturn __IoApicGet(offset);\n}\n\n/**\n *\n * @brief Set low 32 bits of Redirection Table entry\n *\n * This routine writes the low-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "after-lines": [
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447
  ],
  "after-code": " *\n * This routine reads the low-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n * @return 32 low-order bits\n */\n__pinned_func\nstatic uint32_t ioApicRedGetLo(unsigned int irq)\n{\n\tuint32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */\n\n\treturn __IoApicGet(offset);\n}\n\n/**\n *\n * @brief Set low 32 bits of Redirection Table entry\n *\n * This routine writes the low-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n",
  "violation-line": 437,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "before-lines": [
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465
  ],
  "before-code": " * This routine writes the low-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n * @param lower32 Value to be written\n * @return N/A\n */\n__pinned_func\nstatic void ioApicRedSetLo(unsigned int irq, uint32_t lower32)\n{\n\tint32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */\n\n\t__IoApicSet(offset, lower32);\n}\n\n/**\n *\n * @brief Set high 32 bits of Redirection Table entry\n *\n * This routine writes the high-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "after-lines": [
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465
  ],
  "after-code": " * This routine writes the low-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n * @param lower32 Value to be written\n * @return N/A\n */\n__pinned_func\nstatic void ioApicRedSetLo(unsigned int irq, uint32_t lower32)\n{\n\tuint32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */\n\n\t__IoApicSet(offset, lower32);\n}\n\n/**\n *\n * @brief Set high 32 bits of Redirection Table entry\n *\n * This routine writes the high-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n",
  "violation-line": 455,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "before-lines": [
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483
  ],
  "before-code": " * This routine writes the high-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n * @param upper32 Value to be written\n * @return N/A\n */\n__pinned_func\nstatic void ioApicRedSetHi(unsigned int irq, uint32_t upper32)\n{\n\tint32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */\n\n\t__IoApicSet(offset, upper32);\n}\n\n/**\n *\n * @brief Modify low 32 bits of Redirection Table entry\n *\n * This routine modifies selected portions of the low-order 32 bits of a\n * Redirection Table entry, as indicated by the associate bit mask.\n *\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_ioapic.c",
  "after-lines": [
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483
  ],
  "after-code": " * This routine writes the high-order 32 bits of a Redirection Table entry.\n *\n * @param irq INTIN number\n * @param upper32 Value to be written\n * @return N/A\n */\n__pinned_func\nstatic void ioApicRedSetHi(unsigned int irq, uint32_t upper32)\n{\n\tuint32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */\n\n\t__IoApicSet(offset, upper32);\n}\n\n/**\n *\n * @brief Modify low 32 bits of Redirection Table entry\n *\n * This routine modifies selected portions of the low-order 32 bits of a\n * Redirection Table entry, as indicated by the associate bit mask.\n *\n",
  "violation-line": 473,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "before-lines": [
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140
  ],
  "before-code": "\t * turn on x2APIC mode. we trust the config option, so\n\t * we don't check CPUID to see if x2APIC is supported.\n\t */\n\n\tuint64_t msr = z_x86_msr_read(X86_APIC_BASE_MSR);\n\tmsr |= X86_APIC_BASE_MSR_X2APIC;\n\tz_x86_msr_write(X86_APIC_BASE_MSR, msr);\n#endif\n\n\tloApicMaxLvt = (x86_read_loapic(LOAPIC_VER) & LOAPIC_MAXLVT_MASK) >> 16;\n\n\t/* reset the DFR, TPR, TIMER_CONFIG, and TIMER_ICR */\n\n#ifndef CONFIG_X2APIC\n\t/* Flat model */\n\tx86_write_loapic(LOAPIC_DFR, 0xffffffff);  /* no DFR in x2APIC mode */\n#endif\n\n\tx86_write_loapic(LOAPIC_TPR, 0x0);\n\tx86_write_loapic(LOAPIC_TIMER_CONFIG, 0x0);\n\tx86_write_loapic(LOAPIC_TIMER_ICR, 0x0);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "after-lines": [
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140
  ],
  "after-code": "\t * turn on x2APIC mode. we trust the config option, so\n\t * we don't check CPUID to see if x2APIC is supported.\n\t */\n\n\tuint64_t msr = z_x86_msr_read(X86_APIC_BASE_MSR);\n\tmsr |= X86_APIC_BASE_MSR_X2APIC;\n\tz_x86_msr_write(X86_APIC_BASE_MSR, msr);\n#endif\n\n\tloApicMaxLvt = (x86_read_loapic(LOAPIC_VER) & LOAPIC_MAXLVT_MASK) >> 16;\n\n\t/* reset the DFR, TPR, TIMER_CONFIG, and TIMER_ICR */\n\n#ifndef CONFIG_X2APIC\n\t/* Flat model */\n\tx86_write_loapic(LOAPIC_DFR, 0xffffffff);  /* no DFR in x2APIC mode */\n#endif\n\n\tx86_write_loapic(LOAPIC_TPR, 0x0);\n\tx86_write_loapic(LOAPIC_TIMER_CONFIG, 0x0);\n\tx86_write_loapic(LOAPIC_TIMER_ICR, 0x0);\n",
  "violation-line": 130,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "before-lines": [
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "before-code": " */\n__pinned_func\nint z_irq_controller_isr_vector_get(void)\n{\n\tint pReg, block;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10));\n\t\tif (pReg != 0) {\n\t\t\treturn (block * 32) + (find_msb_set(pReg) - 1);\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "after-lines": [
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "after-code": " */\n__pinned_func\nint z_irq_controller_isr_vector_get(void)\n{\n\tuint32_t pReg;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (unsigned int block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10U));\n\t\tif (pReg != 0) {\n\t\t\tconst unsigned int uvector = (block * 32) + (find_msb_set(pReg) - 1);\n\n\t\t\treturn (int)uvector;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n",
  "violation-line": 336,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "before-lines": [
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "before-code": " */\n__pinned_func\nint z_irq_controller_isr_vector_get(void)\n{\n\tint pReg, block;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10));\n\t\tif (pReg != 0) {\n\t\t\treturn (block * 32) + (find_msb_set(pReg) - 1);\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "after-lines": [
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "after-code": " */\n__pinned_func\nint z_irq_controller_isr_vector_get(void)\n{\n\tuint32_t pReg;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (unsigned int block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10U));\n\t\tif (pReg != 0) {\n\t\t\tconst unsigned int uvector = (block * 32) + (find_msb_set(pReg) - 1);\n\n\t\t\treturn (int)uvector;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n",
  "violation-line": 337,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "before-lines": [
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "before-code": " */\n__pinned_func\nint z_irq_controller_isr_vector_get(void)\n{\n\tint pReg, block;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10));\n\t\tif (pReg != 0) {\n\t\t\treturn (block * 32) + (find_msb_set(pReg) - 1);\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "after-lines": [
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "after-code": " */\n__pinned_func\nint z_irq_controller_isr_vector_get(void)\n{\n\tuint32_t pReg;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (unsigned int block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10U));\n\t\tif (pReg != 0) {\n\t\t\tconst unsigned int uvector = (block * 32) + (find_msb_set(pReg) - 1);\n\n\t\t\treturn (int)uvector;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n",
  "violation-line": 337,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "before-lines": [
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349
  ],
  "before-code": "{\n\tint pReg, block;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10));\n\t\tif (pReg != 0) {\n\t\t\treturn (block * 32) + (find_msb_set(pReg) - 1);\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n{\n\tvolatile uint32_t lvt; /* local vector table entry value */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "after-lines": [
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349,
    350,
    351
  ],
  "after-code": "{\n\tuint32_t pReg;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (unsigned int block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10U));\n\t\tif (pReg != 0) {\n\t\t\tconst unsigned int uvector = (block * 32) + (find_msb_set(pReg) - 1);\n\n\t\t\treturn (int)uvector;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n{\n\tvolatile uint32_t lvt; /* local vector table entry value */\n",
  "violation-line": 339,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "before-lines": [
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349
  ],
  "before-code": "{\n\tint pReg, block;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10));\n\t\tif (pReg != 0) {\n\t\t\treturn (block * 32) + (find_msb_set(pReg) - 1);\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n{\n\tvolatile uint32_t lvt; /* local vector table entry value */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/interrupt_controller/intc_loapic.c",
  "after-lines": [
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349,
    350,
    351
  ],
  "after-code": "{\n\tuint32_t pReg;\n\n\t/* Block 0 bits never lit up as these are all exception or reserved\n\t * vectors\n\t */\n\tfor (unsigned int block = 7; likely(block > 0); block--) {\n\t\tpReg = x86_read_loapic(LOAPIC_ISR + (block * 0x10U));\n\t\tif (pReg != 0) {\n\t\t\tconst unsigned int uvector = (block * 32) + (find_msb_set(pReg) - 1);\n\n\t\t\treturn (int)uvector;\n\t\t}\n\n\t}\n\treturn -1;\n}\n\n#ifdef CONFIG_PM_DEVICE\n__pinned_func\nstatic int loapic_suspend(const struct device *port)\n{\n\tvolatile uint32_t lvt; /* local vector table entry value */\n",
  "violation-line": 339,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336
  ],
  "before-code": "\t\t/*\n\t\t * calculate baud rate divisor. a variant of\n\t\t * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)\n\t\t */\n\t\tdivisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))\n\t\t\t\t\t/ baud_rate) >> 4;\n\n\t\t/* set the DLAB to access the baud rate divisor registers */\n\t\tlcr_cache = INBYTE(LCR(dev));\n\t\tOUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);\n\t\tOUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));\n\t\tOUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));\n\n\t\t/* restore the DLAB to access the baud rate divisor registers */\n\t\tOUTBYTE(LCR(dev), lcr_cache);\n\n\t\tdev_data->uart_config.baudrate = baud_rate;\n\t}\n}\n\nstatic int uart_ns16550_configure(const struct device *dev,\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336
  ],
  "after-code": "\t\t/*\n\t\t * calculate baud rate divisor. a variant of\n\t\t * (uint32_t)(dev_cfg->sys_clk_freq / (16.0 * baud_rate) + 0.5)\n\t\t */\n\t\tdivisor = ((dev_cfg->sys_clk_freq + (baud_rate << 3))\n\t\t\t\t\t/ baud_rate) >> 4;\n\n\t\t/* set the DLAB to access the baud rate divisor registers */\n\t\tlcr_cache = INBYTE(LCR(dev));\n\t\tOUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);\n\t\tOUTBYTE(BRDL(dev), (uint8_t)(divisor & 0xff));\n\t\tOUTBYTE(BRDH(dev), (uint8_t)((divisor >> 8) & 0xff));\n\n\t\t/* restore the DLAB to access the baud rate divisor registers */\n\t\tOUTBYTE(LCR(dev), lcr_cache);\n\n\t\tdev_data->uart_config.baudrate = baud_rate;\n\t}\n}\n\nstatic int uart_ns16550_configure(const struct device *dev,\n",
  "violation-line": 326,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409
  ],
  "before-code": "\t}\n#endif\n\n\tset_baud_rate(dev, cfg->baudrate);\n\n\t/* Local structure to hold temporary values to pass to OUTBYTE() */\n\tstruct uart_config uart_cfg;\n\n\tswitch (cfg->data_bits) {\n\tcase UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409
  ],
  "after-code": "\t}\n#endif\n\n\tset_baud_rate(dev, cfg->baudrate);\n\n\t/* Local structure to hold temporary values to pass to OUTBYTE() */\n\tstruct uart_config uart_cfg;\n\n\tswitch (cfg->data_bits) {\n\tcase (uint8_t)UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n",
  "violation-line": 399,
  "violation-message": "The enum uart_config_data_bits type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412
  ],
  "before-code": "\tset_baud_rate(dev, cfg->baudrate);\n\n\t/* Local structure to hold temporary values to pass to OUTBYTE() */\n\tstruct uart_config uart_cfg;\n\n\tswitch (cfg->data_bits) {\n\tcase UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412
  ],
  "after-code": "\tset_baud_rate(dev, cfg->baudrate);\n\n\t/* Local structure to hold temporary values to pass to OUTBYTE() */\n\tstruct uart_config uart_cfg;\n\n\tswitch (cfg->data_bits) {\n\tcase (uint8_t)UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n",
  "violation-line": 402,
  "violation-message": "The enum uart_config_data_bits type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415
  ],
  "before-code": "\tstruct uart_config uart_cfg;\n\n\tswitch (cfg->data_bits) {\n\tcase UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415
  ],
  "after-code": "\tstruct uart_config uart_cfg;\n\n\tswitch (cfg->data_bits) {\n\tcase (uint8_t)UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n",
  "violation-line": 405,
  "violation-message": "The enum uart_config_data_bits type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418
  ],
  "before-code": "\tcase UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n\tcase UART_CFG_STOP_BITS_1:\n\t\tuart_cfg.stop_bits = LCR_1_STB;\n\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418
  ],
  "after-code": "\tcase (uint8_t)UART_CFG_DATA_BITS_5:\n\t\tuart_cfg.data_bits = LCR_CS5;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_6:\n\t\tuart_cfg.data_bits = LCR_CS6;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_7:\n\t\tuart_cfg.data_bits = LCR_CS7;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n\tcase (uint8_t)UART_CFG_STOP_BITS_1:\n\t\tuart_cfg.stop_bits = LCR_1_STB;\n\t\tbreak;\n",
  "violation-line": 408,
  "violation-message": "The enum uart_config_data_bits type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427
  ],
  "before-code": "\tcase UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n\tcase UART_CFG_STOP_BITS_1:\n\t\tuart_cfg.stop_bits = LCR_1_STB;\n\t\tbreak;\n\tcase UART_CFG_STOP_BITS_2:\n\t\tuart_cfg.stop_bits = LCR_2_STB;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427
  ],
  "after-code": "\tcase (uint8_t)UART_CFG_DATA_BITS_8:\n\t\tuart_cfg.data_bits = LCR_CS8;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n\tcase (uint8_t)UART_CFG_STOP_BITS_1:\n\t\tuart_cfg.stop_bits = LCR_1_STB;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_STOP_BITS_2:\n\t\tuart_cfg.stop_bits = LCR_2_STB;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n",
  "violation-line": 417,
  "violation-message": "The enum uart_config_stop_bits type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430
  ],
  "before-code": "\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n\tcase UART_CFG_STOP_BITS_1:\n\t\tuart_cfg.stop_bits = LCR_1_STB;\n\t\tbreak;\n\tcase UART_CFG_STOP_BITS_2:\n\t\tuart_cfg.stop_bits = LCR_2_STB;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n\tcase UART_CFG_PARITY_NONE:\n\t\tuart_cfg.parity = LCR_PDIS;\n\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430
  ],
  "after-code": "\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->stop_bits) {\n\tcase (uint8_t)UART_CFG_STOP_BITS_1:\n\t\tuart_cfg.stop_bits = LCR_1_STB;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_STOP_BITS_2:\n\t\tuart_cfg.stop_bits = LCR_2_STB;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n\tcase (uint8_t)UART_CFG_PARITY_NONE:\n\t\tuart_cfg.parity = LCR_PDIS;\n\t\tbreak;\n",
  "violation-line": 420,
  "violation-message": "The enum uart_config_stop_bits type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439
  ],
  "before-code": "\tcase UART_CFG_STOP_BITS_2:\n\t\tuart_cfg.stop_bits = LCR_2_STB;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n\tcase UART_CFG_PARITY_NONE:\n\t\tuart_cfg.parity = LCR_PDIS;\n\t\tbreak;\n\tcase UART_CFG_PARITY_EVEN:\n\t\tuart_cfg.parity = LCR_EPS;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tdev_data->uart_config = *cfg;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439
  ],
  "after-code": "\tcase (uint8_t)UART_CFG_STOP_BITS_2:\n\t\tuart_cfg.stop_bits = LCR_2_STB;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n\tcase (uint8_t)UART_CFG_PARITY_NONE:\n\t\tuart_cfg.parity = LCR_PDIS;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_PARITY_EVEN:\n\t\tuart_cfg.parity = LCR_EPS;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tdev_data->uart_config = *cfg;\n",
  "violation-line": 429,
  "violation-message": "The enum uart_config_parity type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442
  ],
  "before-code": "\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n\tcase UART_CFG_PARITY_NONE:\n\t\tuart_cfg.parity = LCR_PDIS;\n\t\tbreak;\n\tcase UART_CFG_PARITY_EVEN:\n\t\tuart_cfg.parity = LCR_EPS;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tdev_data->uart_config = *cfg;\n\n\t/* data bits, stop bits, parity, clear DLAB */\n\tOUTBYTE(LCR(dev),\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442
  ],
  "after-code": "\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tswitch (cfg->parity) {\n\tcase (uint8_t)UART_CFG_PARITY_NONE:\n\t\tuart_cfg.parity = LCR_PDIS;\n\t\tbreak;\n\tcase (uint8_t)UART_CFG_PARITY_EVEN:\n\t\tuart_cfg.parity = LCR_EPS;\n\t\tbreak;\n\tdefault:\n\t\tret = -ENOTSUP;\n\t\tgoto out;\n\t}\n\n\tdev_data->uart_config = *cfg;\n\n\t/* data bits, stop bits, parity, clear DLAB */\n\tOUTBYTE(LCR(dev),\n",
  "violation-line": 432,
  "violation-message": "The enum uart_config_parity type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "before-lines": [
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589
  ],
  "before-code": " *\n * @param dev UART device struct\n *\n * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,\n * UART_BREAK if an error was detected, 0 otherwise.\n */\nstatic int uart_ns16550_err_check(const struct device *dev)\n{\n\tk_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);\n\tint check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);\n\n\tk_spin_unlock(&DEV_DATA(dev)->lock, key);\n\n\treturn check >> 1;\n}\n\n#if CONFIG_UART_INTERRUPT_DRIVEN\n\n/**\n * @brief Fill FIFO with data\n *\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/drivers/serial/uart_ns16550.c",
  "after-lines": [
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589
  ],
  "after-code": " *\n * @param dev UART device struct\n *\n * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,\n * UART_BREAK if an error was detected, 0 otherwise.\n */\nstatic int uart_ns16550_err_check(const struct device *dev)\n{\n\tk_spinlock_key_t key = k_spin_lock(&DEV_DATA(dev)->lock);\n\tuint8_t check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);\n\n\tk_spin_unlock(&DEV_DATA(dev)->lock, key);\n\tcheck >>= 1;\n\treturn (int)check;\n}\n\n#if CONFIG_UART_INTERRUPT_DRIVEN\n\n/**\n * @brief Fill FIFO with data\n *\n",
  "violation-line": 579,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/arch/common/ffs.h",
  "before-lines": [
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47
  ],
  "before-code": " * @return most significant bit set, 0 if @a op is 0\n */\n\nstatic ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)\n{\n\tif (op == 0) {\n\t\treturn 0;\n\t}\n\n\treturn 32 - __builtin_clz(op);\n}\n\n\n/**\n *\n * @brief find least significant bit set in a 32-bit word\n *\n * This routine finds the first bit set starting from the least significant bit\n * in the argument passed in and returns the index of that bit.  Bits are\n * numbered starting at 1 from the least significant bit.  A return value of\n * zero indicates that the value passed is zero.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/arch/common/ffs.h",
  "after-lines": [
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47
  ],
  "after-code": " * @return most significant bit set, 0 if @a op is 0\n */\n\nstatic ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)\n{\n\tif (op == 0) {\n\t\treturn 0;\n\t}\n\n\treturn 32 - (unsigned int)__builtin_clz(op);\n}\n\n\n/**\n *\n * @brief find least significant bit set in a 32-bit word\n *\n * This routine finds the first bit set starting from the least significant bit\n * in the argument passed in and returns the index of that bit.  Bits are\n * numbered starting at 1 from the least significant bit.  A return value of\n * zero indicates that the value passed is zero.\n",
  "violation-line": 37,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/arch/common/ffs.h",
  "before-lines": [
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66
  ],
  "before-code": " * numbered starting at 1 from the least significant bit.  A return value of\n * zero indicates that the value passed is zero.\n *\n * @return least significant bit set, 0 if @a op is 0\n */\n\nstatic ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)\n{\n#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS\n\treturn __builtin_ffs(op);\n\n#else\n\t/*\n\t * Toolchain does not have __builtin_ffs().\n\t * Need to do this manually.\n\t */\n\tint bit;\n\n\tif (op == 0) {\n\t\treturn 0;\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/arch/common/ffs.h",
  "after-lines": [
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66
  ],
  "after-code": " * numbered starting at 1 from the least significant bit.  A return value of\n * zero indicates that the value passed is zero.\n *\n * @return least significant bit set, 0 if @a op is 0\n */\n\nstatic ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)\n{\n#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS\n\treturn (unsigned int)__builtin_ffs((int)op);\n\n#else\n\t/*\n\t * Toolchain does not have __builtin_ffs().\n\t * Need to do this manually.\n\t */\n\tint bit;\n\n\tif (op == 0) {\n\t\treturn 0;\n\t}\n",
  "violation-line": 56,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/arch/common/ffs.h",
  "before-lines": [
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66
  ],
  "before-code": " * numbered starting at 1 from the least significant bit.  A return value of\n * zero indicates that the value passed is zero.\n *\n * @return least significant bit set, 0 if @a op is 0\n */\n\nstatic ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)\n{\n#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS\n\treturn __builtin_ffs(op);\n\n#else\n\t/*\n\t * Toolchain does not have __builtin_ffs().\n\t * Need to do this manually.\n\t */\n\tint bit;\n\n\tif (op == 0) {\n\t\treturn 0;\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/arch/common/ffs.h",
  "after-lines": [
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66
  ],
  "after-code": " * numbered starting at 1 from the least significant bit.  A return value of\n * zero indicates that the value passed is zero.\n *\n * @return least significant bit set, 0 if @a op is 0\n */\n\nstatic ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)\n{\n#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS\n\treturn (unsigned int)__builtin_ffs((int)op);\n\n#else\n\t/*\n\t * Toolchain does not have __builtin_ffs().\n\t * Need to do this manually.\n\t */\n\tint bit;\n\n\tif (op == 0) {\n\t\treturn 0;\n\t}\n",
  "violation-line": 56,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/arch/x86/msr.h",
  "before-lines": [
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71
  ],
  "before-code": "#endif\n\n/*\n * z_x86_msr_write() is shared between 32- and 64-bit implementations, but\n * due to ABI differences with long return values, z_x86_msr_read() is not.\n */\n\nstatic inline void z_x86_msr_write(unsigned int msr, uint64_t data)\n{\n\tuint32_t high = data >> 32;\n\tuint32_t low = data & 0xFFFFFFFFU;\n\n\t__asm__ volatile (\"wrmsr\" : : \"c\"(msr), \"a\"(low), \"d\"(high));\n}\n\n#ifdef CONFIG_X86_64\n\nstatic inline uint64_t z_x86_msr_read(unsigned int msr)\n{\n\tunion {\n\t\tstruct {\n\t\t\tuint32_t lo;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/arch/x86/msr.h",
  "after-lines": [
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71
  ],
  "after-code": "#endif\n\n/*\n * z_x86_msr_write() is shared between 32- and 64-bit implementations, but\n * due to ABI differences with long return values, z_x86_msr_read() is not.\n */\n\nstatic inline void z_x86_msr_write(unsigned int msr, uint64_t data)\n{\n\tuint32_t high = (uint32_t)(data >> 32);\n\tuint32_t low = (uint32_t)(data & 0xFFFFFFFFU);\n\n\t__asm__ volatile (\"wrmsr\" : : \"c\"(msr), \"a\"(low), \"d\"(high));\n}\n\n#ifdef CONFIG_X86_64\n\nstatic inline uint64_t z_x86_msr_read(unsigned int msr)\n{\n\tunion {\n\t\tstruct {\n\t\t\tuint32_t lo;\n",
  "violation-line": 60,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/arch/x86/msr.h",
  "before-lines": [
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71
  ],
  "before-code": "#endif\n\n/*\n * z_x86_msr_write() is shared between 32- and 64-bit implementations, but\n * due to ABI differences with long return values, z_x86_msr_read() is not.\n */\n\nstatic inline void z_x86_msr_write(unsigned int msr, uint64_t data)\n{\n\tuint32_t high = data >> 32;\n\tuint32_t low = data & 0xFFFFFFFFU;\n\n\t__asm__ volatile (\"wrmsr\" : : \"c\"(msr), \"a\"(low), \"d\"(high));\n}\n\n#ifdef CONFIG_X86_64\n\nstatic inline uint64_t z_x86_msr_read(unsigned int msr)\n{\n\tunion {\n\t\tstruct {\n\t\t\tuint32_t lo;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/arch/x86/msr.h",
  "after-lines": [
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71
  ],
  "after-code": "#endif\n\n/*\n * z_x86_msr_write() is shared between 32- and 64-bit implementations, but\n * due to ABI differences with long return values, z_x86_msr_read() is not.\n */\n\nstatic inline void z_x86_msr_write(unsigned int msr, uint64_t data)\n{\n\tuint32_t high = (uint32_t)(data >> 32);\n\tuint32_t low = (uint32_t)(data & 0xFFFFFFFFU);\n\n\t__asm__ volatile (\"wrmsr\" : : \"c\"(msr), \"a\"(low), \"d\"(high));\n}\n\n#ifdef CONFIG_X86_64\n\nstatic inline uint64_t z_x86_msr_read(unsigned int msr)\n{\n\tunion {\n\t\tstruct {\n\t\t\tuint32_t lo;\n",
  "violation-line": 61,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/device.h",
  "before-lines": [
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442
  ],
  "before-code": " * @return the device that has that handle, or a null pointer if @p\n * dev_handle does not identify a device.\n */\nstatic inline const struct device *\ndevice_from_handle(device_handle_t dev_handle)\n{\n\textern const struct device __device_start[];\n\textern const struct device __device_end[];\n\tconst struct device *dev = NULL;\n\tsize_t numdev = __device_end - __device_start;\n\n\tif ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {\n\t\tdev = &__device_start[dev_handle - 1];\n\t}\n\n\treturn dev;\n}\n\n/**\n * @brief Prototype for functions used when iterating over a set of devices.\n *\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/device.h",
  "after-lines": [
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442
  ],
  "after-code": " * @return the device that has that handle, or a null pointer if @p\n * dev_handle does not identify a device.\n */\nstatic inline const struct device *\ndevice_from_handle(device_handle_t dev_handle)\n{\n\textern const struct device __device_start[];\n\textern const struct device __device_end[];\n\tconst struct device *dev = NULL;\n\tsize_t numdev = (size_t)(__device_end - __device_start);\n\n\tif ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {\n\t\tdev = &__device_start[dev_handle - 1];\n\t}\n\n\treturn dev;\n}\n\n/**\n * @brief Prototype for functions used when iterating over a set of devices.\n *\n",
  "violation-line": 432,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/drivers/entropy.h",
  "before-lines": [
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111
  ],
  "before-code": " */\nstatic inline int entropy_get_entropy_isr(const struct device *dev,\n\t\t\t\t\t  uint8_t *buffer,\n\t\t\t\t\t  uint16_t length,\n\t\t\t\t\t  uint32_t flags)\n{\n\tconst struct entropy_driver_api *api =\n\t\t(const struct entropy_driver_api *)dev->api;\n\n\tif (unlikely(!api->get_entropy_isr)) {\n\t\treturn -ENOTSUP;\n\t}\n\n\treturn api->get_entropy_isr(dev, buffer, length, flags);\n}\n\n\n#ifdef __cplusplus\n}\n#endif\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/drivers/entropy.h",
  "after-lines": [
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111
  ],
  "after-code": " */\nstatic inline int entropy_get_entropy_isr(const struct device *dev,\n\t\t\t\t\t  uint8_t *buffer,\n\t\t\t\t\t  uint16_t length,\n\t\t\t\t\t  uint32_t flags)\n{\n\tconst struct entropy_driver_api *api =\n\t\t(const struct entropy_driver_api *)dev->api;\n\n\tif (unlikely(api->get_entropy_isr == NULL)) {\n\t\treturn -ENOTSUP;\n\t}\n\n\treturn api->get_entropy_isr(dev, buffer, length, flags);\n}\n\n\n#ifdef __cplusplus\n}\n#endif\n\n",
  "violation-line": 101,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/kernel.h",
  "before-lines": [
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448
  ],
  "before-code": " * This routine puts the current thread to sleep for @a duration milliseconds.\n *\n * @param ms Number of milliseconds to sleep.\n *\n * @return Zero if the requested time has elapsed or the number of milliseconds\n * left to sleep, if thread was woken up by \\ref k_wakeup call.\n */\nstatic inline int32_t k_msleep(int32_t ms)\n{\n\treturn k_sleep(Z_TIMEOUT_MS(ms));\n}\n\n/**\n * @brief Put the current thread to sleep with microsecond resolution.\n *\n * This function is unlikely to work as expected without kernel tuning.\n * In particular, because the lower bound on the duration of a sleep is\n * the duration of a tick, @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} must be\n * adjusted to achieve the resolution desired. The implications of doing\n * this must be understood before attempting to use k_usleep(). Use with\n * caution.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/kernel.h",
  "after-lines": [
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448
  ],
  "after-code": " * This routine puts the current thread to sleep for @a duration milliseconds.\n *\n * @param ms Number of milliseconds to sleep.\n *\n * @return Zero if the requested time has elapsed or the number of milliseconds\n * left to sleep, if thread was woken up by \\ref k_wakeup call.\n */\nstatic inline int32_t k_msleep(int32_t ms)\n{\n\treturn k_sleep(Z_TIMEOUT_MS(ms));\n}\n\n/**\n * @brief Put the current thread to sleep with microsecond resolution.\n *\n * This function is unlikely to work as expected without kernel tuning.\n * In particular, because the lower bound on the duration of a sleep is\n * the duration of a tick, @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} must be\n * adjusted to achieve the resolution desired. The implications of doing\n * this must be understood before attempting to use k_usleep(). Use with\n * caution.\n",
  "violation-line": 438,
  "violation-message": "The int type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/kernel.h",
  "before-lines": [
    1491,
    1492,
    1493,
    1494,
    1495,
    1496,
    1497,
    1498,
    1499,
    1500,
    1501,
    1502,
    1503,
    1504,
    1505,
    1506,
    1507,
    1508,
    1509,
    1510,
    1511
  ],
  "before-code": " * This routine computes the (approximate) time remaining before a running\n * timer next expires. If the timer is not running, it returns zero.\n *\n * @param timer     Address of timer.\n *\n * @return Remaining time (in milliseconds).\n */\nstatic inline uint32_t k_timer_remaining_get(struct k_timer *timer)\n{\n\treturn k_ticks_to_ms_floor32(k_timer_remaining_ticks(timer));\n}\n\n#endif /* CONFIG_SYS_CLOCK_EXISTS */\n\n/**\n * @brief Associate user-specific data with a timer.\n *\n * This routine records the @a user_data with the @a timer, to be retrieved\n * later.\n *\n * It can be used e.g. in a timer handler shared across multiple subsystems to\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/kernel.h",
  "after-lines": [
    1491,
    1492,
    1493,
    1494,
    1495,
    1496,
    1497,
    1498,
    1499,
    1500,
    1501,
    1502,
    1503,
    1504,
    1505,
    1506,
    1507,
    1508,
    1509,
    1510,
    1511
  ],
  "after-code": " * This routine computes the (approximate) time remaining before a running\n * timer next expires. If the timer is not running, it returns zero.\n *\n * @param timer     Address of timer.\n *\n * @return Remaining time (in milliseconds).\n */\nstatic inline uint32_t k_timer_remaining_get(struct k_timer *timer)\n{\n\treturn k_ticks_to_ms_floor32((uint32_t)k_timer_remaining_ticks(timer));\n}\n\n#endif /* CONFIG_SYS_CLOCK_EXISTS */\n\n/**\n * @brief Associate user-specific data with a timer.\n *\n * This routine records the @a user_data with the @a timer, to be retrieved\n * later.\n *\n * It can be used e.g. in a timer handler shared across multiple subsystems to\n",
  "violation-line": 1501,
  "violation-message": "The long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/kernel.h",
  "before-lines": [
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589
  ],
  "before-code": " * @note\n *    While this function returns time in milliseconds, it does\n *    not mean it has millisecond resolution. The actual resolution depends on\n *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.\n *\n * @return Current uptime in milliseconds.\n */\nstatic inline int64_t k_uptime_get(void)\n{\n\treturn k_ticks_to_ms_floor64(k_uptime_ticks());\n}\n\n/**\n * @brief Get system uptime (32-bit version).\n *\n * This routine returns the lower 32 bits of the system uptime in\n * milliseconds.\n *\n * Because correct conversion requires full precision of the system\n * clock there is no benefit to using this over k_uptime_get() unless\n * you know the application will never run long enough for the system\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/kernel.h",
  "after-lines": [
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589
  ],
  "after-code": " * @note\n *    While this function returns time in milliseconds, it does\n *    not mean it has millisecond resolution. The actual resolution depends on\n *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.\n *\n * @return Current uptime in milliseconds.\n */\nstatic inline int64_t k_uptime_get(void)\n{\n\treturn (int64_t)k_ticks_to_ms_floor64((uint64_t)k_uptime_ticks());\n}\n\n/**\n * @brief Get system uptime (32-bit version).\n *\n * This routine returns the lower 32 bits of the system uptime in\n * milliseconds.\n *\n * Because correct conversion requires full precision of the system\n * clock there is no benefit to using this over k_uptime_get() unless\n * you know the application will never run long enough for the system\n",
  "violation-line": 1579,
  "violation-message": "The unsigned long long type has been assigned to the object of long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/kernel.h",
  "before-lines": [
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589
  ],
  "before-code": " * @note\n *    While this function returns time in milliseconds, it does\n *    not mean it has millisecond resolution. The actual resolution depends on\n *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.\n *\n * @return Current uptime in milliseconds.\n */\nstatic inline int64_t k_uptime_get(void)\n{\n\treturn k_ticks_to_ms_floor64(k_uptime_ticks());\n}\n\n/**\n * @brief Get system uptime (32-bit version).\n *\n * This routine returns the lower 32 bits of the system uptime in\n * milliseconds.\n *\n * Because correct conversion requires full precision of the system\n * clock there is no benefit to using this over k_uptime_get() unless\n * you know the application will never run long enough for the system\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/kernel.h",
  "after-lines": [
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589
  ],
  "after-code": " * @note\n *    While this function returns time in milliseconds, it does\n *    not mean it has millisecond resolution. The actual resolution depends on\n *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.\n *\n * @return Current uptime in milliseconds.\n */\nstatic inline int64_t k_uptime_get(void)\n{\n\treturn (int64_t)k_ticks_to_ms_floor64((uint64_t)k_uptime_ticks());\n}\n\n/**\n * @brief Get system uptime (32-bit version).\n *\n * This routine returns the lower 32 bits of the system uptime in\n * milliseconds.\n *\n * Because correct conversion requires full precision of the system\n * clock there is no benefit to using this over k_uptime_get() unless\n * you know the application will never run long enough for the system\n",
  "violation-line": 1579,
  "violation-message": "The long long type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/kernel.h",
  "before-lines": [
    3786,
    3787,
    3788,
    3789,
    3790,
    3791,
    3792,
    3793,
    3794,
    3795,
    3796,
    3797,
    3798,
    3799,
    3800,
    3801,
    3802,
    3803,
    3804,
    3805,
    3806
  ],
  "before-code": "\treturn k_work_delayable_is_pending(&work->work);\n}\n\n__deprecated\nstatic inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)\n{\n\tk_ticks_t rem = k_work_delayable_remaining_get(&work->work);\n\n\t/* Probably should be ceil32, but was floor32 */\n\treturn k_ticks_to_ms_floor32(rem);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_expires_ticks(\n\tstruct k_delayed_work *work)\n{\n\treturn k_work_delayable_expires_get(&work->work);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_remaining_ticks(\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/kernel.h",
  "after-lines": [
    3786,
    3787,
    3788,
    3789,
    3790,
    3791,
    3792,
    3793,
    3794,
    3795,
    3796,
    3797,
    3798,
    3799,
    3800,
    3801,
    3802,
    3803,
    3804,
    3805,
    3806
  ],
  "after-code": "\treturn k_work_delayable_is_pending(&work->work);\n}\n\n__deprecated\nstatic inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)\n{\n\tk_ticks_t rem = k_work_delayable_remaining_get(&work->work);\n\n\t/* Probably should be ceil32, but was floor32 */\n\treturn (int32_t)k_ticks_to_ms_floor32((uint32_t)rem);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_expires_ticks(\n\tstruct k_delayed_work *work)\n{\n\treturn k_work_delayable_expires_get(&work->work);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_remaining_ticks(\n",
  "violation-line": 3796,
  "violation-message": "The long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/kernel.h",
  "before-lines": [
    3786,
    3787,
    3788,
    3789,
    3790,
    3791,
    3792,
    3793,
    3794,
    3795,
    3796,
    3797,
    3798,
    3799,
    3800,
    3801,
    3802,
    3803,
    3804,
    3805,
    3806
  ],
  "before-code": "\treturn k_work_delayable_is_pending(&work->work);\n}\n\n__deprecated\nstatic inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)\n{\n\tk_ticks_t rem = k_work_delayable_remaining_get(&work->work);\n\n\t/* Probably should be ceil32, but was floor32 */\n\treturn k_ticks_to_ms_floor32(rem);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_expires_ticks(\n\tstruct k_delayed_work *work)\n{\n\treturn k_work_delayable_expires_get(&work->work);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_remaining_ticks(\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/kernel.h",
  "after-lines": [
    3786,
    3787,
    3788,
    3789,
    3790,
    3791,
    3792,
    3793,
    3794,
    3795,
    3796,
    3797,
    3798,
    3799,
    3800,
    3801,
    3802,
    3803,
    3804,
    3805,
    3806
  ],
  "after-code": "\treturn k_work_delayable_is_pending(&work->work);\n}\n\n__deprecated\nstatic inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)\n{\n\tk_ticks_t rem = k_work_delayable_remaining_get(&work->work);\n\n\t/* Probably should be ceil32, but was floor32 */\n\treturn (int32_t)k_ticks_to_ms_floor32((uint32_t)rem);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_expires_ticks(\n\tstruct k_delayed_work *work)\n{\n\treturn k_work_delayable_expires_get(&work->work);\n}\n\n__deprecated\nstatic inline k_ticks_t k_delayed_work_remaining_ticks(\n",
  "violation-line": 3796,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_backend.h",
  "before-lines": [
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256
  ],
  "before-code": "}\n\n/**\n * @brief Get number of backends.\n *\n * @return Number of backends.\n */\nstatic inline int log_backend_count_get(void)\n{\n\treturn __log_backends_end - __log_backends_start;\n}\n\n/**\n * @brief Activate backend.\n *\n * @param[in] backend  Pointer to the backend instance.\n * @param[in] ctx      User context.\n */\nstatic inline void log_backend_activate(const struct log_backend *const backend,\n\t\t\t\t\tvoid *ctx)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_backend.h",
  "after-lines": [
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256
  ],
  "after-code": "}\n\n/**\n * @brief Get number of backends.\n *\n * @return Number of backends.\n */\nstatic inline unsigned int log_backend_count_get(void)\n{\n\treturn (unsigned int)(__log_backends_end - __log_backends_start);\n}\n\n/**\n * @brief Activate backend.\n *\n * @param[in] backend  Pointer to the backend instance.\n * @param[in] ctx      User context.\n */\nstatic inline void log_backend_activate(const struct log_backend *const backend,\n\t\t\t\t\tvoid *ctx)\n{\n",
  "violation-line": 246,
  "violation-message": "The long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_core.h",
  "before-lines": [
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287
  ],
  "before-code": "#define Z_LOG_TO_VPRINTK(_level, fmt, valist) do { \\\n\tz_log_minimal_printk(\"%c: \", z_log_minimal_level_to_char(_level)); \\\n\tz_log_minimal_vprintk(fmt, valist); \\\n\tz_log_minimal_printk(\"\\n\"); \\\n} while (false)\n\nstatic inline char z_log_minimal_level_to_char(int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_core.h",
  "after-lines": [
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287
  ],
  "after-code": "#define Z_LOG_TO_VPRINTK(_level, fmt, valist) do { \\\n\tz_log_minimal_printk(\"%c: \", z_log_minimal_level_to_char(_level)); \\\n\tz_log_minimal_vprintk(fmt, valist); \\\n\tz_log_minimal_printk(\"\\n\"); \\\n} while (false)\n\nstatic inline char z_log_minimal_level_to_char(unsigned int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n",
  "violation-line": 277,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_core.h",
  "before-lines": [
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289
  ],
  "before-code": "\tz_log_minimal_vprintk(fmt, valist); \\\n\tz_log_minimal_printk(\"\\n\"); \\\n} while (false)\n\nstatic inline char z_log_minimal_level_to_char(int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n\n#define Z_LOG_INST(_inst) COND_CODE_1(CONFIG_LOG, (_inst), NULL)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_core.h",
  "after-lines": [
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289
  ],
  "after-code": "\tz_log_minimal_vprintk(fmt, valist); \\\n\tz_log_minimal_printk(\"\\n\"); \\\n} while (false)\n\nstatic inline char z_log_minimal_level_to_char(unsigned int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n\n#define Z_LOG_INST(_inst) COND_CODE_1(CONFIG_LOG, (_inst), NULL)\n",
  "violation-line": 279,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_core.h",
  "before-lines": [
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291
  ],
  "before-code": "} while (false)\n\nstatic inline char z_log_minimal_level_to_char(int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n\n#define Z_LOG_INST(_inst) COND_CODE_1(CONFIG_LOG, (_inst), NULL)\n\n/*****************************************************************************/\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_core.h",
  "after-lines": [
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291
  ],
  "after-code": "} while (false)\n\nstatic inline char z_log_minimal_level_to_char(unsigned int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n\n#define Z_LOG_INST(_inst) COND_CODE_1(CONFIG_LOG, (_inst), NULL)\n\n/*****************************************************************************/\n",
  "violation-line": 281,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_core.h",
  "before-lines": [
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293
  ],
  "before-code": "static inline char z_log_minimal_level_to_char(int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n\n#define Z_LOG_INST(_inst) COND_CODE_1(CONFIG_LOG, (_inst), NULL)\n\n/*****************************************************************************/\n/****************** Macros for standard logging ******************************/\n/*****************************************************************************/\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_core.h",
  "after-lines": [
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293
  ],
  "after-code": "static inline char z_log_minimal_level_to_char(unsigned int level)\n{\n\tswitch (level) {\n\tcase LOG_LEVEL_ERR:\n\t\treturn 'E';\n\tcase LOG_LEVEL_WRN:\n\t\treturn 'W';\n\tcase LOG_LEVEL_INF:\n\t\treturn 'I';\n\tcase LOG_LEVEL_DBG:\n\t\treturn 'D';\n\tdefault:\n\t\treturn '?';\n\t}\n}\n\n#define Z_LOG_INST(_inst) COND_CODE_1(CONFIG_LOG, (_inst), NULL)\n\n/*****************************************************************************/\n/****************** Macros for standard logging ******************************/\n/*****************************************************************************/\n",
  "violation-line": 283,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_core.h",
  "before-lines": [
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526
  ],
  "before-code": " *         associated with the source.\n *\n * @param data Address of the constant data.\n *\n * @return Source ID.\n */\nstatic inline uint32_t log_const_source_id(\n\t\t\t\tconst struct log_source_const_data *data)\n{\n\treturn ((uint8_t *)data - (uint8_t *)__log_const_start)/\n\t\t\tsizeof(struct log_source_const_data);\n}\n\n/** @brief Get number of registered sources. */\nstatic inline uint32_t log_sources_count(void)\n{\n\treturn log_const_source_id(__log_const_end);\n}\n\nextern struct log_source_dynamic_data __log_dynamic_start[];\nextern struct log_source_dynamic_data __log_dynamic_end[];\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_core.h",
  "after-lines": [
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526
  ],
  "after-code": " *         associated with the source.\n *\n * @param data Address of the constant data.\n *\n * @return Source ID.\n */\nstatic inline uint16_t log_const_source_id(\n\t\t\t\tconst struct log_source_const_data *data)\n{\n\treturn (uint16_t)((size_t)((uint8_t *)data - (uint8_t *)__log_const_start) /\n\t\t\tsizeof(struct log_source_const_data));\n}\n\n/** @brief Get number of registered sources. */\nstatic inline uint16_t log_sources_count(void)\n{\n\treturn log_const_source_id(__log_const_end);\n}\n\nextern struct log_source_dynamic_data __log_dynamic_start[];\nextern struct log_source_dynamic_data __log_dynamic_end[];\n\n",
  "violation-line": 515,
  "violation-message": "The long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_core.h",
  "before-lines": [
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568
  ],
  "before-code": "/** @brief Get index of the log source based on the address of the dynamic data\n *         associated with the source.\n *\n * @param data Address of the dynamic data.\n *\n * @return Source ID.\n */\nstatic inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)\n{\n\treturn ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/\n\t\t\tsizeof(struct log_source_dynamic_data);\n}\n\n/* Initialize runtime filters */\nvoid z_log_runtime_filters_init(void);\n\n/* Notify log_core that a backend was enabled. */\nvoid z_log_notify_backend_enabled(void);\n\n/** @brief Dummy function to trigger log messages arguments type checking. */\nstatic inline __printf_like(1, 2)\nvoid z_log_printf_arg_checker(const char *fmt, ...)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_core.h",
  "after-lines": [
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568
  ],
  "after-code": "/** @brief Get index of the log source based on the address of the dynamic data\n *         associated with the source.\n *\n * @param data Address of the dynamic data.\n *\n * @return Source ID.\n */\nstatic inline uint16_t log_dynamic_source_id(struct log_source_dynamic_data *data)\n{\n\treturn (uint16_t)((size_t)((uint8_t *)data - (uint8_t *)__log_dynamic_start)/\n\t\t\tsizeof(struct log_source_dynamic_data));\n}\n\n/* Initialize runtime filters */\nvoid z_log_runtime_filters_init(void);\n\n/* Notify log_core that a backend was enabled. */\nvoid z_log_notify_backend_enabled(void);\n\n/** @brief Dummy function to trigger log messages arguments type checking. */\nstatic inline __printf_like(1, 2)\nvoid z_log_printf_arg_checker(const char *fmt, ...)\n",
  "violation-line": 557,
  "violation-message": "The long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/logging/log_msg2.h",
  "before-lines": [
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514
  ],
  "before-code": "\n/** @brief Get total length (in 32 bit words) of a log message.\n *\n * @param desc Log message descriptor.\n *\n * @return Length.\n */\nstatic inline uint32_t log_msg2_get_total_wlen(const struct log_msg2_desc desc)\n{\n\treturn Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);\n}\n\n/** @brief Get length of the log item.\n *\n * @param item Item.\n *\n * @return Length in 32 bit words.\n */\nstatic inline uint32_t log_msg2_generic_get_wlen(const union mpsc_pbuf_generic *item)\n{\n\tunion log_msg2_generic *generic_msg = (union log_msg2_generic *)item;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/logging/log_msg2.h",
  "after-lines": [
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515
  ],
  "after-code": "\n/** @brief Get total length (in 32 bit words) of a log message.\n *\n * @param desc Log message descriptor.\n *\n * @return Length.\n */\nstatic inline uint32_t log_msg2_get_total_wlen(const struct log_msg2_desc desc)\n{\n\treturn Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);\n}\n\n/** @brief Get length of the log item.\n *\n * @param item Item.\n *\n * @return Length in 32 bit words.\n */\nstatic inline uint32_t log_msg2_generic_get_wlen(const union mpsc_pbuf_generic *item)\n{\n\tunion log_msg2_generic *generic_msg = (union log_msg2_generic *)item;\n",
  "violation-line": 504,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/posix/time.h",
  "before-lines": [
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94
  ],
  "before-code": "\n#define NSEC_PER_MSEC (NSEC_PER_USEC * USEC_PER_MSEC)\n\n#ifndef TIMER_ABSTIME\n#define TIMER_ABSTIME 4\n#endif\n\nstatic inline int32_t _ts_to_ms(const struct timespec *to)\n{\n\treturn (to->tv_sec * MSEC_PER_SEC) + (to->tv_nsec / NSEC_PER_MSEC);\n}\n\n#ifdef CONFIG_ARCH_POSIX\nint clock_gettime(clockid_t clock_id, struct timespec *ts);\n#else\n__syscall int clock_gettime(clockid_t clock_id, struct timespec *ts);\n#endif /* CONFIG_ARCH_POSIX */\nint clock_settime(clockid_t clock_id, const struct timespec *ts);\n/* Timer APIs */\nint timer_create(clockid_t clockId, struct sigevent *evp, timer_t *timerid);\nint timer_delete(timer_t timerid);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/posix/time.h",
  "after-lines": [
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95
  ],
  "after-code": "\n#define NSEC_PER_MSEC (NSEC_PER_USEC * USEC_PER_MSEC)\n\n#ifndef TIMER_ABSTIME\n#define TIMER_ABSTIME 4\n#endif\n\nstatic inline int32_t _ts_to_ms(const struct timespec *to)\n{\n\treturn (int32_t)((to->tv_sec * (int32_t)MSEC_PER_SEC) +\n\t\t(to->tv_nsec / (int32_t)NSEC_PER_MSEC));\n}\n\n#ifdef CONFIG_ARCH_POSIX\nint clock_gettime(clockid_t clock_id, struct timespec *ts);\n#else\n__syscall int clock_gettime(clockid_t clock_id, struct timespec *ts);\n#endif /* CONFIG_ARCH_POSIX */\nint clock_settime(clockid_t clock_id, const struct timespec *ts);\n/* Timer APIs */\nint timer_create(clockid_t clockId, struct sigevent *evp, timer_t *timerid);\nint timer_delete(timer_t timerid);\n",
  "violation-line": 84,
  "violation-message": "The long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/spinlock.h",
  "before-lines": [
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136
  ],
  "before-code": "static ALWAYS_INLINE k_spinlock_key_t k_spin_lock(struct k_spinlock *l)\n{\n\tARG_UNUSED(l);\n\tk_spinlock_key_t k;\n\n\t/* Note that we need to use the underlying arch-specific lock\n\t * implementation.  The \"irq_lock()\" API in SMP context is\n\t * actually a wrapper for a global spinlock!\n\t */\n\tk.key = arch_irq_lock();\n\n#ifdef CONFIG_SPIN_VALIDATE\n\t__ASSERT(z_spin_lock_valid(l), \"Recursive spinlock %p\", l);\n# ifdef CONFIG_KERNEL_COHERENCE\n\t__ASSERT_NO_MSG(z_spin_lock_mem_coherent(l));\n# endif\n#endif\n\n#ifdef CONFIG_SMP\n\twhile (!atomic_cas(&l->locked, 0, 1)) {\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/spinlock.h",
  "after-lines": [
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136
  ],
  "after-code": "static ALWAYS_INLINE k_spinlock_key_t k_spin_lock(struct k_spinlock *l)\n{\n\tARG_UNUSED(l);\n\tk_spinlock_key_t k;\n\n\t/* Note that we need to use the underlying arch-specific lock\n\t * implementation.  The \"irq_lock()\" API in SMP context is\n\t * actually a wrapper for a global spinlock!\n\t */\n\tk.key = arch_irq_lock();\n\n#ifdef CONFIG_SPIN_VALIDATE\n\t__ASSERT(z_spin_lock_valid(l), \"Recursive spinlock %p\", l);\n# ifdef CONFIG_KERNEL_COHERENCE\n\t__ASSERT_NO_MSG(z_spin_lock_mem_coherent(l));\n# endif\n#endif\n\n#ifdef CONFIG_SMP\n\twhile (!atomic_cas(&l->locked, 0, 1)) {\n\t}\n",
  "violation-line": 126,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/spinlock.h",
  "before-lines": [
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195
  ],
  "before-code": "\t/* Strictly we don't need atomic_clear() here (which is an\n\t * exchange operation that returns the old value).  We are always\n\t * setting a zero and (because we hold the lock) know the existing\n\t * state won't change due to a race.  But some architectures need\n\t * a memory barrier when used like this, and we don't have a\n\t * Zephyr framework for that.\n\t */\n\tatomic_clear(&l->locked);\n#endif\n\tarch_irq_unlock(key.key);\n}\n\n/* Internal function: releases the lock, but leaves local interrupts\n * disabled\n */\nstatic ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)\n{\n\tARG_UNUSED(l);\n#ifdef CONFIG_SPIN_VALIDATE\n\t__ASSERT(z_spin_unlock_valid(l), \"Not my spinlock %p\", l);\n#endif\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/spinlock.h",
  "after-lines": [
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195
  ],
  "after-code": "\t/* Strictly we don't need atomic_clear() here (which is an\n\t * exchange operation that returns the old value).  We are always\n\t * setting a zero and (because we hold the lock) know the existing\n\t * state won't change due to a race.  But some architectures need\n\t * a memory barrier when used like this, and we don't have a\n\t * Zephyr framework for that.\n\t */\n\tatomic_clear(&l->locked);\n#endif\n\tarch_irq_unlock(key.key);\n}\n\n/* Internal function: releases the lock, but leaves local interrupts\n * disabled\n */\nstatic ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)\n{\n\tARG_UNUSED(l);\n#ifdef CONFIG_SPIN_VALIDATE\n\t__ASSERT(z_spin_unlock_valid(l), \"Not my spinlock %p\", l);\n#endif\n",
  "violation-line": 185,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/atomic.h",
  "before-lines": [
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157
  ],
  "before-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return true if the bit was set, false if it wasn't.\n */\nstatic inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)\n{\n\tatomic_val_t mask = ATOMIC_MASK(bit);\n\tatomic_val_t old;\n\n\told = atomic_and(ATOMIC_ELEM(target, bit), ~mask);\n\n\treturn (old & mask) != 0;\n}\n\n/**\n * @brief Atomically set a bit.\n *\n * Atomically set bit number @a bit of @a target and return its old value.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/atomic.h",
  "after-lines": [
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159
  ],
  "after-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return true if the bit was set, false if it wasn't.\n */\nstatic inline bool atomic_test_and_clear_bit(atomic_t *target, unsigned int bit)\n{\n\tatomic_bits_t mask = ATOMIC_MASK(bit);\n\tatomic_bits_t nmask = ~mask;\n\tatomic_val_t old;\n\n\told = atomic_and(ATOMIC_ELEM(target, bit), (atomic_val_t)nmask);\n\n\treturn ((atomic_bits_t)old & mask) != 0;\n}\n\n/**\n * @brief Atomically set a bit.\n *\n * Atomically set bit number @a bit of @a target and return its old value.\n",
  "violation-line": 147,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/atomic.h",
  "before-lines": [
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178
  ],
  "before-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return true if the bit was set, false if it wasn't.\n */\nstatic inline bool atomic_test_and_set_bit(atomic_t *target, int bit)\n{\n\tatomic_val_t mask = ATOMIC_MASK(bit);\n\tatomic_val_t old;\n\n\told = atomic_or(ATOMIC_ELEM(target, bit), mask);\n\n\treturn (old & mask) != 0;\n}\n\n/**\n * @brief Atomically clear a bit.\n *\n * Atomically clear bit number @a bit of @a target.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/atomic.h",
  "after-lines": [
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180
  ],
  "after-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return true if the bit was set, false if it wasn't.\n */\nstatic inline bool atomic_test_and_set_bit(atomic_t *target, unsigned int bit)\n{\n\tatomic_bits_t mask = ATOMIC_MASK(bit);\n\tatomic_val_t old;\n\n\told = atomic_or(ATOMIC_ELEM(target, bit), (atomic_val_t)mask);\n\n\treturn ((atomic_bits_t)old & mask) != 0;\n}\n\n/**\n * @brief Atomically clear a bit.\n *\n * Atomically clear bit number @a bit of @a target.\n",
  "violation-line": 168,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/atomic.h",
  "before-lines": [
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199
  ],
  "before-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return N/A\n */\nstatic inline void atomic_clear_bit(atomic_t *target, int bit)\n{\n\tatomic_val_t mask = ATOMIC_MASK(bit);\n\n\t(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);\n}\n\n/**\n * @brief Atomically set a bit.\n *\n * Atomically set bit number @a bit of @a target.\n * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/atomic.h",
  "after-lines": [
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201
  ],
  "after-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return N/A\n */\nstatic inline void atomic_clear_bit(atomic_t *target, unsigned int bit)\n{\n\tatomic_bits_t nmask = ~ATOMIC_MASK(bit);\n\n\t(void)atomic_and(ATOMIC_ELEM(target, bit), (atomic_val_t)nmask);\n}\n\n/**\n * @brief Atomically set a bit.\n *\n * Atomically set bit number @a bit of @a target.\n * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n",
  "violation-line": 189,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/atomic.h",
  "before-lines": [
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217
  ],
  "before-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return N/A\n */\nstatic inline void atomic_set_bit(atomic_t *target, int bit)\n{\n\tatomic_val_t mask = ATOMIC_MASK(bit);\n\n\t(void)atomic_or(ATOMIC_ELEM(target, bit), mask);\n}\n\n/**\n * @brief Atomically set a bit to a given value.\n *\n * Atomically set bit number @a bit of @a target to value @a val.\n * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/atomic.h",
  "after-lines": [
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219
  ],
  "after-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n *\n * @return N/A\n */\nstatic inline void atomic_set_bit(atomic_t *target, unsigned int bit)\n{\n\tatomic_bits_t mask = ATOMIC_MASK(bit);\n\n\t(void)atomic_or(ATOMIC_ELEM(target, bit), (atomic_val_t)mask);\n}\n\n/**\n * @brief Atomically set a bit to a given value.\n *\n * Atomically set bit number @a bit of @a target to value @a val.\n * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n",
  "violation-line": 207,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/atomic.h",
  "before-lines": [
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237
  ],
  "before-code": " *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n * @param val true for 1, false for 0.\n *\n * @return N/A\n */\nstatic inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)\n{\n\tatomic_val_t mask = ATOMIC_MASK(bit);\n\n\tif (val) {\n\t\t(void)atomic_or(ATOMIC_ELEM(target, bit), mask);\n\t} else {\n\t\t(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);\n\t}\n}\n\n/**\n * @}\n */\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/atomic.h",
  "after-lines": [
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238
  ],
  "after-code": " * The target may be a single atomic variable or an array of them.\n *\n * @param target Address of atomic variable or array.\n * @param bit Bit number (starting from 0).\n * @param val true for 1, false for 0.\n *\n * @return N/A\n */\nstatic inline void atomic_set_bit_to(atomic_t *target, unsigned int bit, bool val)\n{\n\tif (val) {\n\t\tatomic_bits_t mask = ATOMIC_MASK(bit);\n\t\t(void)atomic_or(ATOMIC_ELEM(target, bit), (atomic_val_t)mask);\n\t} else {\n\t\tatomic_bits_t nmask = ~ATOMIC_MASK(bit);\n\t\t(void)atomic_and(ATOMIC_ELEM(target, bit), (atomic_val_t)nmask);\n\t}\n}\n\n/**\n * @}\n */\n",
  "violation-line": 226,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/device_mmio.h",
  "before-lines": [
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103
  ],
  "before-code": " */\n__boot_func\nstatic inline void device_map(mm_reg_t *virt_addr, uintptr_t phys_addr,\n\t\t\t      size_t size, uint32_t flags)\n{\n#ifdef CONFIG_MMU\n\t/* Pass along flags and add that we want supervisor mode\n\t * read-write access.\n\t */\n\tz_phys_map((uint8_t **)virt_addr, phys_addr, size,\n\t\t   flags | K_MEM_PERM_RW);\n#else\n\tARG_UNUSED(size);\n\tARG_UNUSED(flags);\n\n\t*virt_addr = phys_addr;\n#endif /* CONFIG_MMU */\n}\n#else\n/* No MMU or PCIe. Just store the address from DTS and treat as a linear\n * address\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/device_mmio.h",
  "after-lines": [
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103
  ],
  "after-code": " */\n__boot_func\nstatic inline void device_map(mm_reg_t *virt_addr, uintptr_t phys_addr,\n\t\t\t      size_t size, uint32_t flags)\n{\n#ifdef CONFIG_MMU\n\t/* Pass along flags and add that we want supervisor mode\n\t * read-write access.\n\t */\n\tz_phys_map((uint8_t **)virt_addr, phys_addr, size,\n\t\t   flags | K_MEM_PERM_RW);\n#else\n\tARG_UNUSED(size);\n\tARG_UNUSED(flags);\n\n\t*virt_addr = phys_addr;\n#endif /* CONFIG_MMU */\n}\n#else\n/* No MMU or PCIe. Just store the address from DTS and treat as a linear\n * address\n",
  "violation-line": 93,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/sflist.h",
  "before-lines": [
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282
  ],
  "before-code": "\n/**\n * @brief Fetch flags value for a particular sfnode\n *\n * @param node A pointer to the node to fetch flags from\n * @return The value of flags, which will be between 0 and 3\n */\nstatic inline uint8_t sys_sfnode_flags_get(sys_sfnode_t *node)\n{\n\treturn node->next_and_flags & SYS_SFLIST_FLAGS_MASK;\n}\n\n/**\n * @brief Initialize an sflist node\n *\n * Set an initial flags value for this slist node, which can be a value between\n * 0 and 3. These flags will persist even if the node is moved around\n * within a list, removed, or transplanted to a different slist.\n *\n * This is ever so slightly faster than sys_sfnode_flags_set() and should\n * only be used on a node that hasn't been added to any list.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/sflist.h",
  "after-lines": [
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282
  ],
  "after-code": "\n/**\n * @brief Fetch flags value for a particular sfnode\n *\n * @param node A pointer to the node to fetch flags from\n * @return The value of flags, which will be between 0 and 3\n */\nstatic inline uint8_t sys_sfnode_flags_get(sys_sfnode_t *node)\n{\n\treturn (uint8_t)(node->next_and_flags & SYS_SFLIST_FLAGS_MASK);\n}\n\n/**\n * @brief Initialize an sflist node\n *\n * Set an initial flags value for this slist node, which can be a value between\n * 0 and 3. These flags will persist even if the node is moved around\n * within a list, removed, or transplanted to a different slist.\n *\n * This is ever so slightly faster than sys_sfnode_flags_set() and should\n * only be used on a node that hasn't been added to any list.\n",
  "violation-line": 272,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/speculation.h",
  "before-lines": [
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54
  ],
  "before-code": " * }\n *\n * @param index Untrusted array index which has been validated, but not used\n * @param array_size Size of the array\n * @return The original index value if < size, or 0\n */\nstatic inline uint32_t k_array_index_sanitize(uint32_t index, uint32_t array_size)\n{\n#ifdef CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION\n\tint32_t signed_index = index, signed_array_size = array_size;\n\n\t/* Take the difference between index and max.\n\t * A proper value will result in a negative result. We also AND in\n\t * the complement of index, so that we automatically reject any large\n\t * indexes which would wrap around the difference calculation.\n\t *\n\t * Sign-extend just the sign bit to produce a mask of all 1s (accept)\n\t * or all 0s (truncate).\n\t */\n\tuint32_t mask = ((signed_index - signed_array_size) & ~signed_index) >> 31;\n\n\treturn index & mask;\n#else\n\tARG_UNUSED(array_size);\n\n\treturn index;\n#endif /* CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION */\n}\n#endif /* ZEPHYR_MISC_SPECULATION_H */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/speculation.h",
  "after-lines": [
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42
  ],
  "after-code": " * }\n *\n * @param index Untrusted array index which has been validated, but not used\n * @param array_size Size of the array\n * @return The original index value if < size, or 0\n */\nstatic inline uint32_t k_array_index_sanitize(uint32_t index, uint32_t array_size)\n{\n#ifdef CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION\n\treturn index < array_size ? index : 0U;\n#else\n\tARG_UNUSED(array_size);\n\n\treturn index;\n#endif /* CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION */\n}\n#endif /* ZEPHYR_MISC_SPECULATION_H */\n",
  "violation-line": 36,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/speculation.h",
  "before-lines": [
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54
  ],
  "before-code": " * }\n *\n * @param index Untrusted array index which has been validated, but not used\n * @param array_size Size of the array\n * @return The original index value if < size, or 0\n */\nstatic inline uint32_t k_array_index_sanitize(uint32_t index, uint32_t array_size)\n{\n#ifdef CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION\n\tint32_t signed_index = index, signed_array_size = array_size;\n\n\t/* Take the difference between index and max.\n\t * A proper value will result in a negative result. We also AND in\n\t * the complement of index, so that we automatically reject any large\n\t * indexes which would wrap around the difference calculation.\n\t *\n\t * Sign-extend just the sign bit to produce a mask of all 1s (accept)\n\t * or all 0s (truncate).\n\t */\n\tuint32_t mask = ((signed_index - signed_array_size) & ~signed_index) >> 31;\n\n\treturn index & mask;\n#else\n\tARG_UNUSED(array_size);\n\n\treturn index;\n#endif /* CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION */\n}\n#endif /* ZEPHYR_MISC_SPECULATION_H */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/speculation.h",
  "after-lines": [
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42
  ],
  "after-code": " * }\n *\n * @param index Untrusted array index which has been validated, but not used\n * @param array_size Size of the array\n * @return The original index value if < size, or 0\n */\nstatic inline uint32_t k_array_index_sanitize(uint32_t index, uint32_t array_size)\n{\n#ifdef CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION\n\treturn index < array_size ? index : 0U;\n#else\n\tARG_UNUSED(array_size);\n\n\treturn index;\n#endif /* CONFIG_BOUNDS_CHECK_BYPASS_MITIGATION */\n}\n#endif /* ZEPHYR_MISC_SPECULATION_H */\n",
  "violation-line": 46,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 218,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 218,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_near32(uint32_t t)\n",
  "violation-line": 232,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_near64(uint64_t t)\n",
  "violation-line": 246,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_near64(uint64_t t)\n",
  "violation-line": 246,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    250,
    251,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)\n",
  "violation-line": 260,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 274,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert milliseconds to hardware cycles\n *\n * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 274,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298
  ],
  "before-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303
  ],
  "after-code": " * Converts time values in milliseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_floor32(uint32_t t)\n",
  "violation-line": 288,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312
  ],
  "before-code": " * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, false, false);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317
  ],
  "after-code": " * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, false, false);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_floor64(uint64_t t)\n",
  "violation-line": 302,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340
  ],
  "before-code": " * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, false, true);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345
  ],
  "after-code": " * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, false, true);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_near64(uint64_t t)\n",
  "violation-line": 330,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    348,
    349,
    350,
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368
  ],
  "before-code": " * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373
  ],
  "after-code": " * Converts time values in milliseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);\n}\n\n/** @brief Convert milliseconds to ticks\n *\n * Converts time values in milliseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_ceil64(uint64_t t)\n",
  "violation-line": 358,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 386,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 386,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_near32(uint32_t t)\n",
  "violation-line": 400,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_near64(uint64_t t)\n",
  "violation-line": 414,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_near64(uint64_t t)\n",
  "violation-line": 414,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_ceil32(uint32_t t)\n",
  "violation-line": 428,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 442,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert microseconds to hardware cycles\n *\n * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 442,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466
  ],
  "before-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471
  ],
  "after-code": " * Converts time values in microseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_floor32(uint32_t t)\n",
  "violation-line": 456,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480
  ],
  "before-code": " * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, false, false);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_ticks_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483,
    484,
    485
  ],
  "after-code": " * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, false, false);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_ticks_floor64(uint64_t t)\n",
  "violation-line": 470,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508
  ],
  "before-code": " * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, false, true);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_ticks_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    493,
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513
  ],
  "after-code": " * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, false, true);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_ticks_near64(uint64_t t)\n",
  "violation-line": 498,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536
  ],
  "before-code": " * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_ticks_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541
  ],
  "after-code": " * Converts time values in microseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_us_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);\n}\n\n/** @brief Convert microseconds to ticks\n *\n * Converts time values in microseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_us_to_ticks_ceil64(uint64_t t)\n",
  "violation-line": 526,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 554,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 554,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_near32(uint32_t t)\n",
  "violation-line": 568,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_near64(uint64_t t)\n",
  "violation-line": 582,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_near64(uint64_t t)\n",
  "violation-line": 582,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603,
    604,
    605,
    606
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)\n",
  "violation-line": 596,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621,
    622,
    623,
    624,
    625
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 610,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621,
    622,
    623,
    624,
    625
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert nanoseconds to hardware cycles\n *\n * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 610,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621,
    622,
    623,
    624,
    625,
    626,
    627,
    628,
    629,
    630,
    631,
    632,
    633,
    634
  ],
  "before-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    619,
    620,
    621,
    622,
    623,
    624,
    625,
    626,
    627,
    628,
    629,
    630,
    631,
    632,
    633,
    634,
    635,
    636,
    637,
    638,
    639
  ],
  "after-code": " * Converts time values in nanoseconds to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_floor32(uint32_t t)\n",
  "violation-line": 624,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    628,
    629,
    630,
    631,
    632,
    633,
    634,
    635,
    636,
    637,
    638,
    639,
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    647,
    648
  ],
  "before-code": " * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_ticks, true, true, false, false);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_ticks_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    633,
    634,
    635,
    636,
    637,
    638,
    639,
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653
  ],
  "after-code": " * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_ticks, true, true, false, false);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_ticks_floor64(uint64_t t)\n",
  "violation-line": 638,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676
  ],
  "before-code": " * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_ticks, true, true, false, true);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_ticks_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681
  ],
  "after-code": " * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_ticks, true, true, false, true);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_ticks_near64(uint64_t t)\n",
  "violation-line": 666,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    684,
    685,
    686,
    687,
    688,
    689,
    690,
    691,
    692,
    693,
    694,
    695,
    696,
    697,
    698,
    699,
    700,
    701,
    702,
    703,
    704
  ],
  "before-code": " * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ns, Z_HZ_ticks, true, true, true, false);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_ticks_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    689,
    690,
    691,
    692,
    693,
    694,
    695,
    696,
    697,
    698,
    699,
    700,
    701,
    702,
    703,
    704,
    705,
    706,
    707,
    708,
    709
  ],
  "after-code": " * Converts time values in nanoseconds to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ns_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ns, Z_HZ_ticks, true, true, true, false);\n}\n\n/** @brief Convert nanoseconds to ticks\n *\n * Converts time values in nanoseconds to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ns_to_ticks_ceil64(uint64_t t)\n",
  "violation-line": 694,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    712,
    713,
    714,
    715,
    716,
    717,
    718,
    719,
    720,
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    717,
    718,
    719,
    720,
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732,
    733,
    734,
    735,
    736,
    737
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_floor64(uint64_t t)\n",
  "violation-line": 722,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    712,
    713,
    714,
    715,
    716,
    717,
    718,
    719,
    720,
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    717,
    718,
    719,
    720,
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732,
    733,
    734,
    735,
    736,
    737
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_floor64(uint64_t t)\n",
  "violation-line": 722,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    726,
    727,
    728,
    729,
    730,
    731,
    732,
    733,
    734,
    735,
    736,
    737,
    738,
    739,
    740,
    741,
    742,
    743,
    744,
    745,
    746
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    731,
    732,
    733,
    734,
    735,
    736,
    737,
    738,
    739,
    740,
    741,
    742,
    743,
    744,
    745,
    746,
    747,
    748,
    749,
    750,
    751
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)\n",
  "violation-line": 736,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    740,
    741,
    742,
    743,
    744,
    745,
    746,
    747,
    748,
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    745,
    746,
    747,
    748,
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    763,
    764,
    765
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_near64(uint64_t t)\n",
  "violation-line": 750,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    740,
    741,
    742,
    743,
    744,
    745,
    746,
    747,
    748,
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    745,
    746,
    747,
    748,
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    763,
    764,
    765
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_near64(uint64_t t)\n",
  "violation-line": 750,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    763,
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    759,
    760,
    761,
    762,
    763,
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)\n",
  "violation-line": 764,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    787,
    788
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    787,
    788,
    789,
    790,
    791,
    792,
    793
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)\n",
  "violation-line": 778,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    787,
    788
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    787,
    788,
    789,
    790,
    791,
    792,
    793
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to milliseconds\n *\n * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)\n",
  "violation-line": 778,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    782,
    783,
    784,
    785,
    786,
    787,
    788,
    789,
    790,
    791,
    792,
    793,
    794,
    795,
    796,
    797,
    798,
    799,
    800,
    801,
    802
  ],
  "before-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    787,
    788,
    789,
    790,
    791,
    792,
    793,
    794,
    795,
    796,
    797,
    798,
    799,
    800,
    801,
    802,
    803,
    804,
    805,
    806,
    807
  ],
  "after-code": " * Converts time values in hardware cycles to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_floor32(uint32_t t)\n",
  "violation-line": 792,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    796,
    797,
    798,
    799,
    800,
    801,
    802,
    803,
    804,
    805,
    806,
    807,
    808,
    809,
    810,
    811,
    812,
    813,
    814,
    815,
    816
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    801,
    802,
    803,
    804,
    805,
    806,
    807,
    808,
    809,
    810,
    811,
    812,
    813,
    814,
    815,
    816,
    817,
    818,
    819,
    820,
    821
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_floor64(uint64_t t)\n",
  "violation-line": 806,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    796,
    797,
    798,
    799,
    800,
    801,
    802,
    803,
    804,
    805,
    806,
    807,
    808,
    809,
    810,
    811,
    812,
    813,
    814,
    815,
    816
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    801,
    802,
    803,
    804,
    805,
    806,
    807,
    808,
    809,
    810,
    811,
    812,
    813,
    814,
    815,
    816,
    817,
    818,
    819,
    820,
    821
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_floor64(uint64_t t)\n",
  "violation-line": 806,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    810,
    811,
    812,
    813,
    814,
    815,
    816,
    817,
    818,
    819,
    820,
    821,
    822,
    823,
    824,
    825,
    826,
    827,
    828,
    829,
    830
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    815,
    816,
    817,
    818,
    819,
    820,
    821,
    822,
    823,
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_near32(uint32_t t)\n",
  "violation-line": 820,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841,
    842,
    843,
    844
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841,
    842,
    843,
    844,
    845,
    846,
    847,
    848,
    849
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_near64(uint64_t t)\n",
  "violation-line": 834,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841,
    842,
    843,
    844
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841,
    842,
    843,
    844,
    845,
    846,
    847,
    848,
    849
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_near64(uint64_t t)\n",
  "violation-line": 834,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    838,
    839,
    840,
    841,
    842,
    843,
    844,
    845,
    846,
    847,
    848,
    849,
    850,
    851,
    852,
    853,
    854,
    855,
    856,
    857,
    858
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    843,
    844,
    845,
    846,
    847,
    848,
    849,
    850,
    851,
    852,
    853,
    854,
    855,
    856,
    857,
    858,
    859,
    860,
    861,
    862,
    863
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_ceil32(uint32_t t)\n",
  "violation-line": 848,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    852,
    853,
    854,
    855,
    856,
    857,
    858,
    859,
    860,
    861,
    862,
    863,
    864,
    865,
    866,
    867,
    868,
    869,
    870,
    871,
    872
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    857,
    858,
    859,
    860,
    861,
    862,
    863,
    864,
    865,
    866,
    867,
    868,
    869,
    870,
    871,
    872,
    873,
    874,
    875,
    876,
    877
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_ceil64(uint64_t t)\n",
  "violation-line": 862,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    852,
    853,
    854,
    855,
    856,
    857,
    858,
    859,
    860,
    861,
    862,
    863,
    864,
    865,
    866,
    867,
    868,
    869,
    870,
    871,
    872
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    857,
    858,
    859,
    860,
    861,
    862,
    863,
    864,
    865,
    866,
    867,
    868,
    869,
    870,
    871,
    872,
    873,
    874,
    875,
    876,
    877
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_us_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to microseconds\n *\n * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_ceil64(uint64_t t)\n",
  "violation-line": 862,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    866,
    867,
    868,
    869,
    870,
    871,
    872,
    873,
    874,
    875,
    876,
    877,
    878,
    879,
    880,
    881,
    882,
    883,
    884,
    885,
    886
  ],
  "before-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    871,
    872,
    873,
    874,
    875,
    876,
    877,
    878,
    879,
    880,
    881,
    882,
    883,
    884,
    885,
    886,
    887,
    888,
    889,
    890,
    891
  ],
  "after-code": " * Converts time values in hardware cycles to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_us_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_us, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_floor32(uint32_t t)\n",
  "violation-line": 876,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    880,
    881,
    882,
    883,
    884,
    885,
    886,
    887,
    888,
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    885,
    886,
    887,
    888,
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_floor64(uint64_t t)\n",
  "violation-line": 890,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    880,
    881,
    882,
    883,
    884,
    885,
    886,
    887,
    888,
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    885,
    886,
    887,
    888,
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_floor64(uint64_t t)\n",
  "violation-line": 890,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910,
    911,
    912,
    913,
    914
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_near32(uint32_t t)\n",
  "violation-line": 904,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928,
    929,
    930,
    931,
    932,
    933
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_near64(uint64_t t)\n",
  "violation-line": 918,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928,
    929,
    930,
    931,
    932,
    933
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_near64(uint64_t t)\n",
  "violation-line": 918,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    922,
    923,
    924,
    925,
    926,
    927,
    928,
    929,
    930,
    931,
    932,
    933,
    934,
    935,
    936,
    937,
    938,
    939,
    940,
    941,
    942
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    927,
    928,
    929,
    930,
    931,
    932,
    933,
    934,
    935,
    936,
    937,
    938,
    939,
    940,
    941,
    942,
    943,
    944,
    945,
    946,
    947
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)\n",
  "violation-line": 932,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    936,
    937,
    938,
    939,
    940,
    941,
    942,
    943,
    944,
    945,
    946,
    947,
    948,
    949,
    950,
    951,
    952,
    953,
    954,
    955,
    956
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    941,
    942,
    943,
    944,
    945,
    946,
    947,
    948,
    949,
    950,
    951,
    952,
    953,
    954,
    955,
    956,
    957,
    958,
    959,
    960,
    961
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)\n",
  "violation-line": 946,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    936,
    937,
    938,
    939,
    940,
    941,
    942,
    943,
    944,
    945,
    946,
    947,
    948,
    949,
    950,
    951,
    952,
    953,
    954,
    955,
    956
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    941,
    942,
    943,
    944,
    945,
    946,
    947,
    948,
    949,
    950,
    951,
    952,
    953,
    954,
    955,
    956,
    957,
    958,
    959,
    960,
    961
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to nanoseconds\n *\n * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)\n",
  "violation-line": 946,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    950,
    951,
    952,
    953,
    954,
    955,
    956,
    957,
    958,
    959,
    960,
    961,
    962,
    963,
    964,
    965,
    966,
    967,
    968,
    969,
    970
  ],
  "before-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    955,
    956,
    957,
    958,
    959,
    960,
    961,
    962,
    963,
    964,
    965,
    966,
    967,
    968,
    969,
    970,
    971,
    972,
    973,
    974,
    975
  ],
  "after-code": " * Converts time values in hardware cycles to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ns, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)\n",
  "violation-line": 960,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    964,
    965,
    966,
    967,
    968,
    969,
    970,
    971,
    972,
    973,
    974,
    975,
    976,
    977,
    978,
    979,
    980,
    981,
    982,
    983,
    984
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    969,
    970,
    971,
    972,
    973,
    974,
    975,
    976,
    977,
    978,
    979,
    980,
    981,
    982,
    983,
    984,
    985,
    986,
    987,
    988,
    989
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)\n",
  "violation-line": 974,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    964,
    965,
    966,
    967,
    968,
    969,
    970,
    971,
    972,
    973,
    974,
    975,
    976,
    977,
    978,
    979,
    980,
    981,
    982,
    983,
    984
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    969,
    970,
    971,
    972,
    973,
    974,
    975,
    976,
    977,
    978,
    979,
    980,
    981,
    982,
    983,
    984,
    985,
    986,
    987,
    988,
    989
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)\n",
  "violation-line": 974,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    978,
    979,
    980,
    981,
    982,
    983,
    984,
    985,
    986,
    987,
    988,
    989,
    990,
    991,
    992,
    993,
    994,
    995,
    996,
    997,
    998
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    983,
    984,
    985,
    986,
    987,
    988,
    989,
    990,
    991,
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_near32(uint32_t t)\n",
  "violation-line": 988,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013,
    1014,
    1015,
    1016,
    1017
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_near64(uint64_t t)\n",
  "violation-line": 1002,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013,
    1014,
    1015,
    1016,
    1017
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_near64(uint64_t t)\n",
  "violation-line": 1002,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013,
    1014,
    1015,
    1016,
    1017,
    1018,
    1019,
    1020,
    1021,
    1022,
    1023,
    1024,
    1025,
    1026
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1011,
    1012,
    1013,
    1014,
    1015,
    1016,
    1017,
    1018,
    1019,
    1020,
    1021,
    1022,
    1023,
    1024,
    1025,
    1026,
    1027,
    1028,
    1029,
    1030,
    1031
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)\n",
  "violation-line": 1016,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1020,
    1021,
    1022,
    1023,
    1024,
    1025,
    1026,
    1027,
    1028,
    1029,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1025,
    1026,
    1027,
    1028,
    1029,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)\n",
  "violation-line": 1030,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1020,
    1021,
    1022,
    1023,
    1024,
    1025,
    1026,
    1027,
    1028,
    1029,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1025,
    1026,
    1027,
    1028,
    1029,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert hardware cycles to ticks\n *\n * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)\n",
  "violation-line": 1030,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054
  ],
  "before-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057,
    1058,
    1059
  ],
  "after-code": " * Converts time values in hardware cycles to ticks.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_cyc, Z_HZ_ticks, Z_CCYC, false, true, false);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)\n",
  "violation-line": 1044,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057,
    1058,
    1059,
    1060,
    1061,
    1062,
    1063,
    1064,
    1065,
    1066,
    1067,
    1068
  ],
  "before-code": " * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1053,
    1054,
    1055,
    1056,
    1057,
    1058,
    1059,
    1060,
    1061,
    1062,
    1063,
    1064,
    1065,
    1066,
    1067,
    1068,
    1069,
    1070,
    1071,
    1072,
    1073
  ],
  "after-code": " * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_floor64(uint64_t t)\n",
  "violation-line": 1058,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1076,
    1077,
    1078,
    1079,
    1080,
    1081,
    1082,
    1083,
    1084,
    1085,
    1086,
    1087,
    1088,
    1089,
    1090,
    1091,
    1092,
    1093,
    1094,
    1095,
    1096
  ],
  "before-code": " * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, true);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1081,
    1082,
    1083,
    1084,
    1085,
    1086,
    1087,
    1088,
    1089,
    1090,
    1091,
    1092,
    1093,
    1094,
    1095,
    1096,
    1097,
    1098,
    1099,
    1100,
    1101
  ],
  "after-code": " * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, true);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_near64(uint64_t t)\n",
  "violation-line": 1086,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1104,
    1105,
    1106,
    1107,
    1108,
    1109,
    1110,
    1111,
    1112,
    1113,
    1114,
    1115,
    1116,
    1117,
    1118,
    1119,
    1120,
    1121,
    1122,
    1123,
    1124
  ],
  "before-code": " * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, true, false);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1109,
    1110,
    1111,
    1112,
    1113,
    1114,
    1115,
    1116,
    1117,
    1118,
    1119,
    1120,
    1121,
    1122,
    1123,
    1124,
    1125,
    1126,
    1127,
    1128,
    1129
  ],
  "after-code": " * Converts time values in ticks to milliseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, true, false);\n}\n\n/** @brief Convert ticks to milliseconds\n *\n * Converts time values in ticks to milliseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_ceil64(uint64_t t)\n",
  "violation-line": 1114,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1132,
    1133,
    1134,
    1135,
    1136,
    1137,
    1138,
    1139,
    1140,
    1141,
    1142,
    1143,
    1144,
    1145,
    1146,
    1147,
    1148,
    1149,
    1150,
    1151,
    1152
  ],
  "before-code": " * Converts time values in ticks to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_us_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_us, true, true, false, false);\n}\n\n/** @brief Convert ticks to microseconds\n *\n * Converts time values in ticks to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_us_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1137,
    1138,
    1139,
    1140,
    1141,
    1142,
    1143,
    1144,
    1145,
    1146,
    1147,
    1148,
    1149,
    1150,
    1151,
    1152,
    1153,
    1154,
    1155,
    1156,
    1157
  ],
  "after-code": " * Converts time values in ticks to microseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_us_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_us, true, true, false, false);\n}\n\n/** @brief Convert ticks to microseconds\n *\n * Converts time values in ticks to microseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_us_floor64(uint64_t t)\n",
  "violation-line": 1142,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1160,
    1161,
    1162,
    1163,
    1164,
    1165,
    1166,
    1167,
    1168,
    1169,
    1170,
    1171,
    1172,
    1173,
    1174,
    1175,
    1176,
    1177,
    1178,
    1179,
    1180
  ],
  "before-code": " * Converts time values in ticks to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_us_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_us, true, true, false, true);\n}\n\n/** @brief Convert ticks to microseconds\n *\n * Converts time values in ticks to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_us_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1165,
    1166,
    1167,
    1168,
    1169,
    1170,
    1171,
    1172,
    1173,
    1174,
    1175,
    1176,
    1177,
    1178,
    1179,
    1180,
    1181,
    1182,
    1183,
    1184,
    1185
  ],
  "after-code": " * Converts time values in ticks to microseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_us_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_us, true, true, false, true);\n}\n\n/** @brief Convert ticks to microseconds\n *\n * Converts time values in ticks to microseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_us_near64(uint64_t t)\n",
  "violation-line": 1170,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1188,
    1189,
    1190,
    1191,
    1192,
    1193,
    1194,
    1195,
    1196,
    1197,
    1198,
    1199,
    1200,
    1201,
    1202,
    1203,
    1204,
    1205,
    1206,
    1207,
    1208
  ],
  "before-code": " * Converts time values in ticks to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_us_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_us, true, true, true, false);\n}\n\n/** @brief Convert ticks to microseconds\n *\n * Converts time values in ticks to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_us_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1193,
    1194,
    1195,
    1196,
    1197,
    1198,
    1199,
    1200,
    1201,
    1202,
    1203,
    1204,
    1205,
    1206,
    1207,
    1208,
    1209,
    1210,
    1211,
    1212,
    1213
  ],
  "after-code": " * Converts time values in ticks to microseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_us_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_us, true, true, true, false);\n}\n\n/** @brief Convert ticks to microseconds\n *\n * Converts time values in ticks to microseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_us_ceil64(uint64_t t)\n",
  "violation-line": 1198,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1216,
    1217,
    1218,
    1219,
    1220,
    1221,
    1222,
    1223,
    1224,
    1225,
    1226,
    1227,
    1228,
    1229,
    1230,
    1231,
    1232,
    1233,
    1234,
    1235,
    1236
  ],
  "before-code": " * Converts time values in ticks to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ns_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_ns, true, true, false, false);\n}\n\n/** @brief Convert ticks to nanoseconds\n *\n * Converts time values in ticks to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ns_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1221,
    1222,
    1223,
    1224,
    1225,
    1226,
    1227,
    1228,
    1229,
    1230,
    1231,
    1232,
    1233,
    1234,
    1235,
    1236,
    1237,
    1238,
    1239,
    1240,
    1241
  ],
  "after-code": " * Converts time values in ticks to nanoseconds.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ns_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_ns, true, true, false, false);\n}\n\n/** @brief Convert ticks to nanoseconds\n *\n * Converts time values in ticks to nanoseconds.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ns_floor64(uint64_t t)\n",
  "violation-line": 1226,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1244,
    1245,
    1246,
    1247,
    1248,
    1249,
    1250,
    1251,
    1252,
    1253,
    1254,
    1255,
    1256,
    1257,
    1258,
    1259,
    1260,
    1261,
    1262,
    1263,
    1264
  ],
  "before-code": " * Converts time values in ticks to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ns_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_ns, true, true, false, true);\n}\n\n/** @brief Convert ticks to nanoseconds\n *\n * Converts time values in ticks to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ns_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1249,
    1250,
    1251,
    1252,
    1253,
    1254,
    1255,
    1256,
    1257,
    1258,
    1259,
    1260,
    1261,
    1262,
    1263,
    1264,
    1265,
    1266,
    1267,
    1268,
    1269
  ],
  "after-code": " * Converts time values in ticks to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ns_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_ns, true, true, false, true);\n}\n\n/** @brief Convert ticks to nanoseconds\n *\n * Converts time values in ticks to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ns_near64(uint64_t t)\n",
  "violation-line": 1254,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1272,
    1273,
    1274,
    1275,
    1276,
    1277,
    1278,
    1279,
    1280,
    1281,
    1282,
    1283,
    1284,
    1285,
    1286,
    1287,
    1288,
    1289,
    1290,
    1291,
    1292
  ],
  "before-code": " * Converts time values in ticks to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ns_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_ns, true, true, true, false);\n}\n\n/** @brief Convert ticks to nanoseconds\n *\n * Converts time values in ticks to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ns_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1277,
    1278,
    1279,
    1280,
    1281,
    1282,
    1283,
    1284,
    1285,
    1286,
    1287,
    1288,
    1289,
    1290,
    1291,
    1292,
    1293,
    1294,
    1295,
    1296,
    1297
  ],
  "after-code": " * Converts time values in ticks to nanoseconds.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_ns_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_ns, true, true, true, false);\n}\n\n/** @brief Convert ticks to nanoseconds\n *\n * Converts time values in ticks to nanoseconds.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_ns_ceil64(uint64_t t)\n",
  "violation-line": 1282,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1300,
    1301,
    1302,
    1303,
    1304,
    1305,
    1306,
    1307,
    1308,
    1309,
    1310,
    1311,
    1312,
    1313,
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1305,
    1306,
    1307,
    1308,
    1309,
    1310,
    1311,
    1312,
    1313,
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320,
    1321,
    1322,
    1323,
    1324,
    1325
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 1310,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1300,
    1301,
    1302,
    1303,
    1304,
    1305,
    1306,
    1307,
    1308,
    1309,
    1310,
    1311,
    1312,
    1313,
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1305,
    1306,
    1307,
    1308,
    1309,
    1310,
    1311,
    1312,
    1313,
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320,
    1321,
    1322,
    1323,
    1324,
    1325
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_floor32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)\n",
  "violation-line": 1310,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1314,
    1315,
    1316,
    1317,
    1318,
    1319,
    1320,
    1321,
    1322,
    1323,
    1324,
    1325,
    1326,
    1327,
    1328,
    1329,
    1330,
    1331,
    1332,
    1333,
    1334
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_near32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1319,
    1320,
    1321,
    1322,
    1323,
    1324,
    1325,
    1326,
    1327,
    1328,
    1329,
    1330,
    1331,
    1332,
    1333,
    1334,
    1335,
    1336,
    1337,
    1338,
    1339
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Truncates to the next lowest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, false, false, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_near32(uint32_t t)\n",
  "violation-line": 1324,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1328,
    1329,
    1330,
    1331,
    1332,
    1333,
    1334,
    1335,
    1336,
    1337,
    1338,
    1339,
    1340,
    1341,
    1342,
    1343,
    1344,
    1345,
    1346,
    1347,
    1348
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1333,
    1334,
    1335,
    1336,
    1337,
    1338,
    1339,
    1340,
    1341,
    1342,
    1343,
    1344,
    1345,
    1346,
    1347,
    1348,
    1349,
    1350,
    1351,
    1352,
    1353
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_near64(uint64_t t)\n",
  "violation-line": 1338,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1328,
    1329,
    1330,
    1331,
    1332,
    1333,
    1334,
    1335,
    1336,
    1337,
    1338,
    1339,
    1340,
    1341,
    1342,
    1343,
    1344,
    1345,
    1346,
    1347,
    1348
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_near64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1333,
    1334,
    1335,
    1336,
    1337,
    1338,
    1339,
    1340,
    1341,
    1342,
    1343,
    1344,
    1345,
    1346,
    1347,
    1348,
    1349,
    1350,
    1351,
    1352,
    1353
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_near32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, false, true);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_near64(uint64_t t)\n",
  "violation-line": 1338,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1342,
    1343,
    1344,
    1345,
    1346,
    1347,
    1348,
    1349,
    1350,
    1351,
    1352,
    1353,
    1354,
    1355,
    1356,
    1357,
    1358,
    1359,
    1360,
    1361,
    1362
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1347,
    1348,
    1349,
    1350,
    1351,
    1352,
    1353,
    1354,
    1355,
    1356,
    1357,
    1358,
    1359,
    1360,
    1361,
    1362,
    1363,
    1364,
    1365,
    1366,
    1367
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds to the nearest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_near64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, false, false, true);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)\n",
  "violation-line": 1352,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1356,
    1357,
    1358,
    1359,
    1360,
    1361,
    1362,
    1363,
    1364,
    1365,
    1366,
    1367,
    1368,
    1369,
    1370,
    1371,
    1372,
    1373,
    1374,
    1375,
    1376
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1361,
    1362,
    1363,
    1364,
    1365,
    1366,
    1367,
    1368,
    1369,
    1370,
    1371,
    1372,
    1373,
    1374,
    1375,
    1376,
    1377,
    1378,
    1379,
    1380,
    1381
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 1366,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1356,
    1357,
    1358,
    1359,
    1360,
    1361,
    1362,
    1363,
    1364,
    1365,
    1366,
    1367,
    1368,
    1369,
    1370,
    1371,
    1372,
    1373,
    1374,
    1375,
    1376
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1361,
    1362,
    1363,
    1364,
    1365,
    1366,
    1367,
    1368,
    1369,
    1370,
    1371,
    1372,
    1373,
    1374,
    1375,
    1376,
    1377,
    1378,
    1379,
    1380,
    1381
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 32 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn (uint32_t)z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, true, true, false);\n}\n\n/** @brief Convert ticks to hardware cycles\n *\n * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)\n",
  "violation-line": 1366,
  "violation-message": "The unsigned long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/include/sys/time_units.h",
  "before-lines": [
    1370,
    1371,
    1372,
    1373,
    1374,
    1375,
    1376,
    1377,
    1378,
    1379,
    1380,
    1381,
    1382,
    1383,
    1384,
    1385,
    1386,
    1387,
    1388,
    1389,
    1390
  ],
  "before-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n#if defined(CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME)\n#include <syscalls/time_units.h>\n#endif\n\n#undef TIME_CONSTEXPR\n\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/include/sys/time_units.h",
  "after-lines": [
    1375,
    1376,
    1377,
    1378,
    1379,
    1380,
    1381,
    1382,
    1383,
    1384,
    1385,
    1386,
    1387,
    1388,
    1389,
    1390,
    1391,
    1392,
    1393,
    1394,
    1395
  ],
  "after-code": " * Converts time values in ticks to hardware cycles.\n * Computes result in 64 bit precision.\n * Rounds up to the next highest output unit.\n *\n * @return The converted time value\n */\nstatic TIME_CONSTEXPR inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)\n{\n\t/* Generated.  Do not edit.  See above. */\n\treturn z_tmcvt(t, Z_HZ_ticks, Z_HZ_cyc, Z_CCYC, false, true, false);\n}\n\n#if defined(CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME)\n#include <syscalls/time_units.h>\n#endif\n\n#undef TIME_CONSTEXPR\n\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif\n",
  "violation-line": 1380,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/device.c",
  "before-lines": [
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95
  ],
  "before-code": "\t\t\t * failed, record the error condition.\n\t\t\t */\n\t\t\tif (rc != 0) {\n\t\t\t\tif (rc < 0) {\n\t\t\t\t\trc = -rc;\n\t\t\t\t}\n\t\t\t\tif (rc > UINT8_MAX) {\n\t\t\t\t\trc = UINT8_MAX;\n\t\t\t\t}\n\t\t\t\tdev->state->init_res = rc;\n\t\t\t}\n\t\t\tdev->state->initialized = true;\n\t\t}\n\t}\n}\n\nconst struct device *z_impl_device_get_binding(const char *name)\n{\n\tconst struct device *dev;\n\n\t/* A null string identifies no device.  So does an empty\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/device.c",
  "after-lines": [
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95
  ],
  "after-code": "\t\t\t * failed, record the error condition.\n\t\t\t */\n\t\t\tif (rc != 0) {\n\t\t\t\tif (rc < 0) {\n\t\t\t\t\trc = -rc;\n\t\t\t\t}\n\t\t\t\tif (rc > UINT8_MAX) {\n\t\t\t\t\trc = UINT8_MAX;\n\t\t\t\t}\n\t\t\t\tdev->state->init_res = (uint8_t)rc;\n\t\t\t}\n\t\t\tdev->state->initialized = true;\n\t\t}\n\t}\n}\n\nconst struct device *z_impl_device_get_binding(const char *name)\n{\n\tconst struct device *dev;\n\n\t/* A null string identifies no device.  So does an empty\n",
  "violation-line": 85,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/device.c",
  "before-lines": [
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159
  ],
  "before-code": "\n\treturn z_impl_device_usable_check(dev);\n}\n#include <syscalls/device_usable_check_mrsh.c>\n#endif /* CONFIG_USERSPACE */\n\nsize_t z_device_get_all_static(struct device const **devices)\n{\n\t*devices = __device_start;\n\treturn __device_end - __device_start;\n}\n\nbool z_device_ready(const struct device *dev)\n{\n\t/*\n\t * if an invalid device pointer is passed as argument, this call\n\t * reports the `device` as not ready for usage.\n\t */\n\tif (dev == NULL) {\n\t\treturn false;\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/device.c",
  "after-lines": [
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159
  ],
  "after-code": "\n\treturn z_impl_device_usable_check(dev);\n}\n#include <syscalls/device_usable_check_mrsh.c>\n#endif /* CONFIG_USERSPACE */\n\nsize_t z_device_get_all_static(struct device const **devices)\n{\n\t*devices = __device_start;\n\treturn (size_t)(__device_end - __device_start);\n}\n\nbool z_device_ready(const struct device *dev)\n{\n\t/*\n\t * if an invalid device pointer is passed as argument, this call\n\t * reports the `device` as not ready for usage.\n\t */\n\tif (dev == NULL) {\n\t\treturn false;\n\t}\n",
  "violation-line": 149,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/device.c",
  "before-lines": [
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184
  ],
  "before-code": "\t\tdevice_handle_t dh = handles[i];\n\t\tconst struct device *rdev = device_from_handle(dh);\n\t\tint rc = visitor_cb(rdev, context);\n\n\t\tif (rc < 0) {\n\t\t\treturn rc;\n\t\t}\n\t}\n\n\treturn handle_count;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/device.c",
  "after-lines": [
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184
  ],
  "after-code": "\t\tdevice_handle_t dh = handles[i];\n\t\tconst struct device *rdev = device_from_handle(dh);\n\t\tint rc = visitor_cb(rdev, context);\n\n\t\tif (rc < 0) {\n\t\t\treturn rc;\n\t\t}\n\t}\n\n\treturn (int)handle_count;\n}\n",
  "violation-line": 184,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/fatal.c",
  "before-lines": [
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73
  ],
  "before-code": "\t\tthread_name = \"unknown\";\n\t}\n\n\treturn thread_name;\n}\n\nstatic const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/fatal.c",
  "after-lines": [
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73
  ],
  "after-code": "\t\tthread_name = \"unknown\";\n\t}\n\n\treturn thread_name;\n}\n\nstatic const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase (unsigned int)K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase (unsigned int)K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase (unsigned int)K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase (unsigned int)K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase (unsigned int)K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n",
  "violation-line": 63,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/fatal.c",
  "before-lines": [
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75
  ],
  "before-code": "\n\treturn thread_name;\n}\n\nstatic const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/fatal.c",
  "after-lines": [
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75
  ],
  "after-code": "\n\treturn thread_name;\n}\n\nstatic const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase (unsigned int)K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase (unsigned int)K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase (unsigned int)K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase (unsigned int)K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase (unsigned int)K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n",
  "violation-line": 65,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/fatal.c",
  "before-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77
  ],
  "before-code": "}\n\nstatic const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n\n/* LCOV_EXCL_START */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/fatal.c",
  "after-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77
  ],
  "after-code": "}\n\nstatic const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase (unsigned int)K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase (unsigned int)K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase (unsigned int)K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase (unsigned int)K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase (unsigned int)K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n\n/* LCOV_EXCL_START */\n",
  "violation-line": 67,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/fatal.c",
  "before-lines": [
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79
  ],
  "before-code": "static const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n\n/* LCOV_EXCL_START */\nFUNC_NORETURN void k_fatal_halt(unsigned int reason)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/fatal.c",
  "after-lines": [
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79
  ],
  "after-code": "static const char *reason_to_str(unsigned int reason)\n{\n\tswitch (reason) {\n\tcase (unsigned int)K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase (unsigned int)K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase (unsigned int)K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase (unsigned int)K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase (unsigned int)K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n\n/* LCOV_EXCL_START */\nFUNC_NORETURN void k_fatal_halt(unsigned int reason)\n{\n",
  "violation-line": 69,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/fatal.c",
  "before-lines": [
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81
  ],
  "before-code": "\tswitch (reason) {\n\tcase K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n\n/* LCOV_EXCL_START */\nFUNC_NORETURN void k_fatal_halt(unsigned int reason)\n{\n\tarch_system_halt(reason);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/fatal.c",
  "after-lines": [
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81
  ],
  "after-code": "\tswitch (reason) {\n\tcase (unsigned int)K_ERR_CPU_EXCEPTION:\n\t\treturn \"CPU exception\";\n\tcase (unsigned int)K_ERR_SPURIOUS_IRQ:\n\t\treturn \"Unhandled interrupt\";\n\tcase (unsigned int)K_ERR_STACK_CHK_FAIL:\n\t\treturn \"Stack overflow\";\n\tcase (unsigned int)K_ERR_KERNEL_OOPS:\n\t\treturn \"Kernel oops\";\n\tcase (unsigned int)K_ERR_KERNEL_PANIC:\n\t\treturn \"Kernel panic\";\n\tdefault:\n\t\treturn \"Unknown error\";\n\t}\n}\n\n/* LCOV_EXCL_START */\nFUNC_NORETURN void k_fatal_halt(unsigned int reason)\n{\n\tarch_system_halt(reason);\n}\n",
  "violation-line": 71,
  "violation-message": "The enum k_fatal_error_reason type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/futex.c",
  "before-lines": [
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "before-code": "\t\tif (thread != NULL) {\n\t\t\twoken++;\n\t\t\tarch_thread_return_value_set(thread, 0);\n\t\t\tz_ready_thread(thread);\n\t\t}\n\t} while (thread && wake_all);\n\n\tz_reschedule(&futex_data->lock, key);\n\n\treturn woken;\n}\n\nstatic inline int z_vrfy_k_futex_wake(struct k_futex *futex, bool wake_all)\n{\n\tif (Z_SYSCALL_MEMORY_WRITE(futex, sizeof(struct k_futex)) != 0) {\n\t\treturn -EACCES;\n\t}\n\n\treturn z_impl_k_futex_wake(futex, wake_all);\n}\n#include <syscalls/k_futex_wake_mrsh.c>\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/futex.c",
  "after-lines": [
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "after-code": "\t\tif (thread != NULL) {\n\t\t\twoken++;\n\t\t\tarch_thread_return_value_set(thread, 0);\n\t\t\tz_ready_thread(thread);\n\t\t}\n\t} while (thread != NULL && wake_all);\n\n\tz_reschedule(&futex_data->lock, key);\n\n\treturn woken;\n}\n\nstatic inline int z_vrfy_k_futex_wake(struct k_futex *futex, bool wake_all)\n{\n\tif (Z_SYSCALL_MEMORY_WRITE(futex, sizeof(struct k_futex))) {\n\t\treturn -EACCES;\n\t}\n\n\treturn z_impl_k_futex_wake(futex, wake_all);\n}\n#include <syscalls/k_futex_wake_mrsh.c>\n",
  "violation-line": 52,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/include/ksched.h",
  "before-lines": [
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160
  ],
  "before-code": "static inline void z_mark_thread_as_suspended(struct k_thread *thread)\n{\n\tthread->base.thread_state |= _THREAD_SUSPENDED;\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_suspend, thread);\n}\n\nstatic inline void z_mark_thread_as_not_suspended(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_SUSPENDED;\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);\n}\n\nstatic inline void z_mark_thread_as_started(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_PRESTART;\n}\n\nstatic inline void z_mark_thread_as_pending(struct k_thread *thread)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/include/ksched.h",
  "after-lines": [
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160
  ],
  "after-code": "static inline void z_mark_thread_as_suspended(struct k_thread *thread)\n{\n\tthread->base.thread_state |= _THREAD_SUSPENDED;\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_suspend, thread);\n}\n\nstatic inline void z_mark_thread_as_not_suspended(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_SUSPENDED;\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);\n}\n\nstatic inline void z_mark_thread_as_started(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_PRESTART;\n}\n\nstatic inline void z_mark_thread_as_pending(struct k_thread *thread)\n{\n",
  "violation-line": 150,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/include/ksched.h",
  "before-lines": [
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167
  ],
  "before-code": "static inline void z_mark_thread_as_not_suspended(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_SUSPENDED;\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);\n}\n\nstatic inline void z_mark_thread_as_started(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_PRESTART;\n}\n\nstatic inline void z_mark_thread_as_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state |= _THREAD_PENDING;\n}\n\nstatic inline void z_mark_thread_as_not_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_PENDING;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/include/ksched.h",
  "after-lines": [
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167
  ],
  "after-code": "static inline void z_mark_thread_as_not_suspended(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_SUSPENDED;\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);\n}\n\nstatic inline void z_mark_thread_as_started(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_PRESTART;\n}\n\nstatic inline void z_mark_thread_as_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state |= _THREAD_PENDING;\n}\n\nstatic inline void z_mark_thread_as_not_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_PENDING;\n}\n",
  "violation-line": 157,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/include/ksched.h",
  "before-lines": [
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177
  ],
  "before-code": "}\n\nstatic inline void z_mark_thread_as_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state |= _THREAD_PENDING;\n}\n\nstatic inline void z_mark_thread_as_not_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_PENDING;\n}\n\nstatic inline void z_set_thread_states(struct k_thread *thread, uint32_t states)\n{\n\tthread->base.thread_state |= states;\n}\n\nstatic inline void z_reset_thread_states(struct k_thread *thread,\n\t\t\t\t\tuint32_t states)\n{\n\tthread->base.thread_state &= ~states;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/include/ksched.h",
  "after-lines": [
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177
  ],
  "after-code": "}\n\nstatic inline void z_mark_thread_as_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state |= _THREAD_PENDING;\n}\n\nstatic inline void z_mark_thread_as_not_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_PENDING;\n}\n\nstatic inline void z_set_thread_states(struct k_thread *thread, uint8_t states)\n{\n\tthread->base.thread_state |= states;\n}\n\nstatic inline void z_reset_thread_states(struct k_thread *thread,\n\t\t\t\t\tuint8_t states)\n{\n\tthread->base.thread_state &= (uint8_t)~states;\n",
  "violation-line": 167,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/include/ksched.h",
  "before-lines": [
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182
  ],
  "before-code": "}\n\nstatic inline void z_mark_thread_as_not_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_PENDING;\n}\n\nstatic inline void z_set_thread_states(struct k_thread *thread, uint32_t states)\n{\n\tthread->base.thread_state |= states;\n}\n\nstatic inline void z_reset_thread_states(struct k_thread *thread,\n\t\t\t\t\tuint32_t states)\n{\n\tthread->base.thread_state &= ~states;\n}\n\nstatic inline bool z_is_under_prio_ceiling(int prio)\n{\n\treturn prio >= CONFIG_PRIORITY_CEILING;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/include/ksched.h",
  "after-lines": [
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182
  ],
  "after-code": "}\n\nstatic inline void z_mark_thread_as_not_pending(struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_PENDING;\n}\n\nstatic inline void z_set_thread_states(struct k_thread *thread, uint8_t states)\n{\n\tthread->base.thread_state |= states;\n}\n\nstatic inline void z_reset_thread_states(struct k_thread *thread,\n\t\t\t\t\tuint8_t states)\n{\n\tthread->base.thread_state &= (uint8_t)~states;\n}\n\nstatic inline bool z_is_under_prio_ceiling(int prio)\n{\n\treturn prio >= CONFIG_PRIORITY_CEILING;\n",
  "violation-line": 172,
  "violation-message": "The unsigned int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/include/ksched.h",
  "before-lines": [
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188
  ],
  "before-code": "\nstatic inline void z_set_thread_states(struct k_thread *thread, uint32_t states)\n{\n\tthread->base.thread_state |= states;\n}\n\nstatic inline void z_reset_thread_states(struct k_thread *thread,\n\t\t\t\t\tuint32_t states)\n{\n\tthread->base.thread_state &= ~states;\n}\n\nstatic inline bool z_is_under_prio_ceiling(int prio)\n{\n\treturn prio >= CONFIG_PRIORITY_CEILING;\n}\n\nstatic inline int z_get_new_prio_with_ceiling(int prio)\n{\n\treturn z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/include/ksched.h",
  "after-lines": [
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188
  ],
  "after-code": "\nstatic inline void z_set_thread_states(struct k_thread *thread, uint8_t states)\n{\n\tthread->base.thread_state |= states;\n}\n\nstatic inline void z_reset_thread_states(struct k_thread *thread,\n\t\t\t\t\tuint8_t states)\n{\n\tthread->base.thread_state &= (uint8_t)~states;\n}\n\nstatic inline bool z_is_under_prio_ceiling(int prio)\n{\n\treturn prio >= CONFIG_PRIORITY_CEILING;\n}\n\nstatic inline int z_get_new_prio_with_ceiling(int prio)\n{\n\treturn z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;\n}\n",
  "violation-line": 178,
  "violation-message": "The unsigned int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/include/kswap.h",
  "before-lines": [
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204
  ],
  "before-code": "}\n\n/* If !USE_SWITCH, then spinlocks are guaranteed degenerate as we\n * can't be in SMP.  The k_spin_release() call is just for validation\n * handling.\n */\nstatic ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)\n{\n\tk_spin_release(lock);\n\treturn z_swap_irqlock(key.key);\n}\n\nstatic inline void z_swap_unlocked(void)\n{\n\t(void) z_swap_irqlock(arch_irq_lock());\n}\n\n#endif /* !CONFIG_USE_SWITCH */\n\n/**\n * Set up a \"dummy\" thread, used at early initialization to launch the\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/include/kswap.h",
  "after-lines": [
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204
  ],
  "after-code": "}\n\n/* If !USE_SWITCH, then spinlocks are guaranteed degenerate as we\n * can't be in SMP.  The k_spin_release() call is just for validation\n * handling.\n */\nstatic ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)\n{\n\tk_spin_release(lock);\n\treturn z_swap_irqlock(key.key);\n}\n\nstatic inline void z_swap_unlocked(void)\n{\n\t(void) z_swap_irqlock(arch_irq_lock());\n}\n\n#endif /* !CONFIG_USE_SWITCH */\n\n/**\n * Set up a \"dummy\" thread, used at early initialization to launch the\n",
  "violation-line": 194,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/init.c",
  "before-lines": [
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99
  ],
  "before-code": " * @brief Clear BSS\n *\n * This routine clears the BSS region, so all bytes are 0.\n *\n * @return N/A\n */\n__boot_func\nvoid z_bss_zero(void)\n{\n\t(void)memset(__bss_start, 0, __bss_end - __bss_start);\n#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)\n\t(void)memset(&__ccm_bss_start, 0,\n\t\t     ((uint32_t) &__ccm_bss_end - (uint32_t) &__ccm_bss_start));\n#endif\n#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)\n\t(void)memset(&__dtcm_bss_start, 0,\n\t\t     ((uint32_t) &__dtcm_bss_end - (uint32_t) &__dtcm_bss_start));\n#endif\n#ifdef CONFIG_CODE_DATA_RELOCATION\n\textern void bss_zeroing_relocation(void);\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/init.c",
  "after-lines": [
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99
  ],
  "after-code": " * @brief Clear BSS\n *\n * This routine clears the BSS region, so all bytes are 0.\n *\n * @return N/A\n */\n__boot_func\nvoid z_bss_zero(void)\n{\n\t(void)memset(__bss_start, 0, (size_t)(__bss_end - __bss_start));\n#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)\n\t(void)memset(&__ccm_bss_start, 0,\n\t\t     ((uint32_t) &__ccm_bss_end - (uint32_t) &__ccm_bss_start));\n#endif\n#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)\n\t(void)memset(&__dtcm_bss_start, 0,\n\t\t     ((uint32_t) &__dtcm_bss_end - (uint32_t) &__dtcm_bss_start));\n#endif\n#ifdef CONFIG_CODE_DATA_RELOCATION\n\textern void bss_zeroing_relocation(void);\n\n",
  "violation-line": 89,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/init.c",
  "before-lines": [
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230
  ],
  "before-code": "#ifdef CONFIG_MMU\n\tz_mem_manage_boot_finish();\n#endif /* CONFIG_MMU */\n\n\textern void main(void);\n\n\tmain();\n\n\t/* Mark nonessenrial since main() has no more work to do */\n\tz_main_thread.base.user_options &= ~K_ESSENTIAL;\n\n#ifdef CONFIG_COVERAGE_DUMP\n\t/* Dump coverage data once the main() has exited. */\n\tgcov_coverage_dump();\n#endif\n} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */\n\n#if defined(CONFIG_MULTITHREADING)\n__boot_func\nstatic void init_idle_thread(int i)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/init.c",
  "after-lines": [
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230
  ],
  "after-code": "#ifdef CONFIG_MMU\n\tz_mem_manage_boot_finish();\n#endif /* CONFIG_MMU */\n\n\textern void main(void);\n\n\tmain();\n\n\t/* Mark nonessenrial since main() has no more work to do */\n\tz_main_thread.base.user_options &= (uint8_t)~K_ESSENTIAL;\n\n#ifdef CONFIG_COVERAGE_DUMP\n\t/* Dump coverage data once the main() has exited. */\n\tgcov_coverage_dump();\n#endif\n} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */\n\n#if defined(CONFIG_MULTITHREADING)\n__boot_func\nstatic void init_idle_thread(int i)\n{\n",
  "violation-line": 220,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/init.c",
  "before-lines": [
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312
  ],
  "before-code": "\t\t\t\t       NULL, NULL, NULL,\n\t\t\t\t       CONFIG_MAIN_THREAD_PRIORITY,\n\t\t\t\t       K_ESSENTIAL, \"main\");\n\tz_mark_thread_as_started(&z_main_thread);\n\tz_ready_thread(&z_main_thread);\n\n\tfor (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {\n\t\tinit_idle_thread(i);\n\t\t_kernel.cpus[i].idle_thread = &z_idle_threads[i];\n\t\t_kernel.cpus[i].id = i;\n\t\t_kernel.cpus[i].irq_stack =\n\t\t\t(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +\n\t\t\t K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));\n\t}\n\n\treturn stack_ptr;\n}\n\n__boot_func\nstatic FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/init.c",
  "after-lines": [
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312
  ],
  "after-code": "\t\t\t\t       NULL, NULL, NULL,\n\t\t\t\t       CONFIG_MAIN_THREAD_PRIORITY,\n\t\t\t\t       K_ESSENTIAL, \"main\");\n\tz_mark_thread_as_started(&z_main_thread);\n\tz_ready_thread(&z_main_thread);\n\n\tfor (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {\n\t\tinit_idle_thread(i);\n\t\t_kernel.cpus[i].idle_thread = &z_idle_threads[i];\n\t\t_kernel.cpus[i].id = (uint8_t)i;\n\t\t_kernel.cpus[i].irq_stack =\n\t\t\t(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +\n\t\t\t K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));\n\t}\n\n\treturn stack_ptr;\n}\n\n__boot_func\nstatic FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)\n{\n",
  "violation-line": 302,
  "violation-message": "The int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/kheap.c",
  "before-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77
  ],
  "before-code": "/* Need to wait for paging mechanism to be initialized before\n * heaps that are not in pinned sections can be initialized.\n */\nSYS_INIT(statics_init, POST_KERNEL, 0);\n#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */\n\nvoid *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,\n\t\t\tk_timeout_t timeout)\n{\n\tint64_t now, end = sys_clock_timeout_end_calc(timeout);\n\tvoid *ret = NULL;\n\tk_spinlock_key_t key = k_spin_lock(&h->lock);\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);\n\n\t__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), \"\");\n\n\tbool blocked_alloc = false;\n\n\twhile (ret == NULL) {\n\t\tret = sys_heap_aligned_alloc(&h->heap, align, bytes);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/kheap.c",
  "after-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78
  ],
  "after-code": "/* Need to wait for paging mechanism to be initialized before\n * heaps that are not in pinned sections can be initialized.\n */\nSYS_INIT(statics_init, POST_KERNEL, 0);\n#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */\n\nvoid *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,\n\t\t\tk_timeout_t timeout)\n{\n\tint64_t now;\n\tint64_t end = (int64_t)sys_clock_timeout_end_calc(timeout);\n\tvoid *ret = NULL;\n\tk_spinlock_key_t key = k_spin_lock(&h->lock);\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);\n\n\t__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), \"\");\n\n\tbool blocked_alloc = false;\n\n\twhile (ret == NULL) {\n\t\tret = sys_heap_aligned_alloc(&h->heap, align, bytes);\n",
  "violation-line": 67,
  "violation-message": "The unsigned long long type has been assigned to the object of long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mem_domain.c",
  "before-lines": [
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181
  ],
  "before-code": "\t\tpart->start, part->size, domain);\n\n\tdomain->partitions[p_idx].start = part->start;\n\tdomain->partitions[p_idx].size = part->size;\n\tdomain->partitions[p_idx].attr = part->attr;\n\n\tdomain->num_partitions++;\n\n#ifdef CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API\n\tarch_mem_domain_partition_add(domain, p_idx);\n#endif\n\tk_spin_unlock(&z_mem_domain_lock, key);\n}\n\nvoid k_mem_domain_remove_partition(struct k_mem_domain *domain,\n\t\t\t\t  struct k_mem_partition *part)\n{\n\tint p_idx;\n\tk_spinlock_key_t key;\n\n\t__ASSERT_NO_MSG(domain != NULL);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mem_domain.c",
  "after-lines": [
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181
  ],
  "after-code": "\t\tpart->start, part->size, domain);\n\n\tdomain->partitions[p_idx].start = part->start;\n\tdomain->partitions[p_idx].size = part->size;\n\tdomain->partitions[p_idx].attr = part->attr;\n\n\tdomain->num_partitions++;\n\n#ifdef CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API\n\tarch_mem_domain_partition_add(domain, p_idx);\n#endif\n\tk_spin_unlock(&z_mem_domain_lock, key);\n}\n\nvoid k_mem_domain_remove_partition(struct k_mem_domain *domain,\n\t\t\t\t  struct k_mem_partition *part)\n{\n\tuint8_t p_idx;\n\tk_spinlock_key_t key;\n\n\t__ASSERT_NO_MSG(domain != NULL);\n",
  "violation-line": 171,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mem_domain.c",
  "before-lines": [
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211
  ],
  "before-code": "\t\t}\n\t}\n\n\t__ASSERT(p_idx < max_partitions, \"no matching partition found\");\n\n\tLOG_DBG(\"remove partition base %lx size %zu from domain %p\\n\",\n\t\tpart->start, part->size, domain);\n\n#ifdef CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API\n\tarch_mem_domain_partition_remove(domain, p_idx);\n#endif\n\n\t/* A zero-sized partition denotes it's a free partition */\n\tdomain->partitions[p_idx].size = 0U;\n\n\tdomain->num_partitions--;\n\n\tk_spin_unlock(&z_mem_domain_lock, key);\n}\n\nstatic void add_thread_locked(struct k_mem_domain *domain,\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mem_domain.c",
  "after-lines": [
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211
  ],
  "after-code": "\t\t}\n\t}\n\n\t__ASSERT(p_idx < max_partitions, \"no matching partition found\");\n\n\tLOG_DBG(\"remove partition base %lx size %zu from domain %p\\n\",\n\t\tpart->start, part->size, domain);\n\n#ifdef CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API\n\tarch_mem_domain_partition_remove(domain, p_idx);\n#endif\n\n\t/* A zero-sized partition denotes it's a free partition */\n\tdomain->partitions[p_idx].size = 0U;\n\n\tdomain->num_partitions--;\n\n\tk_spin_unlock(&z_mem_domain_lock, key);\n}\n\nstatic void add_thread_locked(struct k_mem_domain *domain,\n",
  "violation-line": 201,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mem_domain.c",
  "before-lines": [
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284
  ],
  "before-code": "\t\tadd_thread_locked(domain, thread);\n\t}\n\tk_spin_unlock(&z_mem_domain_lock, key);\n}\n\nstatic int init_mem_domain_module(const struct device *arg)\n{\n\tARG_UNUSED(arg);\n\n\tmax_partitions = arch_mem_domain_max_partitions_get();\n\t/*\n\t * max_partitions must be less than or equal to\n\t * CONFIG_MAX_DOMAIN_PARTITIONS, or would encounter array index\n\t * out of bounds error.\n\t */\n\t__ASSERT(max_partitions <= CONFIG_MAX_DOMAIN_PARTITIONS, \"\");\n\n\tk_mem_domain_init(&k_mem_domain_default, 0, NULL);\n#ifdef Z_LIBC_PARTITION_EXISTS\n\tk_mem_domain_add_partition(&k_mem_domain_default, &z_libc_partition);\n#endif /* Z_LIBC_PARTITION_EXISTS */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mem_domain.c",
  "after-lines": [
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284
  ],
  "after-code": "\t\tadd_thread_locked(domain, thread);\n\t}\n\tk_spin_unlock(&z_mem_domain_lock, key);\n}\n\nstatic int init_mem_domain_module(const struct device *arg)\n{\n\tARG_UNUSED(arg);\n\n\tmax_partitions = (uint8_t)arch_mem_domain_max_partitions_get();\n\t/*\n\t * max_partitions must be less than or equal to\n\t * CONFIG_MAX_DOMAIN_PARTITIONS, or would encounter array index\n\t * out of bounds error.\n\t */\n\t__ASSERT(max_partitions <= CONFIG_MAX_DOMAIN_PARTITIONS, \"\");\n\n\tk_mem_domain_init(&k_mem_domain_default, 0, NULL);\n#ifdef Z_LIBC_PARTITION_EXISTS\n\tk_mem_domain_add_partition(&k_mem_domain_default, &z_libc_partition);\n#endif /* Z_LIBC_PARTITION_EXISTS */\n",
  "violation-line": 274,
  "violation-message": "The int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mmu.c",
  "before-lines": [
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246
  ],
  "before-code": "}\n\nstatic void *virt_region_alloc(size_t size)\n{\n\tuintptr_t dest_addr;\n\tsize_t offset;\n\tsize_t num_bits;\n\tint ret;\n\n\tif (unlikely(!virt_region_inited)) {\n\t\tvirt_region_init();\n\t}\n\n\tnum_bits = size / CONFIG_MMU_PAGE_SIZE;\n\tret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);\n\tif (ret != 0) {\n\t\tLOG_ERR(\"insufficient virtual address space (requested %zu)\",\n\t\t\tsize);\n\t\treturn NULL;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mmu.c",
  "after-lines": [
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246
  ],
  "after-code": "}\n\nstatic void *virt_region_alloc(size_t size)\n{\n\tuintptr_t dest_addr;\n\tsize_t offset;\n\tsize_t num_bits;\n\tint ret;\n\n\tif (unlikely(!virt_region_inited)) {\n\t\tvirt_region_init();\n\t}\n\n\tnum_bits = size / CONFIG_MMU_PAGE_SIZE;\n\tret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);\n\tif (ret != 0) {\n\t\tLOG_ERR(\"insufficient virtual address space (requested %zu)\",\n\t\t\tsize);\n\t\treturn NULL;\n\t}\n\n",
  "violation-line": 236,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mmu.c",
  "before-lines": [
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278
  ],
  "before-code": "\n\treturn UINT_TO_POINTER(dest_addr);\n}\n\nstatic void virt_region_free(void *vaddr, size_t size)\n{\n\tsize_t offset, num_bits;\n\tuint8_t *vaddr_u8 = (uint8_t *)vaddr;\n\n\tif (unlikely(!virt_region_inited)) {\n\t\tvirt_region_init();\n\t}\n\n\t__ASSERT((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)\n\t\t && ((vaddr_u8 + size) < Z_VIRT_REGION_END_ADDR),\n\t\t \"invalid virtual address region %p (%zu)\", vaddr_u8, size);\n\tif (!((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)\n\t      && ((vaddr_u8 + size) < Z_VIRT_REGION_END_ADDR))) {\n\t\treturn;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mmu.c",
  "after-lines": [
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278
  ],
  "after-code": "\n\treturn UINT_TO_POINTER(dest_addr);\n}\n\nstatic void virt_region_free(void *vaddr, size_t size)\n{\n\tsize_t offset, num_bits;\n\tuint8_t *vaddr_u8 = (uint8_t *)vaddr;\n\n\tif (unlikely(!virt_region_inited)) {\n\t\tvirt_region_init();\n\t}\n\n\t__ASSERT((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)\n\t\t && ((vaddr_u8 + size) < Z_VIRT_REGION_END_ADDR),\n\t\t \"invalid virtual address region %p (%zu)\", vaddr_u8, size);\n\tif (!((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)\n\t      && ((vaddr_u8 + size) < Z_VIRT_REGION_END_ADDR))) {\n\t\treturn;\n\t}\n\n",
  "violation-line": 268,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/msg_q.c",
  "before-lines": [
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117
  ],
  "before-code": "\n\tCHECKIF(z_waitq_head(&msgq->wait_q) != NULL) {\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, cleanup, msgq, -EBUSY);\n\n\t\treturn -EBUSY;\n\t}\n\n\tif ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {\n\t\tk_free(msgq->buffer_start);\n\t\tmsgq->flags &= ~K_MSGQ_FLAG_ALLOC;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, cleanup, msgq, 0);\n\n\treturn 0;\n}\n\n\nint z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)\n{\n\t__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), \"\");\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/msg_q.c",
  "after-lines": [
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117
  ],
  "after-code": "\n\tCHECKIF(z_waitq_head(&msgq->wait_q) != NULL) {\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, cleanup, msgq, -EBUSY);\n\n\t\treturn -EBUSY;\n\t}\n\n\tif ((msgq->flags & K_MSGQ_FLAG_ALLOC) != 0U) {\n\t\tk_free(msgq->buffer_start);\n\t\tmsgq->flags &= (uint8_t)~K_MSGQ_FLAG_ALLOC;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, cleanup, msgq, 0);\n\n\treturn 0;\n}\n\n\nint z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)\n{\n\t__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), \"\");\n",
  "violation-line": 107,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mutex.c",
  "before-lines": [
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117
  ],
  "before-code": "\tk_spinlock_key_t key;\n\tbool resched = false;\n\n\t__ASSERT(!arch_is_in_isr(), \"mutexes cannot be used inside ISRs\");\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);\n\n\tkey = k_spin_lock(&lock);\n\n\tif (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {\n\n\t\tmutex->owner_orig_prio = (mutex->lock_count == 0U) ?\n\t\t\t\t\t_current->base.prio :\n\t\t\t\t\tmutex->owner_orig_prio;\n\n\t\tmutex->lock_count++;\n\t\tmutex->owner = _current;\n\n\t\tLOG_DBG(\"%p took mutex %p, count: %d, orig prio: %d\",\n\t\t\t_current, mutex, mutex->lock_count,\n\t\t\tmutex->owner_orig_prio);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mutex.c",
  "after-lines": [
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117
  ],
  "after-code": "\tk_spinlock_key_t key;\n\tbool resched = false;\n\n\t__ASSERT(!arch_is_in_isr(), \"mutexes cannot be used inside ISRs\");\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);\n\n\tkey = k_spin_lock(&lock);\n\n\tif (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {\n\n\t\tmutex->owner_orig_prio = (mutex->lock_count == 0U) ?\n\t\t\t\t\t_current->base.prio :\n\t\t\t\t\tmutex->owner_orig_prio;\n\n\t\tmutex->lock_count++;\n\t\tmutex->owner = _current;\n\n\t\tLOG_DBG(\"%p took mutex %p, count: %d, orig prio: %d\",\n\t\t\t_current, mutex, mutex->lock_count,\n\t\t\tmutex->owner_orig_prio);\n",
  "violation-line": 107,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/mutex.c",
  "before-lines": [
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137
  ],
  "before-code": "\t\t\tmutex->owner_orig_prio);\n\n\t\tk_spin_unlock(&lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);\n\n\t\treturn 0;\n\t}\n\n\tif (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {\n\t\tk_spin_unlock(&lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);\n\n\t\treturn -EBUSY;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);\n\n\tnew_prio = new_prio_for_inheritance(_current->base.prio,\n\t\t\t\t\t    mutex->owner->base.prio);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/mutex.c",
  "after-lines": [
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137
  ],
  "after-code": "\t\t\tmutex->owner_orig_prio);\n\n\t\tk_spin_unlock(&lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);\n\n\t\treturn 0;\n\t}\n\n\tif (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {\n\t\tk_spin_unlock(&lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);\n\n\t\treturn -EBUSY;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);\n\n\tnew_prio = new_prio_for_inheritance(_current->base.prio,\n\t\t\t\t\t    mutex->owner->base.prio);\n",
  "violation-line": 127,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/pipes.c",
  "before-lines": [
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164
  ],
  "before-code": "\t\t\tz_waitq_head(&pipe->wait_q.writers) != NULL) {\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_pipe, cleanup, pipe, -EAGAIN);\n\n\t\treturn -EAGAIN;\n\t}\n\n\tif ((pipe->flags & K_PIPE_FLAG_ALLOC) != 0U) {\n\t\tk_free(pipe->buffer);\n\t\tpipe->buffer = NULL;\n\t\tpipe->flags &= ~K_PIPE_FLAG_ALLOC;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_pipe, cleanup, pipe, 0);\n\n\treturn 0;\n}\n\n/**\n * @brief Copy bytes from @a src to @a dest\n *\n * @return Number of bytes copied\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/pipes.c",
  "after-lines": [
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164
  ],
  "after-code": "\t\t\tz_waitq_head(&pipe->wait_q.writers) != NULL) {\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_pipe, cleanup, pipe, -EAGAIN);\n\n\t\treturn -EAGAIN;\n\t}\n\n\tif ((pipe->flags & K_PIPE_FLAG_ALLOC) != 0U) {\n\t\tk_free(pipe->buffer);\n\t\tpipe->buffer = NULL;\n\t\tpipe->flags &= (uint8_t)~K_PIPE_FLAG_ALLOC;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_pipe, cleanup, pipe, 0);\n\n\treturn 0;\n}\n\n/**\n * @brief Copy bytes from @a src to @a dest\n *\n * @return Number of bytes copied\n",
  "violation-line": 154,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/queue.c",
  "before-lines": [
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331
  ],
  "before-code": "}\n\nvoid *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)\n{\n\tk_spinlock_key_t key = k_spin_lock(&queue->lock);\n\tvoid *data;\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);\n\n\tif (likely(!sys_sflist_is_empty(&queue->data_q))) {\n\t\tsys_sfnode_t *node;\n\n\t\tnode = sys_sflist_get_not_empty(&queue->data_q);\n\t\tdata = z_queue_node_peek(node, true);\n\t\tk_spin_unlock(&queue->lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, data);\n\n\t\treturn data;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/queue.c",
  "after-lines": [
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331
  ],
  "after-code": "}\n\nvoid *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)\n{\n\tk_spinlock_key_t key = k_spin_lock(&queue->lock);\n\tvoid *data;\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);\n\n\tif (likely(!sys_sflist_is_empty(&queue->data_q))) {\n\t\tsys_sfnode_t *node;\n\n\t\tnode = sys_sflist_get_not_empty(&queue->data_q);\n\t\tdata = z_queue_node_peek(node, true);\n\t\tk_spin_unlock(&queue->lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, data);\n\n\t\treturn data;\n\t}\n\n",
  "violation-line": 321,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72
  ],
  "before-code": "\nstatic ALWAYS_INLINE void z_priq_mq_add(struct _priq_mq *pq,\n\t\t\t\t\tstruct k_thread *thread);\nstatic ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,\n\t\t\t\t\t   struct k_thread *thread);\n\nstatic inline int is_preempt(struct k_thread *thread)\n{\n\t/* explanation in kernel_struct.h */\n\treturn thread->base.preempt <= _PREEMPT_THRESHOLD;\n}\n\nstatic inline int is_metairq(struct k_thread *thread)\n{\n#if CONFIG_NUM_METAIRQ_PRIORITIES > 0\n\treturn (thread->base.prio - K_HIGHEST_THREAD_PRIO)\n\t\t< CONFIG_NUM_METAIRQ_PRIORITIES;\n#else\n\treturn 0;\n#endif\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72
  ],
  "after-code": "\nstatic ALWAYS_INLINE void z_priq_mq_add(struct _priq_mq *pq,\n\t\t\t\t\tstruct k_thread *thread);\nstatic ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,\n\t\t\t\t\t   struct k_thread *thread);\n\nstatic inline bool is_preempt(struct k_thread *thread)\n{\n\t/* explanation in kernel_struct.h */\n\treturn thread->base.preempt <= _PREEMPT_THRESHOLD;\n}\n\nstatic inline bool is_metairq(struct k_thread *thread)\n{\n#if CONFIG_NUM_METAIRQ_PRIORITIES > 0\n\treturn (thread->base.prio - K_HIGHEST_THREAD_PRIO)\n\t\t< CONFIG_NUM_METAIRQ_PRIORITIES;\n#else\n\treturn false;\n#endif\n}\n",
  "violation-line": 62,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232
  ],
  "before-code": "\t\t/* add current to end of queue means \"yield\" */\n\t\t_current_cpu->swap_ok = true;\n\t}\n#endif\n}\n\nstatic ALWAYS_INLINE void dequeue_thread(void *pq,\n\t\t\t\t\t struct k_thread *thread)\n{\n\tthread->base.thread_state &= ~_THREAD_QUEUED;\n\tif (should_queue_thread(thread)) {\n\t\t_priq_run_remove(pq, thread);\n\t}\n}\n\n#ifdef CONFIG_SMP\n/* Called out of z_swap() when CONFIG_SMP.  The current thread can\n * never live in the run queue until we are inexorably on the context\n * switch path on SMP, otherwise there is a deadlock condition where a\n * set of CPUs pick a cycle of threads to run and wait for them all to\n * context switch forever.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232
  ],
  "after-code": "\t\t/* add current to end of queue means \"yield\" */\n\t\t_current_cpu->swap_ok = true;\n\t}\n#endif\n}\n\nstatic ALWAYS_INLINE void dequeue_thread(void *pq,\n\t\t\t\t\t struct k_thread *thread)\n{\n\tthread->base.thread_state &= (uint8_t)~_THREAD_QUEUED;\n\tif (should_queue_thread(thread)) {\n\t\t_priq_run_remove(pq, thread);\n\t}\n}\n\n#ifdef CONFIG_SMP\n/* Called out of z_swap() when CONFIG_SMP.  The current thread can\n * never live in the run queue until we are inexorably on the context\n * switch path on SMP, otherwise there is a deadlock condition where a\n * set of CPUs pick a cycle of threads to run and wait for them all to\n * context switch forever.\n",
  "violation-line": 222,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "before-code": "#endif\n}\n\nstatic void move_thread_to_end_of_prio_q(struct k_thread *thread)\n{\n\tif (z_is_thread_queued(thread)) {\n\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t}\n\tqueue_thread(&_kernel.ready_q.runq, thread);\n\tupdate_cache(thread == _current);\n}\n\n#ifdef CONFIG_TIMESLICING\n\nstatic int slice_time;\nstatic int slice_max_prio;\n\n#ifdef CONFIG_SWAP_NONATOMIC\n/* If z_swap() isn't atomic, then it's possible for a timer interrupt\n * to try to timeslice away _current after it has already pended\n * itself but before the corresponding context switch.  Treat that as\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "after-code": "#endif\n}\n\nstatic void move_thread_to_end_of_prio_q(struct k_thread *thread)\n{\n\tif (z_is_thread_queued(thread)) {\n\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t}\n\tqueue_thread(&_kernel.ready_q.runq, thread);\n\tupdate_cache(thread == _current);\n}\n\n#ifdef CONFIG_TIMESLICING\n\nstatic int slice_time;\nstatic int slice_max_prio;\n\n#ifdef CONFIG_SWAP_NONATOMIC\n/* If z_swap() isn't atomic, then it's possible for a timer interrupt\n * to try to timeslice away _current after it has already pended\n * itself but before the corresponding context switch.  Treat that as\n",
  "violation-line": 337,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371
  ],
  "before-code": "#endif\n\nvoid z_reset_time_slice(void)\n{\n\t/* Add the elapsed time since the last announced tick to the\n\t * slice count, as we'll see those \"expired\" ticks arrive in a\n\t * FUTURE z_time_slice() call.\n\t */\n\tif (slice_time != 0) {\n\t\t_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();\n\t\tz_set_timeout_expiry(slice_time, false);\n\t}\n}\n\nvoid k_sched_time_slice_set(int32_t slice, int prio)\n{\n\tLOCKED(&sched_spinlock) {\n\t\t_current_cpu->slice_ticks = 0;\n\t\tslice_time = k_ms_to_ticks_ceil32(slice);\n\t\tif ((IS_ENABLED(CONFIG_TICKLESS_KERNEL)) && slice > 0) {\n\t\t\t/* It's not possible to reliably set a 1-tick\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371
  ],
  "after-code": "#endif\n\nvoid z_reset_time_slice(void)\n{\n\t/* Add the elapsed time since the last announced tick to the\n\t * slice count, as we'll see those \"expired\" ticks arrive in a\n\t * FUTURE z_time_slice() call.\n\t */\n\tif (slice_time != 0) {\n\t\t_current_cpu->slice_ticks = slice_time + (int)sys_clock_elapsed();\n\t\tz_set_timeout_expiry(slice_time, false);\n\t}\n}\n\nvoid k_sched_time_slice_set(uint32_t slice, int prio)\n{\n\tLOCKED(&sched_spinlock) {\n\t\t_current_cpu->slice_ticks = 0;\n\t\tslice_time = (int32_t)k_ms_to_ticks_ceil32(slice);\n\t\tif ((IS_ENABLED(CONFIG_TICKLESS_KERNEL)) && slice > 0) {\n\t\t\t/* It's not possible to reliably set a 1-tick\n",
  "violation-line": 361,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380
  ],
  "before-code": "\t\t_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();\n\t\tz_set_timeout_expiry(slice_time, false);\n\t}\n}\n\nvoid k_sched_time_slice_set(int32_t slice, int prio)\n{\n\tLOCKED(&sched_spinlock) {\n\t\t_current_cpu->slice_ticks = 0;\n\t\tslice_time = k_ms_to_ticks_ceil32(slice);\n\t\tif ((IS_ENABLED(CONFIG_TICKLESS_KERNEL)) && slice > 0) {\n\t\t\t/* It's not possible to reliably set a 1-tick\n\t\t\t * timeout if ticks aren't regular.\n\t\t\t */\n\t\t\tslice_time = MAX(2, slice_time);\n\t\t}\n\t\tslice_max_prio = prio;\n\t\tz_reset_time_slice();\n\t}\n}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380
  ],
  "after-code": "\t\t_current_cpu->slice_ticks = slice_time + (int)sys_clock_elapsed();\n\t\tz_set_timeout_expiry(slice_time, false);\n\t}\n}\n\nvoid k_sched_time_slice_set(uint32_t slice, int prio)\n{\n\tLOCKED(&sched_spinlock) {\n\t\t_current_cpu->slice_ticks = 0;\n\t\tslice_time = (int32_t)k_ms_to_ticks_ceil32(slice);\n\t\tif ((IS_ENABLED(CONFIG_TICKLESS_KERNEL)) && slice > 0) {\n\t\t\t/* It's not possible to reliably set a 1-tick\n\t\t\t * timeout if ticks aren't regular.\n\t\t\t */\n\t\t\tslice_time = MAX(2, slice_time);\n\t\t}\n\t\tslice_max_prio = prio;\n\t\tz_reset_time_slice();\n\t}\n}\n\n",
  "violation-line": 370,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380
  ],
  "before-code": "\t\t_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();\n\t\tz_set_timeout_expiry(slice_time, false);\n\t}\n}\n\nvoid k_sched_time_slice_set(int32_t slice, int prio)\n{\n\tLOCKED(&sched_spinlock) {\n\t\t_current_cpu->slice_ticks = 0;\n\t\tslice_time = k_ms_to_ticks_ceil32(slice);\n\t\tif ((IS_ENABLED(CONFIG_TICKLESS_KERNEL)) && slice > 0) {\n\t\t\t/* It's not possible to reliably set a 1-tick\n\t\t\t * timeout if ticks aren't regular.\n\t\t\t */\n\t\t\tslice_time = MAX(2, slice_time);\n\t\t}\n\t\tslice_max_prio = prio;\n\t\tz_reset_time_slice();\n\t}\n}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380
  ],
  "after-code": "\t\t_current_cpu->slice_ticks = slice_time + (int)sys_clock_elapsed();\n\t\tz_set_timeout_expiry(slice_time, false);\n\t}\n}\n\nvoid k_sched_time_slice_set(uint32_t slice, int prio)\n{\n\tLOCKED(&sched_spinlock) {\n\t\t_current_cpu->slice_ticks = 0;\n\t\tslice_time = (int32_t)k_ms_to_ticks_ceil32(slice);\n\t\tif ((IS_ENABLED(CONFIG_TICKLESS_KERNEL)) && slice > 0) {\n\t\t\t/* It's not possible to reliably set a 1-tick\n\t\t\t * timeout if ticks aren't regular.\n\t\t\t */\n\t\t\tslice_time = MAX(2, slice_time);\n\t\t}\n\t\tslice_max_prio = prio;\n\t\tz_reset_time_slice();\n\t}\n}\n\n",
  "violation-line": 370,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394
  ],
  "before-code": "\t\t\tslice_time = MAX(2, slice_time);\n\t\t}\n\t\tslice_max_prio = prio;\n\t\tz_reset_time_slice();\n\t}\n}\n\nstatic inline int sliceable(struct k_thread *thread)\n{\n\treturn is_preempt(thread)\n\t\t&& !z_is_thread_prevented_from_running(thread)\n\t\t&& !z_is_prio_higher(thread->base.prio, slice_max_prio)\n\t\t&& !z_is_idle_thread_object(thread);\n}\n\n/* Called out of each timer interrupt */\nvoid z_time_slice(int ticks)\n{\n\t/* Hold sched_spinlock, so that activity on another CPU\n\t * (like a call to k_thread_abort() at just the wrong time)\n\t * won't affect the correctness of the decisions made here.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394
  ],
  "after-code": "\t\t\tslice_time = MAX(2, slice_time);\n\t\t}\n\t\tslice_max_prio = prio;\n\t\tz_reset_time_slice();\n\t}\n}\n\nstatic inline bool sliceable(struct k_thread *thread)\n{\n\treturn is_preempt(thread)\n\t\t&& !z_is_thread_prevented_from_running(thread)\n\t\t&& !z_is_prio_higher(thread->base.prio, slice_max_prio)\n\t\t&& !z_is_idle_thread_object(thread);\n}\n\n/* Called out of each timer interrupt */\nvoid z_time_slice(int ticks)\n{\n\t/* Hold sched_spinlock, so that activity on another CPU\n\t * (like a call to k_thread_abort() at just the wrong time)\n\t * won't affect the correctness of the decisions made here.\n",
  "violation-line": 384,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561
  ],
  "before-code": "\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, suspend, thread);\n\n\t(void)z_abort_thread_timeout(thread);\n\n\tLOCKED(&sched_spinlock) {\n\t\tif (z_is_thread_queued(thread)) {\n\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t}\n\t\tz_mark_thread_as_suspended(thread);\n\t\tupdate_cache(thread == _current);\n\t}\n\n\tif (thread == _current) {\n\t\tz_reschedule_unlocked();\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, suspend, thread);\n}\n\n#ifdef CONFIG_USERSPACE\nstatic inline void z_vrfy_k_thread_suspend(struct k_thread *thread)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561
  ],
  "after-code": "\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, suspend, thread);\n\n\t(void)z_abort_thread_timeout(thread);\n\n\tLOCKED(&sched_spinlock) {\n\t\tif (z_is_thread_queued(thread)) {\n\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t}\n\t\tz_mark_thread_as_suspended(thread);\n\t\tupdate_cache(thread == _current);\n\t}\n\n\tif (thread == _current) {\n\t\tz_reschedule_unlocked();\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, suspend, thread);\n}\n\n#ifdef CONFIG_USERSPACE\nstatic inline void z_vrfy_k_thread_suspend(struct k_thread *thread)\n",
  "violation-line": 551,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621
  ],
  "before-code": "\n\treturn thread->base.pended_on;\n}\n\nstatic void unready_thread(struct k_thread *thread)\n{\n\tif (z_is_thread_queued(thread)) {\n\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t}\n\tupdate_cache(thread == _current);\n}\n\n/* sched_spinlock must be held */\nstatic void add_to_waitq_locked(struct k_thread *thread, _wait_q_t *wait_q)\n{\n\tunready_thread(thread);\n\tz_mark_thread_as_pending(thread);\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_pend, thread);\n\n\tif (wait_q != NULL) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621
  ],
  "after-code": "\n\treturn thread->base.pended_on;\n}\n\nstatic void unready_thread(struct k_thread *thread)\n{\n\tif (z_is_thread_queued(thread)) {\n\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t}\n\tupdate_cache(thread == _current);\n}\n\n/* sched_spinlock must be held */\nstatic void add_to_waitq_locked(struct k_thread *thread, _wait_q_t *wait_q)\n{\n\tunready_thread(thread);\n\tz_mark_thread_as_pending(thread);\n\n\tSYS_PORT_TRACING_FUNC(k_thread, sched_pend, thread);\n\n\tif (wait_q != NULL) {\n",
  "violation-line": 611,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    763,
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783
  ],
  "before-code": "\tbool need_sched = 0;\n\n\tLOCKED(&sched_spinlock) {\n\t\tneed_sched = z_is_thread_ready(thread);\n\n\t\tif (need_sched) {\n\t\t\t/* Don't requeue on SMP if it's the running thread */\n\t\t\tif (!(IS_ENABLED(CONFIG_SMP)) || z_is_thread_queued(thread)) {\n\t\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t\tthread->base.prio = prio;\n\t\t\t\tqueue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t} else {\n\t\t\t\tthread->base.prio = prio;\n\t\t\t}\n\t\t\tupdate_cache(1);\n\t\t} else {\n\t\t\tthread->base.prio = prio;\n\t\t}\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    763,
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783
  ],
  "after-code": "\tbool need_sched = false;\n\n\tLOCKED(&sched_spinlock) {\n\t\tneed_sched = z_is_thread_ready(thread);\n\n\t\tif (need_sched) {\n\t\t\t/* Don't requeue on SMP if it's the running thread */\n\t\t\tif (!(IS_ENABLED(CONFIG_SMP)) || z_is_thread_queued(thread)) {\n\t\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t\tthread->base.prio = (int8_t)prio;\n\t\t\t\tqueue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t} else {\n\t\t\t\tthread->base.prio = (int8_t)prio;\n\t\t\t}\n\t\t\tupdate_cache(true);\n\t\t} else {\n\t\t\tthread->base.prio = (int8_t)prio;\n\t\t}\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);\n",
  "violation-line": 773,
  "violation-message": "The int type has been assigned to the object of signed char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786
  ],
  "before-code": "\t\tneed_sched = z_is_thread_ready(thread);\n\n\t\tif (need_sched) {\n\t\t\t/* Don't requeue on SMP if it's the running thread */\n\t\t\tif (!(IS_ENABLED(CONFIG_SMP)) || z_is_thread_queued(thread)) {\n\t\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t\tthread->base.prio = prio;\n\t\t\t\tqueue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t} else {\n\t\t\t\tthread->base.prio = prio;\n\t\t\t}\n\t\t\tupdate_cache(1);\n\t\t} else {\n\t\t\tthread->base.prio = prio;\n\t\t}\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);\n\n\treturn need_sched;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786
  ],
  "after-code": "\t\tneed_sched = z_is_thread_ready(thread);\n\n\t\tif (need_sched) {\n\t\t\t/* Don't requeue on SMP if it's the running thread */\n\t\t\tif (!(IS_ENABLED(CONFIG_SMP)) || z_is_thread_queued(thread)) {\n\t\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t\tthread->base.prio = (int8_t)prio;\n\t\t\t\tqueue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t} else {\n\t\t\t\tthread->base.prio = (int8_t)prio;\n\t\t\t}\n\t\t\tupdate_cache(true);\n\t\t} else {\n\t\t\tthread->base.prio = (int8_t)prio;\n\t\t}\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);\n\n\treturn need_sched;\n}\n",
  "violation-line": 776,
  "violation-message": "The int type has been assigned to the object of signed char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    787,
    788,
    789,
    790
  ],
  "before-code": "\t\t\tif (!(IS_ENABLED(CONFIG_SMP)) || z_is_thread_queued(thread)) {\n\t\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t\tthread->base.prio = prio;\n\t\t\t\tqueue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t} else {\n\t\t\t\tthread->base.prio = prio;\n\t\t\t}\n\t\t\tupdate_cache(1);\n\t\t} else {\n\t\t\tthread->base.prio = prio;\n\t\t}\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);\n\n\treturn need_sched;\n}\n\nvoid z_thread_priority_set(struct k_thread *thread, int prio)\n{\n\tbool need_sched = z_set_prio(thread, prio);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    787,
    788,
    789,
    790
  ],
  "after-code": "\t\t\tif (!(IS_ENABLED(CONFIG_SMP)) || z_is_thread_queued(thread)) {\n\t\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t\tthread->base.prio = (int8_t)prio;\n\t\t\t\tqueue_thread(&_kernel.ready_q.runq, thread);\n\t\t\t} else {\n\t\t\t\tthread->base.prio = (int8_t)prio;\n\t\t\t}\n\t\t\tupdate_cache(true);\n\t\t} else {\n\t\t\tthread->base.prio = (int8_t)prio;\n\t\t}\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_priority_set, thread, prio);\n\n\treturn need_sched;\n}\n\nvoid z_thread_priority_set(struct k_thread *thread, int prio)\n{\n\tbool need_sched = z_set_prio(thread, prio);\n",
  "violation-line": 780,
  "violation-message": "The int type has been assigned to the object of signed char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    821,
    822,
    823,
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841
  ],
  "before-code": "\n\t/* Check if the next ready thread is the same as the current thread */\n\tnew_thread = _kernel.ready_q.cache;\n\treturn new_thread != _current;\n#endif\n}\n\nvoid z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)\n{\n\tif (resched(key.key) && need_swap()) {\n\t\tz_swap(lock, key);\n\t} else {\n\t\tk_spin_unlock(lock, key);\n\t}\n}\n\nvoid z_reschedule_irqlock(uint32_t key)\n{\n\tif (resched(key)) {\n\t\tz_swap_irqlock(key);\n\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    821,
    822,
    823,
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841
  ],
  "after-code": "\n\t/* Check if the next ready thread is the same as the current thread */\n\tnew_thread = _kernel.ready_q.cache;\n\treturn new_thread != _current;\n#endif\n}\n\nvoid z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)\n{\n\tif (resched(key.key) && need_swap()) {\n\t\tz_swap(lock, key);\n\t} else {\n\t\tk_spin_unlock(lock, key);\n\t}\n}\n\nvoid z_reschedule_irqlock(uint32_t key)\n{\n\tif (resched(key)) {\n\t\tz_swap_irqlock(key);\n\t} else {\n",
  "violation-line": 831,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    987,
    988,
    989,
    990,
    991,
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007
  ],
  "before-code": "\t}\n}\n\nvoid z_priq_rb_add(struct _priq_rb *pq, struct k_thread *thread)\n{\n\tstruct k_thread *t;\n\n\t__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));\n\n\tthread->base.order_key = pq->next_order_key++;\n\n\t/* Renumber at wraparound.  This is tiny code, and in practice\n\t * will almost never be hit on real systems.  BUT on very\n\t * long-running systems where a priq never completely empties\n\t * AND that contains very large numbers of threads, it can be\n\t * a latency glitch to loop over all the threads like this.\n\t */\n\tif (!pq->next_order_key) {\n\t\tRB_FOR_EACH_CONTAINER(&pq->tree, t, base.qnode_rb) {\n\t\t\tt->base.order_key = pq->next_order_key++;\n\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    986,
    987,
    988,
    989,
    990,
    991,
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006
  ],
  "after-code": "\t}\n}\n\nvoid z_priq_rb_add(struct _priq_rb *pq, struct k_thread *thread)\n{\n\tstruct k_thread *t;\n\n\t__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));\n\n\tthread->base.order_key = pq->next_order_key++;\n\n\t/* Renumber at wraparound.  This is tiny code, and in practice\n\t * will almost never be hit on real systems.  BUT on very\n\t * long-running systems where a priq never completely empties\n\t * AND that contains very large numbers of threads, it can be\n\t * a latency glitch to loop over all the threads like this.\n\t */\n\tif (pq->next_order_key == 0) {\n\t\tRB_FOR_EACH_CONTAINER(&pq->tree, t, base.qnode_rb) {\n\t\t\tt->base.order_key = pq->next_order_key++;\n\t\t}\n",
  "violation-line": 997,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013,
    1014,
    1015,
    1016,
    1017
  ],
  "before-code": "\n\t/* Renumber at wraparound.  This is tiny code, and in practice\n\t * will almost never be hit on real systems.  BUT on very\n\t * long-running systems where a priq never completely empties\n\t * AND that contains very large numbers of threads, it can be\n\t * a latency glitch to loop over all the threads like this.\n\t */\n\tif (!pq->next_order_key) {\n\t\tRB_FOR_EACH_CONTAINER(&pq->tree, t, base.qnode_rb) {\n\t\t\tt->base.order_key = pq->next_order_key++;\n\t\t}\n\t}\n\n\trb_insert(&pq->tree, &thread->base.qnode_rb);\n}\n\nvoid z_priq_rb_remove(struct _priq_rb *pq, struct k_thread *thread)\n{\n\t__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));\n\n\trb_remove(&pq->tree, &thread->base.qnode_rb);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013,
    1014,
    1015,
    1016
  ],
  "after-code": "\n\t/* Renumber at wraparound.  This is tiny code, and in practice\n\t * will almost never be hit on real systems.  BUT on very\n\t * long-running systems where a priq never completely empties\n\t * AND that contains very large numbers of threads, it can be\n\t * a latency glitch to loop over all the threads like this.\n\t */\n\tif (pq->next_order_key == 0) {\n\t\tRB_FOR_EACH_CONTAINER(&pq->tree, t, base.qnode_rb) {\n\t\t\tt->base.order_key = pq->next_order_key++;\n\t\t}\n\t}\n\n\trb_insert(&pq->tree, &thread->base.qnode_rb);\n}\n\nvoid z_priq_rb_remove(struct _priq_rb *pq, struct k_thread *thread)\n{\n\t__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));\n\n\trb_remove(&pq->tree, &thread->base.qnode_rb);\n",
  "violation-line": 1007,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057,
    1058
  ],
  "before-code": "# endif\n#endif\n\nstatic ALWAYS_INLINE void z_priq_mq_add(struct _priq_mq *pq,\n\t\t\t\t\tstruct k_thread *thread)\n{\n\tint priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;\n\n\tsys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);\n\tpq->bitmask |= BIT(priority_bit);\n}\n\nstatic ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,\n\t\t\t\t\t   struct k_thread *thread)\n{\n\tint priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;\n\n\tsys_dlist_remove(&thread->base.qnode_dlist);\n\tif (sys_dlist_is_empty(&pq->queues[priority_bit])) {\n\t\tpq->bitmask &= ~BIT(priority_bit);\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057
  ],
  "after-code": "# endif\n#endif\n\nstatic ALWAYS_INLINE void z_priq_mq_add(struct _priq_mq *pq,\n\t\t\t\t\tstruct k_thread *thread)\n{\n\tint8_t priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;\n\n\tsys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);\n\tpq->bitmask |= BIT32((unsigned int)priority_bit);\n}\n\nstatic ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,\n\t\t\t\t\t   struct k_thread *thread)\n{\n\tint8_t priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;\n\n\tsys_dlist_remove(&thread->base.qnode_dlist);\n\tif (sys_dlist_is_empty(&pq->queues[priority_bit])) {\n\t\tpq->bitmask &= ~BIT32((unsigned int)priority_bit);\n\t}\n",
  "violation-line": 1048,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057,
    1058,
    1059,
    1060,
    1061,
    1062,
    1063,
    1064,
    1065,
    1066,
    1067,
    1068
  ],
  "before-code": "}\n\nstatic ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,\n\t\t\t\t\t   struct k_thread *thread)\n{\n\tint priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;\n\n\tsys_dlist_remove(&thread->base.qnode_dlist);\n\tif (sys_dlist_is_empty(&pq->queues[priority_bit])) {\n\t\tpq->bitmask &= ~BIT(priority_bit);\n\t}\n}\n\nstruct k_thread *z_priq_mq_best(struct _priq_mq *pq)\n{\n\tif (!pq->bitmask) {\n\t\treturn NULL;\n\t}\n\n\tstruct k_thread *thread = NULL;\n\tsys_dlist_t *l = &pq->queues[__builtin_ctz(pq->bitmask)];\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    1047,
    1048,
    1049,
    1050,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057,
    1058,
    1059,
    1060,
    1061,
    1062,
    1063,
    1064,
    1065,
    1066,
    1067
  ],
  "after-code": "}\n\nstatic ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,\n\t\t\t\t\t   struct k_thread *thread)\n{\n\tint8_t priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;\n\n\tsys_dlist_remove(&thread->base.qnode_dlist);\n\tif (sys_dlist_is_empty(&pq->queues[priority_bit])) {\n\t\tpq->bitmask &= ~BIT32((unsigned int)priority_bit);\n\t}\n}\n\nstruct k_thread *z_priq_mq_best(struct _priq_mq *pq)\n{\n\tif (pq->bitmask == 0) {\n\t\treturn NULL;\n\t}\n\n\tstruct k_thread *thread = NULL;\n\tsys_dlist_t *l = &pq->queues[__builtin_ctz(pq->bitmask)];\n",
  "violation-line": 1058,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    1249,
    1250,
    1251,
    1252,
    1253,
    1254,
    1255,
    1256,
    1257,
    1258,
    1259,
    1260,
    1261,
    1262,
    1263,
    1264,
    1265,
    1266,
    1267,
    1268,
    1269
  ],
  "before-code": "\tz_add_thread_timeout(_current, timeout);\n\tz_mark_thread_as_suspended(_current);\n\n\t(void)z_swap(&sched_spinlock, key);\n\n\t__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), \"\");\n\n\tticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();\n\tif (ticks > 0) {\n\t\treturn ticks;\n\t}\n#endif\n\n\treturn 0;\n}\n\nint32_t z_impl_k_sleep(k_timeout_t timeout)\n{\n\tk_ticks_t ticks;\n\n\t__ASSERT(!arch_is_in_isr(), \"\");\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    1250,
    1251,
    1252,
    1253,
    1254,
    1255,
    1256,
    1257,
    1258,
    1259,
    1260,
    1261,
    1262,
    1263,
    1264,
    1265,
    1266,
    1267,
    1268,
    1269,
    1270
  ],
  "after-code": "\tz_add_thread_timeout(_current, timeout);\n\tz_mark_thread_as_suspended(_current);\n\n\t(void)z_swap(&sched_spinlock, key);\n\n\t__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), \"\");\n\n\tticks = (k_ticks_t)expected_wakeup_ticks - (k_ticks_t)sys_clock_tick_get_32();\n\tif (ticks > 0) {\n\t\treturn (int32_t)ticks;\n\t}\n#endif\n\n\treturn 0;\n}\n\nint32_t z_impl_k_sleep(k_timeout_t timeout)\n{\n\tk_ticks_t ticks;\n\n\t__ASSERT(!arch_is_in_isr(), \"\");\n",
  "violation-line": 1259,
  "violation-message": "The long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    1394,
    1395,
    1396,
    1397,
    1398,
    1399,
    1400,
    1401,
    1402,
    1403,
    1404,
    1405,
    1406,
    1407,
    1408,
    1409,
    1410,
    1411,
    1412,
    1413,
    1414
  ],
  "before-code": "static inline k_tid_t z_vrfy_z_current_get(void)\n{\n\treturn z_impl_z_current_get();\n}\n#include <syscalls/z_current_get_mrsh.c>\n#endif\n\nint z_impl_k_is_preempt_thread(void)\n{\n\treturn !arch_is_in_isr() && is_preempt(_current);\n}\n\n#ifdef CONFIG_USERSPACE\nstatic inline int z_vrfy_k_is_preempt_thread(void)\n{\n\treturn z_impl_k_is_preempt_thread();\n}\n#include <syscalls/k_is_preempt_thread_mrsh.c>\n#endif\n\n#ifdef CONFIG_SCHED_CPU_MASK\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    1398,
    1399,
    1400,
    1401,
    1402,
    1403,
    1404,
    1405,
    1406,
    1407,
    1408,
    1409,
    1410,
    1411,
    1412,
    1413,
    1414,
    1415,
    1416,
    1417,
    1418
  ],
  "after-code": "static inline k_tid_t z_vrfy_z_current_get(void)\n{\n\treturn z_impl_z_current_get();\n}\n#include <syscalls/z_current_get_mrsh.c>\n#endif\n\nint z_impl_k_is_preempt_thread(void)\n{\n\treturn (!arch_is_in_isr() && is_preempt(_current)) ? 1 : 0;\n}\n\n#ifdef CONFIG_USERSPACE\nstatic inline int z_vrfy_k_is_preempt_thread(void)\n{\n\treturn z_impl_k_is_preempt_thread();\n}\n#include <syscalls/k_is_preempt_thread_mrsh.c>\n#endif\n\n#ifdef CONFIG_SCHED_CPU_MASK\n",
  "violation-line": 1404,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    1472,
    1473,
    1474,
    1475,
    1476,
    1477,
    1478,
    1479,
    1480,
    1481,
    1482,
    1483,
    1484,
    1485,
    1486,
    1487,
    1488,
    1489,
    1490,
    1491,
    1492
  ],
  "before-code": "#endif\n\nstatic void end_thread(struct k_thread *thread)\n{\n\t/* We hold the lock, and the thread is known not to be running\n\t * anywhere.\n\t */\n\tif ((thread->base.thread_state & _THREAD_DEAD) == 0U) {\n\t\tthread->base.thread_state |= _THREAD_DEAD;\n\t\tthread->base.thread_state &= ~_THREAD_ABORTING;\n\t\tif (z_is_thread_queued(thread)) {\n\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t}\n\t\tif (thread->base.pended_on != NULL) {\n\t\t\tunpend_thread_no_timeout(thread);\n\t\t}\n\t\t(void)z_abort_thread_timeout(thread);\n\t\tunpend_all(&thread->join_queue);\n\t\tupdate_cache(1);\n\n\t\tSYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    1476,
    1477,
    1478,
    1479,
    1480,
    1481,
    1482,
    1483,
    1484,
    1485,
    1486,
    1487,
    1488,
    1489,
    1490,
    1491,
    1492,
    1493,
    1494,
    1495,
    1496
  ],
  "after-code": "#endif\n\nstatic void end_thread(struct k_thread *thread)\n{\n\t/* We hold the lock, and the thread is known not to be running\n\t * anywhere.\n\t */\n\tif ((thread->base.thread_state & _THREAD_DEAD) == 0U) {\n\t\tthread->base.thread_state |= _THREAD_DEAD;\n\t\tthread->base.thread_state &= (uint8_t)~_THREAD_ABORTING;\n\t\tif (z_is_thread_queued(thread)) {\n\t\t\tdequeue_thread(&_kernel.ready_q.runq, thread);\n\t\t}\n\t\tif (thread->base.pended_on != NULL) {\n\t\t\tunpend_thread_no_timeout(thread);\n\t\t}\n\t\t(void)z_abort_thread_timeout(thread);\n\t\tunpend_all(&thread->join_queue);\n\t\tupdate_cache(true);\n\n\t\tSYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);\n",
  "violation-line": 1482,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sched.c",
  "before-lines": [
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673,
    1674,
    1675,
    1676
  ],
  "before-code": "bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)\n{\n\tstruct k_thread *thread;\n\tbool ret = false;\n\n\tLOCKED(&sched_spinlock) {\n\t\tthread = _priq_wait_best(&wait_q->waitq);\n\n\t\tif (thread != NULL) {\n\t\t\tz_thread_return_value_set_with_data(thread,\n\t\t\t\t\t\t\t    swap_retval,\n\t\t\t\t\t\t\t    swap_data);\n\t\t\tunpend_thread_no_timeout(thread);\n\t\t\t(void)z_abort_thread_timeout(thread);\n\t\t\tready_thread(thread);\n\t\t\tret = true;\n\t\t}\n\t}\n\n\treturn ret;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sched.c",
  "after-lines": [
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673,
    1674,
    1675,
    1676,
    1677,
    1678,
    1679,
    1680
  ],
  "after-code": "bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)\n{\n\tstruct k_thread *thread;\n\tbool ret = false;\n\n\tLOCKED(&sched_spinlock) {\n\t\tthread = _priq_wait_best(&wait_q->waitq);\n\n\t\tif (thread != NULL) {\n\t\t\tz_thread_return_value_set_with_data(thread,\n\t\t\t\t\t\t\t    swap_retval,\n\t\t\t\t\t\t\t    swap_data);\n\t\t\tunpend_thread_no_timeout(thread);\n\t\t\t(void)z_abort_thread_timeout(thread);\n\t\t\tready_thread(thread);\n\t\t\tret = true;\n\t\t}\n\t}\n\n\treturn ret;\n}\n",
  "violation-line": 1666,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/sem.c",
  "before-lines": [
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138
  ],
  "before-code": "\tint ret = 0;\n\n\t__ASSERT(((arch_is_in_isr() == false) ||\n\t\t  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), \"\");\n\n\tk_spinlock_key_t key = k_spin_lock(&lock);\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);\n\n\tif (likely(sem->count > 0U)) {\n\t\tsem->count--;\n\t\tk_spin_unlock(&lock, key);\n\t\tret = 0;\n\t\tgoto out;\n\t}\n\n\tif (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {\n\t\tk_spin_unlock(&lock, key);\n\t\tret = -EBUSY;\n\t\tgoto out;\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/sem.c",
  "after-lines": [
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138
  ],
  "after-code": "\tint ret = 0;\n\n\t__ASSERT(((arch_is_in_isr() == false) ||\n\t\t  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), \"\");\n\n\tk_spinlock_key_t key = k_spin_lock(&lock);\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);\n\n\tif (likely(sem->count > 0U)) {\n\t\tsem->count--;\n\t\tk_spin_unlock(&lock, key);\n\t\tret = 0;\n\t\tgoto out;\n\t}\n\n\tif (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {\n\t\tk_spin_unlock(&lock, key);\n\t\tret = -EBUSY;\n\t\tgoto out;\n\t}\n",
  "violation-line": 128,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/stack.c",
  "before-lines": [
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154
  ],
  "before-code": "\t\t       k_timeout_t timeout)\n{\n\tk_spinlock_key_t key;\n\tint result;\n\n\tkey = k_spin_lock(&stack->lock);\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_stack, pop, stack, timeout);\n\n\tif (likely(stack->next > stack->base)) {\n\t\tstack->next--;\n\t\t*data = *(stack->next);\n\t\tk_spin_unlock(&stack->lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_stack, pop, stack, timeout, 0);\n\n\t\treturn 0;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_stack, pop, stack, timeout);\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/stack.c",
  "after-lines": [
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154
  ],
  "after-code": "\t\t       k_timeout_t timeout)\n{\n\tk_spinlock_key_t key;\n\tint result;\n\n\tkey = k_spin_lock(&stack->lock);\n\n\tSYS_PORT_TRACING_OBJ_FUNC_ENTER(k_stack, pop, stack, timeout);\n\n\tif (likely(stack->next > stack->base)) {\n\t\tstack->next--;\n\t\t*data = *(stack->next);\n\t\tk_spin_unlock(&stack->lock, key);\n\n\t\tSYS_PORT_TRACING_OBJ_FUNC_EXIT(k_stack, pop, stack, timeout, 0);\n\n\t\treturn 0;\n\t}\n\n\tSYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_stack, pop, stack, timeout);\n\n",
  "violation-line": 144,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/thread.c",
  "before-lines": [
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132
  ],
  "before-code": "}\n\n/*\n * This function tags the current thread as not essential to system operation.\n * Exceptions raised by this thread may be recoverable.\n * (This is the default tag for a thread.)\n */\nvoid z_thread_essential_clear(void)\n{\n\t_current->base.user_options &= ~K_ESSENTIAL;\n}\n\n/*\n * This routine indicates if the current thread is an essential system thread.\n *\n * Returns true if current thread is essential, false if it is not.\n */\nbool z_is_thread_essential(void)\n{\n\treturn (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/thread.c",
  "after-lines": [
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132
  ],
  "after-code": "}\n\n/*\n * This function tags the current thread as not essential to system operation.\n * Exceptions raised by this thread may be recoverable.\n * (This is the default tag for a thread.)\n */\nvoid z_thread_essential_clear(void)\n{\n\t_current->base.user_options &= (uint8_t)~K_ESSENTIAL;\n}\n\n/*\n * This routine indicates if the current thread is an essential system thread.\n *\n * Returns true if current thread is essential, false if it is not.\n */\nbool z_is_thread_essential(void)\n{\n\treturn (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;\n}\n",
  "violation-line": 122,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/thread.c",
  "before-lines": [
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    763,
    764,
    765,
    766,
    767,
    768,
    769
  ],
  "before-code": "\t * until they are all started.\n\t *\n\t * Note that static threads defined using the legacy API have a\n\t * delay of K_FOREVER.\n\t */\n\tk_sched_lock();\n\t_FOREACH_STATIC_THREAD(thread_data) {\n\t\tif (thread_data->init_delay != K_TICKS_FOREVER) {\n\t\t\tschedule_new_thread(thread_data->init_thread,\n\t\t\t\t\t    K_MSEC(thread_data->init_delay));\n\t\t}\n\t}\n\tk_sched_unlock();\n}\n#endif\n\nvoid z_init_thread_base(struct _thread_base *thread_base, int priority,\n\t\t       uint32_t initial_state, unsigned int options)\n{\n\t/* k_q_node is initialized upon first insertion in a list */\n\tthread_base->pended_on = NULL;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/thread.c",
  "after-lines": [
    749,
    750,
    751,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    763,
    764,
    765,
    766,
    767,
    768,
    769
  ],
  "after-code": "\t * until they are all started.\n\t *\n\t * Note that static threads defined using the legacy API have a\n\t * delay of K_FOREVER.\n\t */\n\tk_sched_lock();\n\t_FOREACH_STATIC_THREAD(thread_data) {\n\t\tif (thread_data->init_delay != K_TICKS_FOREVER) {\n\t\t\tschedule_new_thread(thread_data->init_thread,\n\t\t\t\t\t    K_MSEC(thread_data->init_delay));\n\t\t}\n\t}\n\tk_sched_unlock();\n}\n#endif\n\nvoid z_init_thread_base(struct _thread_base *thread_base, int priority,\n\t\t       uint32_t initial_state, unsigned int options)\n{\n\t/* k_q_node is initialized upon first insertion in a list */\n\tthread_base->pended_on = NULL;\n",
  "violation-line": 759,
  "violation-message": "The int type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/thread.c",
  "before-lines": [
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784
  ],
  "before-code": "\nvoid z_init_thread_base(struct _thread_base *thread_base, int priority,\n\t\t       uint32_t initial_state, unsigned int options)\n{\n\t/* k_q_node is initialized upon first insertion in a list */\n\tthread_base->pended_on = NULL;\n\tthread_base->user_options = (uint8_t)options;\n\tthread_base->thread_state = (uint8_t)initial_state;\n\n\tthread_base->prio = priority;\n\n\tthread_base->sched_locked = 0U;\n\n#ifdef CONFIG_SMP\n\tthread_base->is_idle = 0;\n#endif\n\n\t/* swap_data does not need to be initialized */\n\n\tz_init_thread_timeout(thread_base);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/thread.c",
  "after-lines": [
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    772,
    773,
    774,
    775,
    776,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784
  ],
  "after-code": "\nvoid z_init_thread_base(struct _thread_base *thread_base, int priority,\n\t\t       uint32_t initial_state, unsigned int options)\n{\n\t/* k_q_node is initialized upon first insertion in a list */\n\tthread_base->pended_on = NULL;\n\tthread_base->user_options = (uint8_t)options;\n\tthread_base->thread_state = (uint8_t)initial_state;\n\n\tthread_base->prio = (int8_t)priority;\n\n\tthread_base->sched_locked = 0U;\n\n#ifdef CONFIG_SMP\n\tthread_base->is_idle = 0;\n#endif\n\n\t/* swap_data does not need to be initialized */\n\n\tz_init_thread_timeout(thread_base);\n}\n",
  "violation-line": 774,
  "violation-message": "The int type has been assigned to the object of signed char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/timeout.c",
  "before-lines": [
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74
  ],
  "before-code": "\tif (next(t) != NULL) {\n\t\tnext(t)->dticks += t->dticks;\n\t}\n\n\tsys_dlist_remove(&t->node);\n}\n\nstatic int32_t elapsed(void)\n{\n\treturn announce_remaining == 0 ? sys_clock_elapsed() : 0U;\n}\n\nstatic int32_t next_timeout(void)\n{\n\tstruct _timeout *to = first();\n\tint32_t ticks_elapsed = elapsed();\n\tint32_t ret = to == NULL ? MAX_WAIT\n\t\t: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);\n\n#ifdef CONFIG_TIMESLICING\n\tif (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/timeout.c",
  "after-lines": [
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74
  ],
  "after-code": "\tif (next(t) != NULL) {\n\t\tnext(t)->dticks += t->dticks;\n\t}\n\n\tsys_dlist_remove(&t->node);\n}\n\nstatic k_ticks_t elapsed(void)\n{\n\treturn announce_remaining == 0 ? (k_ticks_t)sys_clock_elapsed() : 0;\n}\n\nstatic int32_t next_timeout(void)\n{\n\tstruct _timeout *to = first();\n\tk_ticks_t ticks_elapsed = elapsed();\n\tint32_t ret = (int32_t)(to == NULL ? MAX_WAIT\n\t\t: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT));\n\n#ifdef CONFIG_TIMESLICING\n\tif ((_current_cpu->slice_ticks != 0) && (_current_cpu->slice_ticks < ret)) {\n",
  "violation-line": 64,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/timeout.c",
  "before-lines": [
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82
  ],
  "before-code": "\nstatic int32_t elapsed(void)\n{\n\treturn announce_remaining == 0 ? sys_clock_elapsed() : 0U;\n}\n\nstatic int32_t next_timeout(void)\n{\n\tstruct _timeout *to = first();\n\tint32_t ticks_elapsed = elapsed();\n\tint32_t ret = to == NULL ? MAX_WAIT\n\t\t: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);\n\n#ifdef CONFIG_TIMESLICING\n\tif (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {\n\t\tret = _current_cpu->slice_ticks;\n\t}\n#endif\n\treturn ret;\n}\n\nvoid z_add_timeout(struct _timeout *to, _timeout_func_t fn,\n\t\t   k_timeout_t timeout)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/timeout.c",
  "after-lines": [
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82
  ],
  "after-code": "\nstatic k_ticks_t elapsed(void)\n{\n\treturn announce_remaining == 0 ? (k_ticks_t)sys_clock_elapsed() : 0;\n}\n\nstatic int32_t next_timeout(void)\n{\n\tstruct _timeout *to = first();\n\tk_ticks_t ticks_elapsed = elapsed();\n\tint32_t ret = (int32_t)(to == NULL ? MAX_WAIT\n\t\t: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT));\n\n#ifdef CONFIG_TIMESLICING\n\tif ((_current_cpu->slice_ticks != 0) && (_current_cpu->slice_ticks < ret)) {\n\t\tret = _current_cpu->slice_ticks;\n\t}\n#endif\n\treturn ret;\n}\n\nvoid z_add_timeout(struct _timeout *to, _timeout_func_t fn,\n\t\t   k_timeout_t timeout)\n",
  "violation-line": 71,
  "violation-message": "The long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466
  ],
  "before-code": "#endif /* CONFIG_DYNAMIC_OBJECTS */\n\nstatic unsigned int thread_index_get(struct k_thread *thread)\n{\n\tstruct z_object *ko;\n\n\tko = z_object_find(thread);\n\n\tif (ko == NULL) {\n\t\treturn -1;\n\t}\n\n\treturn ko->data.thread_id;\n}\n\nstatic void unref_check(struct z_object *ko, uintptr_t index)\n{\n\tk_spinlock_key_t key = k_spin_lock(&obj_lock);\n\n\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466
  ],
  "after-code": "#endif /* CONFIG_DYNAMIC_OBJECTS */\n\nstatic int thread_index_get(struct k_thread *thread)\n{\n\tstruct z_object *ko;\n\n\tko = z_object_find(thread);\n\n\tif (ko == NULL) {\n\t\treturn -1;\n\t}\n\n\treturn (int)ko->data.thread_id;\n}\n\nstatic void unref_check(struct z_object *ko, uintptr_t index)\n{\n\tk_spinlock_key_t key = k_spin_lock(&obj_lock);\n\n\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\n",
  "violation-line": 456,
  "violation-message": "The signed char type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476
  ],
  "before-code": "\t}\n\n\treturn ko->data.thread_id;\n}\n\nstatic void unref_check(struct z_object *ko, uintptr_t index)\n{\n\tk_spinlock_key_t key = k_spin_lock(&obj_lock);\n\n\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);\n\n#ifdef CONFIG_DYNAMIC_OBJECTS\n\tstruct dyn_obj *dyn =\n\t\t\tCONTAINER_OF(ko, struct dyn_obj, kobj);\n\n\tif ((ko->flags & K_OBJ_FLAG_ALLOC) == 0U) {\n\t\tgoto out;\n\t}\n\n\tfor (int i = 0; i < CONFIG_MAX_THREAD_BYTES; i++) {\n\t\tif (ko->perms[i] != 0U) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    456,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476
  ],
  "after-code": "\t}\n\n\treturn (int)ko->data.thread_id;\n}\n\nstatic void unref_check(struct z_object *ko, uintptr_t index)\n{\n\tk_spinlock_key_t key = k_spin_lock(&obj_lock);\n\n\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\n#ifdef CONFIG_DYNAMIC_OBJECTS\n\tstruct dyn_obj *dyn =\n\t\t\tCONTAINER_OF(ko, struct dyn_obj, kobj);\n\n\tif ((ko->flags & K_OBJ_FLAG_ALLOC) == 0U) {\n\t\tgoto out;\n\t}\n\n\tfor (int i = 0; i < CONFIG_MAX_THREAD_BYTES; i++) {\n\t\tif (ko->perms[i] != 0U) {\n",
  "violation-line": 466,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524
  ],
  "before-code": "out:\n#endif\n\tk_spin_unlock(&obj_lock, key);\n}\n\nstatic void wordlist_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tstruct perm_ctx *ctx = (struct perm_ctx *)ctx_ptr;\n\n\tif (sys_bitfield_test_bit((mem_addr_t)&ko->perms, ctx->parent_id) &&\n\t\t\t\t  (struct k_thread *)ko->name != ctx->parent) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, ctx->child_id);\n\t}\n}\n\nvoid z_thread_perms_inherit(struct k_thread *parent, struct k_thread *child)\n{\n\tstruct perm_ctx ctx = {\n\t\tthread_index_get(parent),\n\t\tthread_index_get(child),\n\t\tparent\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524
  ],
  "after-code": "out:\n#endif\n\tk_spin_unlock(&obj_lock, key);\n}\n\nstatic void wordlist_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tstruct perm_ctx *ctx = (struct perm_ctx *)ctx_ptr;\n\n\tif (sys_bitfield_test_bit((mem_addr_t)&ko->perms, (unsigned int)ctx->parent_id) != 0 &&\n\t\t\t\t  (struct k_thread *)ko->name != ctx->parent) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)ctx->child_id);\n\t}\n}\n\nvoid z_thread_perms_inherit(struct k_thread *parent, struct k_thread *child)\n{\n\tstruct perm_ctx ctx = {\n\t\tthread_index_get(parent),\n\t\tthread_index_get(child),\n\t\tparent\n",
  "violation-line": 514,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526
  ],
  "before-code": "\tk_spin_unlock(&obj_lock, key);\n}\n\nstatic void wordlist_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tstruct perm_ctx *ctx = (struct perm_ctx *)ctx_ptr;\n\n\tif (sys_bitfield_test_bit((mem_addr_t)&ko->perms, ctx->parent_id) &&\n\t\t\t\t  (struct k_thread *)ko->name != ctx->parent) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, ctx->child_id);\n\t}\n}\n\nvoid z_thread_perms_inherit(struct k_thread *parent, struct k_thread *child)\n{\n\tstruct perm_ctx ctx = {\n\t\tthread_index_get(parent),\n\t\tthread_index_get(child),\n\t\tparent\n\t};\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526
  ],
  "after-code": "\tk_spin_unlock(&obj_lock, key);\n}\n\nstatic void wordlist_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tstruct perm_ctx *ctx = (struct perm_ctx *)ctx_ptr;\n\n\tif (sys_bitfield_test_bit((mem_addr_t)&ko->perms, (unsigned int)ctx->parent_id) != 0 &&\n\t\t\t\t  (struct k_thread *)ko->name != ctx->parent) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)ctx->child_id);\n\t}\n}\n\nvoid z_thread_perms_inherit(struct k_thread *parent, struct k_thread *child)\n{\n\tstruct perm_ctx ctx = {\n\t\tthread_index_get(parent),\n\t\tthread_index_get(child),\n\t\tparent\n\t};\n\n",
  "violation-line": 516,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545
  ],
  "before-code": "\t};\n\n\tif ((ctx.parent_id != -1) && (ctx.child_id != -1)) {\n\t\tz_object_wordlist_foreach(wordlist_cb, &ctx);\n\t}\n}\n\nvoid z_thread_perms_set(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545
  ],
  "after-code": "\t};\n\n\tif ((ctx.parent_id != -1) && (ctx.child_id != -1)) {\n\t\tz_object_wordlist_foreach(wordlist_cb, &ctx);\n\t}\n}\n\nvoid z_thread_perms_set(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n",
  "violation-line": 535,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548
  ],
  "before-code": "\t\tz_object_wordlist_foreach(wordlist_cb, &ctx);\n\t}\n}\n\nvoid z_thread_perms_set(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);\n\t\tunref_check(ko, index);\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548
  ],
  "after-code": "\t\tz_object_wordlist_foreach(wordlist_cb, &ctx);\n\t}\n}\n\nvoid z_thread_perms_set(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t\tunref_check(ko, (uintptr_t)index);\n\t}\n",
  "violation-line": 538,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554
  ],
  "before-code": "\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);\n\t\tunref_check(ko, index);\n\t}\n}\n\nstatic void clear_perms_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tuintptr_t id = (uintptr_t)ctx_ptr;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554
  ],
  "after-code": "\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t\tunref_check(ko, (uintptr_t)index);\n\t}\n}\n\nstatic void clear_perms_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tuintptr_t id = (uintptr_t)ctx_ptr;\n\n",
  "violation-line": 544,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558
  ],
  "before-code": "\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);\n\t\tunref_check(ko, index);\n\t}\n}\n\nstatic void clear_perms_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tuintptr_t id = (uintptr_t)ctx_ptr;\n\n\tunref_check(ko, id);\n}\n\nvoid z_thread_perms_all_clear(struct k_thread *thread)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558
  ],
  "after-code": "\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t\tunref_check(ko, (uintptr_t)index);\n\t}\n}\n\nstatic void clear_perms_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tuintptr_t id = (uintptr_t)ctx_ptr;\n\n\tunref_check(ko, id);\n}\n\nvoid z_thread_perms_all_clear(struct k_thread *thread)\n",
  "violation-line": 547,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558
  ],
  "before-code": "\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);\n\t\tunref_check(ko, index);\n\t}\n}\n\nstatic void clear_perms_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tuintptr_t id = (uintptr_t)ctx_ptr;\n\n\tunref_check(ko, id);\n}\n\nvoid z_thread_perms_all_clear(struct k_thread *thread)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558
  ],
  "after-code": "\t\tsys_bitfield_set_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n}\n\nvoid z_thread_perms_clear(struct z_object *ko, struct k_thread *thread)\n{\n\tint index = thread_index_get(thread);\n\n\tif (index != -1) {\n\t\tsys_bitfield_clear_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t\tunref_check(ko, (uintptr_t)index);\n\t}\n}\n\nstatic void clear_perms_cb(struct z_object *ko, void *ctx_ptr)\n{\n\tuintptr_t id = (uintptr_t)ctx_ptr;\n\n\tunref_check(ko, id);\n}\n\nvoid z_thread_perms_all_clear(struct k_thread *thread)\n",
  "violation-line": 548,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586
  ],
  "before-code": "\nstatic int thread_perms_test(struct z_object *ko)\n{\n\tint index;\n\n\tif ((ko->flags & K_OBJ_FLAG_PUBLIC) != 0U) {\n\t\treturn 1;\n\t}\n\n\tindex = thread_index_get(_current);\n\tif (index != -1) {\n\t\treturn sys_bitfield_test_bit((mem_addr_t)&ko->perms, index);\n\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586
  ],
  "after-code": "\nstatic int thread_perms_test(struct z_object *ko)\n{\n\tint index;\n\n\tif ((ko->flags & K_OBJ_FLAG_PUBLIC) != 0U) {\n\t\treturn 1;\n\t}\n\n\tindex = thread_index_get(_current);\n\tif (index != -1) {\n\t\treturn sys_bitfield_test_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n",
  "violation-line": 576,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588
  ],
  "before-code": "{\n\tint index;\n\n\tif ((ko->flags & K_OBJ_FLAG_PUBLIC) != 0U) {\n\t\treturn 1;\n\t}\n\n\tindex = thread_index_get(_current);\n\tif (index != -1) {\n\t\treturn sys_bitfield_test_bit((mem_addr_t)&ko->perms, index);\n\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588
  ],
  "after-code": "{\n\tint index;\n\n\tif ((ko->flags & K_OBJ_FLAG_PUBLIC) != 0U) {\n\t\treturn 1;\n\t}\n\n\tindex = thread_index_get(_current);\n\tif (index != -1) {\n\t\treturn sys_bitfield_test_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n",
  "violation-line": 578,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595
  ],
  "before-code": "\tindex = thread_index_get(_current);\n\tif (index != -1) {\n\t\treturn sys_bitfield_test_bit((mem_addr_t)&ko->perms, index);\n\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    575,
    576,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595
  ],
  "after-code": "\tindex = thread_index_get(_current);\n\tif (index != -1) {\n\t\treturn sys_bitfield_test_bit((mem_addr_t)&ko->perms, (unsigned int)index);\n\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n",
  "violation-line": 585,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The signed char type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The unsigned long type has been assigned to the object of bool which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The unsigned short type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The int type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The enum z_log_msg2_mode type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The bool type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "before-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str(ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599
  ],
  "after-code": "\t}\n\treturn 0;\n}\n\nstatic void dump_permission_error(struct z_object *ko)\n{\n\tint index = thread_index_get(_current);\n\tLOG_ERR(\"thread %p (%d) does not have permission on %s %p\",\n\t\t_current, index,\n\t\totype_to_str((enum k_objects)ko->type), ko->name);\n\tLOG_HEXDUMP_ERR(&ko->perms, sizeof(ko->perms), \"permission bitmap\");\n}\n\nvoid z_dump_object_error(int retval, const void *obj, struct z_object *ko,\n\t\t\tenum k_objects otype)\n{\n\tswitch (retval) {\n\tcase -EBADF:\n\t\tLOG_ERR(\"%p is not a valid %s\", obj, otype_to_str(otype));\n\t\tif (ko == NULL) {\n\t\t\tLOG_ERR(\"address is not a known kernel object\");\n\t\t} else {\n",
  "violation-line": 589,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665
  ],
  "before-code": "\n\tif (ko != NULL) {\n\t\tko->flags |= K_OBJ_FLAG_PUBLIC;\n\t}\n}\n\nint z_object_validate(struct z_object *ko, enum k_objects otype,\n\t\t       enum _obj_init_check init)\n{\n\tif (unlikely((ko == NULL) ||\n\t\t(otype != K_OBJ_ANY && ko->type != otype))) {\n\t\treturn -EBADF;\n\t}\n\n\t/* Manipulation of any kernel objects by a user thread requires that\n\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665
  ],
  "after-code": "\n\tif (ko != NULL) {\n\t\tko->flags |= K_OBJ_FLAG_PUBLIC;\n\t}\n}\n\nint z_object_validate(struct z_object *ko, enum k_objects otype,\n\t\t       enum _obj_init_check init)\n{\n\tif (unlikely((ko == NULL) ||\n\t\t(otype != K_OBJ_ANY && ko->type != (uint8_t)otype))) {\n\t\treturn -EBADF;\n\t}\n\n\t/* Manipulation of any kernel objects by a user thread requires that\n\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n",
  "violation-line": 655,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673
  ],
  "before-code": "{\n\tif (unlikely((ko == NULL) ||\n\t\t(otype != K_OBJ_ANY && ko->type != otype))) {\n\t\treturn -EBADF;\n\t}\n\n\t/* Manipulation of any kernel objects by a user thread requires that\n\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673
  ],
  "after-code": "{\n\tif (unlikely((ko == NULL) ||\n\t\t(otype != K_OBJ_ANY && ko->type != (uint8_t)otype))) {\n\t\treturn -EBADF;\n\t}\n\n\t/* Manipulation of any kernel objects by a user thread requires that\n\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n",
  "violation-line": 663,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678
  ],
  "before-code": "\n\t/* Manipulation of any kernel objects by a user thread requires that\n\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {\n\t\t\treturn -EADDRINUSE;\n\t\t}\n\t} else {\n\t\t/* _OBJ_INIT_ANY */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678
  ],
  "after-code": "\n\t/* Manipulation of any kernel objects by a user thread requires that\n\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {\n\t\t\treturn -EADDRINUSE;\n\t\t}\n\t} else {\n\t\t/* _OBJ_INIT_ANY */\n",
  "violation-line": 668,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680
  ],
  "before-code": "\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {\n\t\t\treturn -EADDRINUSE;\n\t\t}\n\t} else {\n\t\t/* _OBJ_INIT_ANY */\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680
  ],
  "after-code": "\t * thread be granted access first, even for uninitialized objects\n\t */\n\tif (unlikely(thread_perms_test(ko) == 0)) {\n\t\treturn -EPERM;\n\t}\n\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {\n\t\t\treturn -EADDRINUSE;\n\t\t}\n\t} else {\n\t\t/* _OBJ_INIT_ANY */\n\t}\n\n",
  "violation-line": 670,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681,
    682,
    683,
    684,
    685
  ],
  "before-code": "\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {\n\t\t\treturn -EADDRINUSE;\n\t\t}\n\t} else {\n\t\t/* _OBJ_INIT_ANY */\n\t}\n\n\treturn 0;\n}\n\nvoid z_object_init(const void *obj)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681,
    682,
    683,
    684,
    685
  ],
  "after-code": "\n\t/* Initialization state checks. _OBJ_INIT_ANY, we don't care */\n\tif (likely(init == _OBJ_INIT_TRUE)) {\n\t\t/* Object MUST be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {\n\t\t\treturn -EINVAL;\n\t\t}\n\t} else if (init == _OBJ_INIT_FALSE) { /* _OBJ_INIT_FALSE case */\n\t\t/* Object MUST NOT be initialized */\n\t\tif (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {\n\t\t\treturn -EADDRINUSE;\n\t\t}\n\t} else {\n\t\t/* _OBJ_INIT_ANY */\n\t}\n\n\treturn 0;\n}\n\nvoid z_object_init(const void *obj)\n{\n",
  "violation-line": 675,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/userspace.c",
  "before-lines": [
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732,
    733,
    734,
    735,
    736,
    737,
    738,
    739,
    740,
    741
  ],
  "before-code": "{\n\tstruct z_object *ko;\n\n\t/* See comments in z_object_init() */\n\tko = z_object_find(obj);\n\tif (ko == NULL) {\n\t\treturn;\n\t}\n\n\tko->flags &= ~K_OBJ_FLAG_INITIALIZED;\n}\n\n/*\n * Copy to/from helper functions used in syscall handlers\n */\nvoid *z_user_alloc_from_copy(const void *src, size_t size)\n{\n\tvoid *dst = NULL;\n\n\t/* Does the caller in user mode have access to read this memory? */\n\tif (Z_SYSCALL_MEMORY_READ(src, size)) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/userspace.c",
  "after-lines": [
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    732,
    733,
    734,
    735,
    736,
    737,
    738,
    739,
    740,
    741
  ],
  "after-code": "{\n\tstruct z_object *ko;\n\n\t/* See comments in z_object_init() */\n\tko = z_object_find(obj);\n\tif (ko == NULL) {\n\t\treturn;\n\t}\n\n\tko->flags &= (uint8_t)~K_OBJ_FLAG_INITIALIZED;\n}\n\n/*\n * Copy to/from helper functions used in syscall handlers\n */\nvoid *z_user_alloc_from_copy(const void *src, size_t size)\n{\n\tvoid *dst = NULL;\n\n\t/* Does the caller in user mode have access to read this memory? */\n\tif (Z_SYSCALL_MEMORY_READ(src, size)) {\n",
  "violation-line": 731,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/work.c",
  "before-lines": [
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34
  ],
  "before-code": "#include <wait_q.h>\n#include <spinlock.h>\n#include <errno.h>\n#include <ksched.h>\n#include <sys/printk.h>\n\nstatic inline void flag_clear(uint32_t *flagp,\n\t\t\t      uint32_t bit)\n{\n\t*flagp &= ~BIT(bit);\n}\n\nstatic inline void flag_set(uint32_t *flagp,\n\t\t\t    uint32_t bit)\n{\n\t*flagp |= BIT(bit);\n}\n\nstatic inline bool flag_test(const uint32_t *flagp,\n\t\t\t     uint32_t bit)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/work.c",
  "after-lines": [
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34
  ],
  "after-code": "#include <wait_q.h>\n#include <spinlock.h>\n#include <errno.h>\n#include <ksched.h>\n#include <sys/printk.h>\n\nstatic inline void flag_clear(uint32_t *flagp,\n\t\t\t      uint32_t bit)\n{\n\t*flagp &= ~BIT32(bit);\n}\n\nstatic inline void flag_set(uint32_t *flagp,\n\t\t\t    uint32_t bit)\n{\n\t*flagp |= BIT32(bit);\n}\n\nstatic inline bool flag_test(const uint32_t *flagp,\n\t\t\t     uint32_t bit)\n{\n",
  "violation-line": 24,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/work.c",
  "before-lines": [
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40
  ],
  "before-code": "static inline void flag_clear(uint32_t *flagp,\n\t\t\t      uint32_t bit)\n{\n\t*flagp &= ~BIT(bit);\n}\n\nstatic inline void flag_set(uint32_t *flagp,\n\t\t\t    uint32_t bit)\n{\n\t*flagp |= BIT(bit);\n}\n\nstatic inline bool flag_test(const uint32_t *flagp,\n\t\t\t     uint32_t bit)\n{\n\treturn (*flagp & BIT(bit)) != 0U;\n}\n\nstatic inline bool flag_test_and_clear(uint32_t *flagp,\n\t\t\t\t       int bit)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/work.c",
  "after-lines": [
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40
  ],
  "after-code": "static inline void flag_clear(uint32_t *flagp,\n\t\t\t      uint32_t bit)\n{\n\t*flagp &= ~BIT32(bit);\n}\n\nstatic inline void flag_set(uint32_t *flagp,\n\t\t\t    uint32_t bit)\n{\n\t*flagp |= BIT32(bit);\n}\n\nstatic inline bool flag_test(const uint32_t *flagp,\n\t\t\t     uint32_t bit)\n{\n\treturn (*flagp & BIT32(bit)) != 0U;\n}\n\nstatic inline bool flag_test_and_clear(uint32_t *flagp,\n\t\t\t\t       uint32_t bit)\n{\n",
  "violation-line": 30,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/work.c",
  "before-lines": [
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52
  ],
  "before-code": "static inline bool flag_test(const uint32_t *flagp,\n\t\t\t     uint32_t bit)\n{\n\treturn (*flagp & BIT(bit)) != 0U;\n}\n\nstatic inline bool flag_test_and_clear(uint32_t *flagp,\n\t\t\t\t       int bit)\n{\n\tbool ret = flag_test(flagp, bit);\n\n\tflag_clear(flagp, bit);\n\n\treturn ret;\n}\n\nstatic inline void flags_set(uint32_t *flagp,\n\t\t\t     uint32_t flags)\n{\n\t*flagp = flags;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/work.c",
  "after-lines": [
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52
  ],
  "after-code": "static inline bool flag_test(const uint32_t *flagp,\n\t\t\t     uint32_t bit)\n{\n\treturn (*flagp & BIT32(bit)) != 0U;\n}\n\nstatic inline bool flag_test_and_clear(uint32_t *flagp,\n\t\t\t\t       uint32_t bit)\n{\n\tbool ret = flag_test(flagp, bit);\n\n\tflag_clear(flagp, bit);\n\n\treturn ret;\n}\n\nstatic inline void flags_set(uint32_t *flagp,\n\t\t\t     uint32_t flags)\n{\n\t*flagp = flags;\n}\n",
  "violation-line": 42,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/work.c",
  "before-lines": [
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54
  ],
  "before-code": "{\n\treturn (*flagp & BIT(bit)) != 0U;\n}\n\nstatic inline bool flag_test_and_clear(uint32_t *flagp,\n\t\t\t\t       int bit)\n{\n\tbool ret = flag_test(flagp, bit);\n\n\tflag_clear(flagp, bit);\n\n\treturn ret;\n}\n\nstatic inline void flags_set(uint32_t *flagp,\n\t\t\t     uint32_t flags)\n{\n\t*flagp = flags;\n}\n\nstatic inline uint32_t flags_get(const uint32_t *flagp)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/work.c",
  "after-lines": [
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54
  ],
  "after-code": "{\n\treturn (*flagp & BIT32(bit)) != 0U;\n}\n\nstatic inline bool flag_test_and_clear(uint32_t *flagp,\n\t\t\t\t       uint32_t bit)\n{\n\tbool ret = flag_test(flagp, bit);\n\n\tflag_clear(flagp, bit);\n\n\treturn ret;\n}\n\nstatic inline void flags_set(uint32_t *flagp,\n\t\t\t     uint32_t flags)\n{\n\t*flagp = flags;\n}\n\nstatic inline uint32_t flags_get(const uint32_t *flagp)\n",
  "violation-line": 44,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/kernel/work.c",
  "before-lines": [
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157
  ],
  "before-code": "\t__ASSERT_NO_MSG(handler != NULL);\n\n\t*work = (struct k_work)Z_WORK_INITIALIZER(handler);\n\n\tSYS_PORT_TRACING_OBJ_INIT(k_work, work);\n}\n\nstatic inline int work_busy_get_locked(const struct k_work *work)\n{\n\treturn flags_get(&work->flags) & K_WORK_MASK;\n}\n\nint k_work_busy_get(const struct k_work *work)\n{\n\tk_spinlock_key_t key = k_spin_lock(&lock);\n\tint ret = work_busy_get_locked(work);\n\n\tk_spin_unlock(&lock, key);\n\n\treturn ret;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/kernel/work.c",
  "after-lines": [
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157
  ],
  "after-code": "\t__ASSERT_NO_MSG(handler != NULL);\n\n\t*work = (struct k_work)Z_WORK_INITIALIZER(handler);\n\n\tSYS_PORT_TRACING_OBJ_INIT(k_work, work);\n}\n\nstatic inline unsigned int work_busy_get_locked(const struct k_work *work)\n{\n\treturn flags_get(&work->flags) & K_WORK_MASK;\n}\n\nunsigned int k_work_busy_get(const struct k_work *work)\n{\n\tk_spinlock_key_t key = k_spin_lock(&lock);\n\tunsigned int ret = work_busy_get_locked(work);\n\n\tk_spin_unlock(&lock, key);\n\n\treturn ret;\n}\n",
  "violation-line": 147,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/atoi.c",
  "before-lines": [
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46
  ],
  "before-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint atoi(const char *s)\n{\n\tint n = 0;\n\tint neg = 0;\n\n\twhile (isspace((unsigned char)*s)) {\n\t\ts++;\n\t}\n\tswitch (*s) {\n\tcase '-':\n\t\tneg = 1;\n\t\ts++;\n\t\tbreak;\t/* artifact to quiet coverity warning */\n\tcase '+':\n\t\ts++;\n\tdefault:\n\t\t/* Add an empty default with break, this is a defensive programming.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/atoi.c",
  "after-lines": [
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47
  ],
  "after-code": "#include <stdbool.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint atoi(const char *s)\n{\n\tint n = 0;\n\tbool neg = false;\n\n\twhile (isspace((int)(unsigned char)*s)) {\n\t\ts++;\n\t}\n\tswitch (*s) {\n\tcase '-':\n\t\tneg = true;\n\t\ts++;\n\t\tbreak;\t/* artifact to quiet coverity warning */\n\tcase '+':\n\t\ts++;\n\tdefault:\n\t\t/* Add an empty default with break, this is a defensive programming.\n",
  "violation-line": 36,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/atoi.c",
  "before-lines": [
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57
  ],
  "before-code": "\t\ts++;\n\tdefault:\n\t\t/* Add an empty default with break, this is a defensive programming.\n\t\t * Static analysis tool won't raise a violation if default is empty,\n\t\t * but has that comment.\n\t\t */\n\t\tbreak;\n\t}\n\t/* Compute n as a negative number to avoid overflow on INT_MIN */\n\twhile (isdigit((unsigned char)*s)) {\n\t\tn = 10*n - (*s++ - '0');\n\t}\n\treturn neg ? n : -n;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/atoi.c",
  "after-lines": [
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58
  ],
  "after-code": "\t\ts++;\n\tdefault:\n\t\t/* Add an empty default with break, this is a defensive programming.\n\t\t * Static analysis tool won't raise a violation if default is empty,\n\t\t * but has that comment.\n\t\t */\n\t\tbreak;\n\t}\n\t/* Compute n as a negative number to avoid overflow on INT_MIN */\n\twhile (isdigit((int)(unsigned char)*s)) {\n\t\tn = 10*n - (*s++ - '0');\n\t}\n\treturn neg ? n : -n;\n}\n",
  "violation-line": 54,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69
  ],
  "before-code": "\tregister unsigned long cutoff;\n\tregister int neg = 0, any, cutlim;\n\n\t/*\n\t * Skip white space and pick up leading +/- sign if any.\n\t * If base is 0, allow 0x for hex and 0 for octal, else\n\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71
  ],
  "after-code": "\tregister int any, cutlim;\n\tregister bool neg = false;\n\n\t/*\n\t * Skip white space and pick up leading +/- sign if any.\n\t * If base is 0, allow 0x for hex and 0 for octal, else\n\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n",
  "violation-line": 59,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70
  ],
  "before-code": "\tregister int neg = 0, any, cutlim;\n\n\t/*\n\t * Skip white space and pick up leading +/- sign if any.\n\t * If base is 0, allow 0x for hex and 0 for octal, else\n\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72
  ],
  "after-code": "\tregister bool neg = false;\n\n\t/*\n\t * Skip white space and pick up leading +/- sign if any.\n\t * If base is 0, allow 0x for hex and 0 for octal, else\n\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n",
  "violation-line": 60,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73
  ],
  "before-code": "\t * Skip white space and pick up leading +/- sign if any.\n\t * If base is 0, allow 0x for hex and 0 for octal, else\n\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75
  ],
  "after-code": "\t * Skip white space and pick up leading +/- sign if any.\n\t * If base is 0, allow 0x for hex and 0 for octal, else\n\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n",
  "violation-line": 63,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75
  ],
  "before-code": "\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77
  ],
  "after-code": "\t * assume decimal; if base is already 16, allow 0x.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n",
  "violation-line": 65,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80
  ],
  "before-code": "\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\t/*\n\t * Compute the cutoff value between legal numbers and illegal\n\t * numbers.  That is the largest legal value, divided by the\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82
  ],
  "after-code": "\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\t/*\n\t * Compute the cutoff value between legal numbers and illegal\n\t * numbers.  That is the largest legal value, divided by the\n",
  "violation-line": 70,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107
  ],
  "before-code": "\t * [-2147483648..2147483647] and the input base is 10,\n\t * cutoff will be set to 214748364 and cutlim to either\n\t * 7 (neg==0) or 8 (neg==1), meaning that if we have accumulated\n\t * a value > 214748364, or equal but the next digit is > 7 (or 8),\n\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;\n\tcutlim = cutoff % (unsigned long)base;\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109
  ],
  "after-code": "\t * [-2147483648..2147483647] and the input base is 10,\n\t * cutoff will be set to 214748364 and cutlim to either\n\t * 7 (neg==0) or 8 (neg==1), meaning that if we have accumulated\n\t * a value > 214748364, or equal but the next digit is > 7 (or 8),\n\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? (unsigned long)(-(LONG_MIN + 1L)) + 1UL : (unsigned long)LONG_MAX;\n\tcutlim = (int)(unsigned long)(cutoff % (unsigned long)base);\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n",
  "violation-line": 97,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109
  ],
  "before-code": "\t * a value > 214748364, or equal but the next digit is > 7 (or 8),\n\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;\n\tcutlim = cutoff % (unsigned long)base;\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111
  ],
  "after-code": "\t * a value > 214748364, or equal but the next digit is > 7 (or 8),\n\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? (unsigned long)(-(LONG_MIN + 1L)) + 1UL : (unsigned long)LONG_MAX;\n\tcutlim = (int)(unsigned long)(cutoff % (unsigned long)base);\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n",
  "violation-line": 99,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113
  ],
  "before-code": "\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;\n\tcutlim = cutoff % (unsigned long)base;\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117
  ],
  "after-code": "\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? (unsigned long)(-(LONG_MIN + 1L)) + 1UL : (unsigned long)LONG_MAX;\n\tcutlim = (int)(unsigned long)(cutoff % (unsigned long)base);\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n",
  "violation-line": 102,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113
  ],
  "before-code": "\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;\n\tcutlim = cutoff % (unsigned long)base;\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117
  ],
  "after-code": "\t * the number is too big, and we will return a range error.\n\t *\n\t * Set any if any `digits' consumed; make it negative to indicate\n\t * overflow.\n\t */\n\tcutoff = neg ? (unsigned long)(-(LONG_MIN + 1L)) + 1UL : (unsigned long)LONG_MAX;\n\tcutlim = (int)(unsigned long)(cutoff % (unsigned long)base);\n\tcutoff /= (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n",
  "violation-line": 103,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125
  ],
  "before-code": "\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n\t\t\tacc += c;\n\t\t}\n\t}\n\n\tif (any < 0) {\n\t\tacc = neg ? LONG_MIN : LONG_MAX;\n\t\terrno = ERANGE;\n\t} else if (neg != 0) {\n\t\tacc = -acc;\n\t}\n\n\tif (endptr != NULL) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129
  ],
  "after-code": "\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n\t\t\tacc += (unsigned long)digit;\n\t\t}\n\t}\n\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any != 0 ? s - 1 : nptr);\n\t}\n\tif (any < 0) {\n\t\terrno = ERANGE;\n\t\treturn neg ? LONG_MIN : LONG_MAX;\n\t}\n\tif (neg) {\n",
  "violation-line": 114,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125
  ],
  "before-code": "\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n\t\t\tacc += c;\n\t\t}\n\t}\n\n\tif (any < 0) {\n\t\tacc = neg ? LONG_MIN : LONG_MAX;\n\t\terrno = ERANGE;\n\t} else if (neg != 0) {\n\t\tacc = -acc;\n\t}\n\n\tif (endptr != NULL) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129
  ],
  "after-code": "\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n\t\t\tacc += (unsigned long)digit;\n\t\t}\n\t}\n\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any != 0 ? s - 1 : nptr);\n\t}\n\tif (any < 0) {\n\t\terrno = ERANGE;\n\t\treturn neg ? LONG_MIN : LONG_MAX;\n\t}\n\tif (neg) {\n",
  "violation-line": 115,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129
  ],
  "before-code": "\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n\t\t\tacc += c;\n\t\t}\n\t}\n\n\tif (any < 0) {\n\t\tacc = neg ? LONG_MIN : LONG_MAX;\n\t\terrno = ERANGE;\n\t} else if (neg != 0) {\n\t\tacc = -acc;\n\t}\n\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any ? s - 1 : nptr);\n\t}\n\treturn acc;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134
  ],
  "after-code": "\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n\t\t\tacc += (unsigned long)digit;\n\t\t}\n\t}\n\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any != 0 ? s - 1 : nptr);\n\t}\n\tif (any < 0) {\n\t\terrno = ERANGE;\n\t\treturn neg ? LONG_MIN : LONG_MAX;\n\t}\n\tif (neg) {\n\t\treturn -(long)acc;\n\t}\n\n\treturn (long)acc;\n}\n",
  "violation-line": 120,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "before-lines": [
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129
  ],
  "before-code": "\t\tacc = neg ? LONG_MIN : LONG_MAX;\n\t\terrno = ERANGE;\n\t} else if (neg != 0) {\n\t\tacc = -acc;\n\t}\n\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any ? s - 1 : nptr);\n\t}\n\treturn acc;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtol.c",
  "after-lines": [
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134
  ],
  "after-code": "\t\t*endptr = (char *)(any != 0 ? s - 1 : nptr);\n\t}\n\tif (any < 0) {\n\t\terrno = ERANGE;\n\t\treturn neg ? LONG_MIN : LONG_MAX;\n\t}\n\tif (neg) {\n\t\treturn -(long)acc;\n\t}\n\n\treturn (long)acc;\n}\n",
  "violation-line": 129,
  "violation-message": "The unsigned long type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68
  ],
  "before-code": "\tregister unsigned long acc;\n\tregister int c;\n\tregister unsigned long cutoff;\n\tregister int neg = 0, any, cutlim;\n\n\t/*\n\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70
  ],
  "after-code": "\tregister char c;\n\tregister unsigned long cutoff;\n\tregister int any, cutlim;\n\tregister bool neg = false;\n\n\t/*\n\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n",
  "violation-line": 58,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69
  ],
  "before-code": "\tregister int c;\n\tregister unsigned long cutoff;\n\tregister int neg = 0, any, cutlim;\n\n\t/*\n\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71
  ],
  "after-code": "\tregister unsigned long cutoff;\n\tregister int any, cutlim;\n\tregister bool neg = false;\n\n\t/*\n\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n",
  "violation-line": 59,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72
  ],
  "before-code": "\n\t/*\n\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74
  ],
  "after-code": "\n\t/*\n\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n",
  "violation-line": 62,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74
  ],
  "before-code": "\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((unsigned char)c));\n\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76
  ],
  "after-code": "\t * See strtol for comments as to the logic used.\n\t */\n\tdo {\n\t\tc = *s++;\n\t} while (isspace((int)(unsigned char)c));\n\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n",
  "violation-line": 64,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79
  ],
  "before-code": "\tif (c == '-') {\n\t\tneg = 1;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = (unsigned long)ULONG_MAX / (unsigned long)base;\n\tcutlim = (unsigned long)ULONG_MAX % (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81
  ],
  "after-code": "\tif (c == '-') {\n\t\tneg = true;\n\t\tc = *s++;\n\t} else if (c == '+') {\n\t\tc = *s++;\n\t}\n\n\tif ((base == 0 || base == 16) &&\n\t    c == '0' && (*s == 'x' || *s == 'X')) {\n\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = ULONG_MAX / (unsigned long)base;\n\tcutlim = (int)(unsigned long)(ULONG_MAX % (unsigned long)base);\n\tfor (acc = 0, any = 0;; c = *s++) {\n",
  "violation-line": 69,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89
  ],
  "before-code": "\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = (unsigned long)ULONG_MAX / (unsigned long)base;\n\tcutlim = (unsigned long)ULONG_MAX % (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91
  ],
  "after-code": "\t\tc = s[1];\n\t\ts += 2;\n\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = ULONG_MAX / (unsigned long)base;\n\tcutlim = (int)(unsigned long)(ULONG_MAX % (unsigned long)base);\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n",
  "violation-line": 79,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90
  ],
  "before-code": "\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = (unsigned long)ULONG_MAX / (unsigned long)base;\n\tcutlim = (unsigned long)ULONG_MAX % (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92
  ],
  "after-code": "\t\tbase = 16;\n\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = ULONG_MAX / (unsigned long)base;\n\tcutlim = (int)(unsigned long)(ULONG_MAX % (unsigned long)base);\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n",
  "violation-line": 80,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94
  ],
  "before-code": "\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = (unsigned long)ULONG_MAX / (unsigned long)base;\n\tcutlim = (unsigned long)ULONG_MAX % (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98
  ],
  "after-code": "\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = ULONG_MAX / (unsigned long)base;\n\tcutlim = (int)(unsigned long)(ULONG_MAX % (unsigned long)base);\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n",
  "violation-line": 83,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94
  ],
  "before-code": "\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = (unsigned long)ULONG_MAX / (unsigned long)base;\n\tcutlim = (unsigned long)ULONG_MAX % (unsigned long)base;\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tif (isdigit((unsigned char)c)) {\n\t\t\tc = (char)c - '0';\n\t\t} else if (isalpha((unsigned char)c)) {\n\t\t\tc = (char)c - (isupper(c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98
  ],
  "after-code": "\t}\n\n\tif (base == 0) {\n\t\tbase = c == '0' ? 8 : 10;\n\t}\n\n\tcutoff = ULONG_MAX / (unsigned long)base;\n\tcutlim = (int)(unsigned long)(ULONG_MAX % (unsigned long)base);\n\tfor (acc = 0, any = 0;; c = *s++) {\n\t\tint digit;\n\n\t\tif (isdigit((int)(unsigned char)c)) {\n\t\t\tdigit = c - '0';\n\t\t} else if (isalpha((int)(unsigned char)c)) {\n\t\t\tdigit = c - (isupper((int)(unsigned char)c) ? 'A' : 'a') + 10;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n",
  "violation-line": 84,
  "violation-message": "The char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106
  ],
  "before-code": "\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n\t\t\tacc += c;\n\t\t}\n\t}\n\tif (any < 0) {\n\t\tacc = ULONG_MAX;\n\t\terrno = ERANGE;\n\t} else if (neg != 0) {\n\t\tacc = -acc;\n\t}\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any ? s - 1 : nptr);\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110
  ],
  "after-code": "\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n\t\t\tacc += (unsigned long)digit;\n\t\t}\n\t}\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any != 0 ? s - 1 : nptr);\n\t}\n\tif (any < 0) {\n\t\terrno = ERANGE;\n\t\treturn ULONG_MAX;\n\t}\n\tif (neg) {\n\t\treturn 0UL - acc;\n",
  "violation-line": 95,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "before-lines": [
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106
  ],
  "before-code": "\t\t\tbreak;\n\t\t}\n\t\tif (c >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= base;\n\t\t\tacc += c;\n\t\t}\n\t}\n\tif (any < 0) {\n\t\tacc = ULONG_MAX;\n\t\terrno = ERANGE;\n\t} else if (neg != 0) {\n\t\tacc = -acc;\n\t}\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any ? s - 1 : nptr);\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdlib/strtoul.c",
  "after-lines": [
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110
  ],
  "after-code": "\t\t\tbreak;\n\t\t}\n\t\tif (digit >= base) {\n\t\t\tbreak;\n\t\t}\n\t\tif (any < 0 || acc > cutoff || (acc == cutoff && digit > cutlim)) {\n\t\t\tany = -1;\n\t\t} else {\n\t\t\tany = 1;\n\t\t\tacc *= (unsigned long)base;\n\t\t\tacc += (unsigned long)digit;\n\t\t}\n\t}\n\tif (endptr != NULL) {\n\t\t*endptr = (char *)(any != 0 ? s - 1 : nptr);\n\t}\n\tif (any < 0) {\n\t\terrno = ERANGE;\n\t\treturn ULONG_MAX;\n\t}\n\tif (neg) {\n\t\treturn 0UL - acc;\n",
  "violation-line": 96,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdout/sprintf.c",
  "before-lines": [
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31
  ],
  "before-code": "\nstruct emitter {\n\tchar *ptr;\n\tint len;\n};\n\nstatic int sprintf_out(int c, struct emitter *p)\n{\n\tif (p->len > 1) { /* need to reserve a byte for EOS */\n\t\t*(p->ptr) = c;\n\t\tp->ptr += 1;\n\t\tp->len -= 1;\n\t}\n\treturn 0; /* indicate keep going so we get the total count */\n}\n\nint snprintf(char *_MLIBC_RESTRICT str, size_t len,\n\t     const char *_MLIBC_RESTRICT format, ...)\n{\n\tva_list vargs;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdout/sprintf.c",
  "after-lines": [
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31
  ],
  "after-code": "\nstruct emitter {\n\tchar *ptr;\n\tint len;\n};\n\nstatic int sprintf_out(int c, struct emitter *p)\n{\n\tif (p->len > 1) { /* need to reserve a byte for EOS */\n\t\t*(p->ptr) = (char)c;\n\t\tp->ptr += 1;\n\t\tp->len -= 1;\n\t}\n\treturn 0; /* indicate keep going so we get the total count */\n}\n\nint snprintf(char *_MLIBC_RESTRICT str, size_t len,\n\t     const char *_MLIBC_RESTRICT format, ...)\n{\n\tva_list vargs;\n\n",
  "violation-line": 21,
  "violation-message": "The int type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdout/stdout_console.c",
  "before-lines": [
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61
  ],
  "before-code": "#endif\n\nint fputc(int c, FILE *stream)\n{\n\treturn zephyr_fputc(c, stream);\n}\n\nint fputs(const char *_MLIBC_RESTRICT s, FILE *_MLIBC_RESTRICT stream)\n{\n\tint len = strlen(s);\n\tint ret;\n\n\tret = fwrite(s, 1, len, stream);\n\n\treturn len == ret ? 0 : EOF;\n}\n\nsize_t z_impl_zephyr_fwrite(const void *_MLIBC_RESTRICT ptr, size_t size,\n\t\t\t    size_t nitems, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t i;\n\tsize_t j;\n\tconst unsigned char *p;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdout/stdout_console.c",
  "after-lines": [
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59
  ],
  "after-code": "#endif\n\nint fputc(int c, FILE *stream)\n{\n\treturn zephyr_fputc(c, stream);\n}\n\nint fputs(const char *_MLIBC_RESTRICT s, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t len = strlen(s);\n\tsize_t ret = fwrite(s, 1, len, stream);\n\n\treturn len == ret ? 0 : EOF;\n}\n\nsize_t z_impl_zephyr_fwrite(const void *_MLIBC_RESTRICT ptr, size_t size,\n\t\t\t    size_t nitems, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t i;\n\tsize_t j;\n\tconst unsigned char *p;\n\n",
  "violation-line": 48,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdout/stdout_console.c",
  "before-lines": [
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61
  ],
  "before-code": "#endif\n\nint fputc(int c, FILE *stream)\n{\n\treturn zephyr_fputc(c, stream);\n}\n\nint fputs(const char *_MLIBC_RESTRICT s, FILE *_MLIBC_RESTRICT stream)\n{\n\tint len = strlen(s);\n\tint ret;\n\n\tret = fwrite(s, 1, len, stream);\n\n\treturn len == ret ? 0 : EOF;\n}\n\nsize_t z_impl_zephyr_fwrite(const void *_MLIBC_RESTRICT ptr, size_t size,\n\t\t\t    size_t nitems, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t i;\n\tsize_t j;\n\tconst unsigned char *p;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdout/stdout_console.c",
  "after-lines": [
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59
  ],
  "after-code": "#endif\n\nint fputc(int c, FILE *stream)\n{\n\treturn zephyr_fputc(c, stream);\n}\n\nint fputs(const char *_MLIBC_RESTRICT s, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t len = strlen(s);\n\tsize_t ret = fwrite(s, 1, len, stream);\n\n\treturn len == ret ? 0 : EOF;\n}\n\nsize_t z_impl_zephyr_fwrite(const void *_MLIBC_RESTRICT ptr, size_t size,\n\t\t\t    size_t nitems, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t i;\n\tsize_t j;\n\tconst unsigned char *p;\n\n",
  "violation-line": 51,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/stdout/stdout_console.c",
  "before-lines": [
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61
  ],
  "before-code": "#endif\n\nint fputc(int c, FILE *stream)\n{\n\treturn zephyr_fputc(c, stream);\n}\n\nint fputs(const char *_MLIBC_RESTRICT s, FILE *_MLIBC_RESTRICT stream)\n{\n\tint len = strlen(s);\n\tint ret;\n\n\tret = fwrite(s, 1, len, stream);\n\n\treturn len == ret ? 0 : EOF;\n}\n\nsize_t z_impl_zephyr_fwrite(const void *_MLIBC_RESTRICT ptr, size_t size,\n\t\t\t    size_t nitems, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t i;\n\tsize_t j;\n\tconst unsigned char *p;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/stdout/stdout_console.c",
  "after-lines": [
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59
  ],
  "after-code": "#endif\n\nint fputc(int c, FILE *stream)\n{\n\treturn zephyr_fputc(c, stream);\n}\n\nint fputs(const char *_MLIBC_RESTRICT s, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t len = strlen(s);\n\tsize_t ret = fwrite(s, 1, len, stream);\n\n\treturn len == ret ? 0 : EOF;\n}\n\nsize_t z_impl_zephyr_fwrite(const void *_MLIBC_RESTRICT ptr, size_t size,\n\t\t\t    size_t nitems, FILE *_MLIBC_RESTRICT stream)\n{\n\tsize_t i;\n\tsize_t j;\n\tconst unsigned char *p;\n\n",
  "violation-line": 51,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "before-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27
  ],
  "before-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tunsigned char c = 1U;\n\n\tfor (; c && n != 0; n--) {\n\t\tunsigned char lower1, lower2;\n\n\t\tc = *s1++;\n\t\tlower1 = tolower(c);\n\t\tlower2 = tolower((unsigned char)*s2++);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) - (lower1 < lower2);\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "after-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26
  ],
  "after-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tchar c1 = ' ';\n\n\tfor (; (c1 != '\\0') && (n != 0); n--) {\n\t\tc1 = *s1++;\n\t\tchar c2 = *s2++;\n\t\tint lower1 = tolower((int)(unsigned char)c1);\n\t\tint lower2 = tolower((int)(unsigned char)c2);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) ? 1 : -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 18,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "before-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27
  ],
  "before-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tunsigned char c = 1U;\n\n\tfor (; c && n != 0; n--) {\n\t\tunsigned char lower1, lower2;\n\n\t\tc = *s1++;\n\t\tlower1 = tolower(c);\n\t\tlower2 = tolower((unsigned char)*s2++);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) - (lower1 < lower2);\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "after-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26
  ],
  "after-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tchar c1 = ' ';\n\n\tfor (; (c1 != '\\0') && (n != 0); n--) {\n\t\tc1 = *s1++;\n\t\tchar c2 = *s2++;\n\t\tint lower1 = tolower((int)(unsigned char)c1);\n\t\tint lower2 = tolower((int)(unsigned char)c2);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) ? 1 : -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 19,
  "violation-message": "The int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "before-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27
  ],
  "before-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tunsigned char c = 1U;\n\n\tfor (; c && n != 0; n--) {\n\t\tunsigned char lower1, lower2;\n\n\t\tc = *s1++;\n\t\tlower1 = tolower(c);\n\t\tlower2 = tolower((unsigned char)*s2++);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) - (lower1 < lower2);\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "after-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26
  ],
  "after-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tchar c1 = ' ';\n\n\tfor (; (c1 != '\\0') && (n != 0); n--) {\n\t\tc1 = *s1++;\n\t\tchar c2 = *s2++;\n\t\tint lower1 = tolower((int)(unsigned char)c1);\n\t\tint lower2 = tolower((int)(unsigned char)c2);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) ? 1 : -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 19,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "before-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27
  ],
  "before-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tunsigned char c = 1U;\n\n\tfor (; c && n != 0; n--) {\n\t\tunsigned char lower1, lower2;\n\n\t\tc = *s1++;\n\t\tlower1 = tolower(c);\n\t\tlower2 = tolower((unsigned char)*s2++);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) - (lower1 < lower2);\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "after-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26
  ],
  "after-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tchar c1 = ' ';\n\n\tfor (; (c1 != '\\0') && (n != 0); n--) {\n\t\tc1 = *s1++;\n\t\tchar c2 = *s2++;\n\t\tint lower1 = tolower((int)(unsigned char)c1);\n\t\tint lower2 = tolower((int)(unsigned char)c2);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) ? 1 : -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 20,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "before-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27
  ],
  "before-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tunsigned char c = 1U;\n\n\tfor (; c && n != 0; n--) {\n\t\tunsigned char lower1, lower2;\n\n\t\tc = *s1++;\n\t\tlower1 = tolower(c);\n\t\tlower2 = tolower((unsigned char)*s2++);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) - (lower1 < lower2);\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strncasecmp.c",
  "after-lines": [
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26
  ],
  "after-code": "\n#include <stdlib.h>\n#include <ctype.h>\n\nint\nstrncasecmp(const char *s1, const char *s2, size_t n)\n{\n\tchar c1 = ' ';\n\n\tfor (; (c1 != '\\0') && (n != 0); n--) {\n\t\tc1 = *s1++;\n\t\tchar c2 = *s2++;\n\t\tint lower1 = tolower((int)(unsigned char)c1);\n\t\tint lower2 = tolower((int)(unsigned char)c2);\n\n\t\tif (lower1 != lower2) {\n\t\t\treturn (lower1 > lower2) ? 1 : -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 20,
  "violation-message": "The int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strspn.c",
  "before-lines": [
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29
  ],
  "before-code": "size_t strspn(const char *s,\n\t      const char *accept)\n{\n\tconst char *ins = s;\n\n\twhile ((*s != '\\0') && (strchr(accept, *s) != NULL)) {\n\t\t++s;\n\t}\n\n\treturn s - ins;\n}\n\nsize_t strcspn(const char *s,\n\t       const char *reject)\n{\n\tconst char *ins = s;\n\n\twhile ((*s != '\\0') && (strchr(reject, *s) == NULL)) {\n\t\t++s;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strspn.c",
  "after-lines": [
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29
  ],
  "after-code": "size_t strspn(const char *s,\n\t      const char *accept)\n{\n\tconst char *ins = s;\n\n\twhile ((*s != '\\0') && (strchr(accept, *s) != NULL)) {\n\t\t++s;\n\t}\n\n\treturn (size_t)(s - ins);\n}\n\nsize_t strcspn(const char *s,\n\t       const char *reject)\n{\n\tconst char *ins = s;\n\n\twhile ((*s != '\\0') && (strchr(reject, *s) == NULL)) {\n\t\t++s;\n\t}\n\n",
  "violation-line": 19,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/string/strspn.c",
  "before-lines": [
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31
  ],
  "before-code": "size_t strcspn(const char *s,\n\t       const char *reject)\n{\n\tconst char *ins = s;\n\n\twhile ((*s != '\\0') && (strchr(reject, *s) == NULL)) {\n\t\t++s;\n\t}\n\n\treturn s - ins;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/string/strspn.c",
  "after-lines": [
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31
  ],
  "after-code": "size_t strcspn(const char *s,\n\t       const char *reject)\n{\n\tconst char *ins = s;\n\n\twhile ((*s != '\\0') && (strchr(reject, *s) == NULL)) {\n\t\t++s;\n\t}\n\n\treturn (size_t)(s - ins);\n}\n",
  "violation-line": 31,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47
  ],
  "before-code": " *\n * @return the time information for corresponding to the provided\n * instant.\n *\n * @see http://howardhinnant.github.io/date_algorithms.html#civil_from_days\n */\nstatic void time_civil_from_days(bigint_type z,\n\t\t\t\t struct tm *_MLIBC_RESTRICT tp)\n{\n\ttp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);\n\tz += 719468;\n\n\tbigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;\n\tunsigned int doe = (z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = mp + ((mp < 10) ? 3 : -9);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47
  ],
  "after-code": " *\n * @return the time information for corresponding to the provided\n * instant.\n *\n * @see http://howardhinnant.github.io/date_algorithms.html#civil_from_days\n */\nstatic void time_civil_from_days(bigint_type z,\n\t\t\t\t struct tm *_MLIBC_RESTRICT tp)\n{\n\ttp->tm_wday = (int)((z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6));\n\tz += 719468;\n\n\tbigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;\n\tunsigned int doe = (unsigned int)(bigint_type)(z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = (mp < 10) ? mp + 3 : mp - 9;\n",
  "violation-line": 37,
  "violation-message": "The long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ],
  "before-code": " * @see http://howardhinnant.github.io/date_algorithms.html#civil_from_days\n */\nstatic void time_civil_from_days(bigint_type z,\n\t\t\t\t struct tm *_MLIBC_RESTRICT tp)\n{\n\ttp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);\n\tz += 719468;\n\n\tbigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;\n\tunsigned int doe = (z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = mp + ((mp < 10) ? 3 : -9);\n\n\ttp->tm_year = y + (m <= 2) - 1900;\n\ttp->tm_mon = m - 1;\n\ttp->tm_mday = d;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ],
  "after-code": " * @see http://howardhinnant.github.io/date_algorithms.html#civil_from_days\n */\nstatic void time_civil_from_days(bigint_type z,\n\t\t\t\t struct tm *_MLIBC_RESTRICT tp)\n{\n\ttp->tm_wday = (int)((z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6));\n\tz += 719468;\n\n\tbigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;\n\tunsigned int doe = (unsigned int)(bigint_type)(z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = (mp < 10) ? mp + 3 : mp - 9;\n\n\ttp->tm_year = (int)(y + (m <= 2 ? 1 : 0) - 1900);\n\ttp->tm_mon = (int)m - 1;\n\ttp->tm_mday = (int)d;\n",
  "violation-line": 41,
  "violation-message": "The long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "before-code": "\tunsigned int doe = (z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = mp + ((mp < 10) ? 3 : -9);\n\n\ttp->tm_year = y + (m <= 2) - 1900;\n\ttp->tm_mon = m - 1;\n\ttp->tm_mday = d;\n\n\t/* Everything above is explained on the referenced page, but\n\t * doy is relative to --03-01 and we need it relative to\n\t * --01-01.\n\t *\n\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "after-code": "\tunsigned int doe = (unsigned int)(bigint_type)(z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = (mp < 10) ? mp + 3 : mp - 9;\n\n\ttp->tm_year = (int)(y + (m <= 2 ? 1 : 0) - 1900);\n\ttp->tm_mon = (int)m - 1;\n\ttp->tm_mday = (int)d;\n\n\t/* Everything above is explained on the referenced page, but\n\t * doy is relative to --03-01 and we need it relative to\n\t * --01-01.\n\t *\n\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n",
  "violation-line": 50,
  "violation-message": "The long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "before-code": "\tunsigned int doe = (z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = mp + ((mp < 10) ? 3 : -9);\n\n\ttp->tm_year = y + (m <= 2) - 1900;\n\ttp->tm_mon = m - 1;\n\ttp->tm_mday = d;\n\n\t/* Everything above is explained on the referenced page, but\n\t * doy is relative to --03-01 and we need it relative to\n\t * --01-01.\n\t *\n\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "after-code": "\tunsigned int doe = (unsigned int)(bigint_type)(z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = (mp < 10) ? mp + 3 : mp - 9;\n\n\ttp->tm_year = (int)(y + (m <= 2 ? 1 : 0) - 1900);\n\ttp->tm_mon = (int)m - 1;\n\ttp->tm_mday = (int)d;\n\n\t/* Everything above is explained on the referenced page, but\n\t * doy is relative to --03-01 and we need it relative to\n\t * --01-01.\n\t *\n\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n",
  "violation-line": 51,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "before-code": "\tunsigned int doe = (z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = mp + ((mp < 10) ? 3 : -9);\n\n\ttp->tm_year = y + (m <= 2) - 1900;\n\ttp->tm_mon = m - 1;\n\ttp->tm_mday = d;\n\n\t/* Everything above is explained on the referenced page, but\n\t * doy is relative to --03-01 and we need it relative to\n\t * --01-01.\n\t *\n\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62
  ],
  "after-code": "\tunsigned int doe = (unsigned int)(bigint_type)(z - era * (bigint_type)146097);\n\tunsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)\n\t\t/ 365U;\n\tbigint_type y = (time_t)yoe + era * 400;\n\tunsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);\n\tunsigned int mp = (5U * doy + 2U) / 153U;\n\tunsigned int d = doy - (153U * mp + 2U) / 5U + 1U;\n\tunsigned int m = (mp < 10) ? mp + 3 : mp - 9;\n\n\ttp->tm_year = (int)(y + (m <= 2 ? 1 : 0) - 1900);\n\ttp->tm_mon = (int)m - 1;\n\ttp->tm_mday = (int)d;\n\n\t/* Everything above is explained on the referenced page, but\n\t * doy is relative to --03-01 and we need it relative to\n\t * --01-01.\n\t *\n\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n",
  "violation-line": 52,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77
  ],
  "before-code": "\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n\t * year.  Note that the first year in the era is a leap year.\n\t */\n\tif (doy >= 306U) {\n\t\ttp->tm_yday = doy - 306U;\n\t} else {\n\t\ttp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));\n\t}\n}\n\n/* Convert a UNIX time to civil time.\n *\n * This converts integral seconds since (before) 1970-01-01T00:00:00\n * to the POSIX standard civil time representation.  Any adjustments\n * due to time zone, leap seconds, or a different epoch must be\n * applied to @p time before invoking this function.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77
  ],
  "after-code": "\t * doy=306 corresponds to --01-01, doy=364 to --02-28, and\n\t * doy=365 to --02-29.  So we can just subtract 306 to handle\n\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n\t * year.  Note that the first year in the era is a leap year.\n\t */\n\tif (doy >= 306U) {\n\t\ttp->tm_yday = (int)doy - 306;\n\t} else {\n\t\ttp->tm_yday = (int)doy + 59;\n\t\tif (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U)) {\n\t\t\t++tp->tm_yday;\n\t\t}\n\t}\n}\n\n/* Convert a UNIX time to civil time.\n *\n * This converts integral seconds since (before) 1970-01-01T00:00:00\n",
  "violation-line": 67,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79
  ],
  "before-code": "\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n\t * year.  Note that the first year in the era is a leap year.\n\t */\n\tif (doy >= 306U) {\n\t\ttp->tm_yday = doy - 306U;\n\t} else {\n\t\ttp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));\n\t}\n}\n\n/* Convert a UNIX time to civil time.\n *\n * This converts integral seconds since (before) 1970-01-01T00:00:00\n * to the POSIX standard civil time representation.  Any adjustments\n * due to time zone, leap seconds, or a different epoch must be\n * applied to @p time before invoking this function.\n */\nstruct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82
  ],
  "after-code": "\t * January and February.\n\t *\n\t * For doy<306 we have to add the number of days before\n\t * --03-01, which is 59 in a common year and 60 in a leap\n\t * year.  Note that the first year in the era is a leap year.\n\t */\n\tif (doy >= 306U) {\n\t\ttp->tm_yday = (int)doy - 306;\n\t} else {\n\t\ttp->tm_yday = (int)doy + 59;\n\t\tif (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U)) {\n\t\t\t++tp->tm_yday;\n\t\t}\n\t}\n}\n\n/* Convert a UNIX time to civil time.\n *\n * This converts integral seconds since (before) 1970-01-01T00:00:00\n * to the POSIX standard civil time representation.  Any adjustments\n * due to time zone, leap seconds, or a different epoch must be\n * applied to @p time before invoking this function.\n */\nstruct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,\n",
  "violation-line": 69,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95
  ],
  "before-code": " * to the POSIX standard civil time representation.  Any adjustments\n * due to time zone, leap seconds, or a different epoch must be\n * applied to @p time before invoking this function.\n */\nstruct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,\n\t\t    struct tm *_MLIBC_RESTRICT result)\n{\n\ttime_t z = *timep;\n\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tunsigned int rem = z - days * 86400;\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60U / 60U;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98
  ],
  "after-code": " * to the POSIX standard civil time representation.  Any adjustments\n * due to time zone, leap seconds, or a different epoch must be\n * applied to @p time before invoking this function.\n */\nstruct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,\n\t\t    struct tm *_MLIBC_RESTRICT result)\n{\n\ttime_t z = *timep;\n\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tint rem = (int)(z - days * 86400);\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60 / 60;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n",
  "violation-line": 85,
  "violation-message": "The long long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101
  ],
  "before-code": "{\n\ttime_t z = *timep;\n\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tunsigned int rem = z - days * 86400;\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60U / 60U;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104
  ],
  "after-code": "{\n\ttime_t z = *timep;\n\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tint rem = (int)(z - days * 86400);\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60 / 60;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n",
  "violation-line": 91,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102
  ],
  "before-code": "\ttime_t z = *timep;\n\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tunsigned int rem = z - days * 86400;\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60U / 60U;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n\treturn gmtime_r(timep, &shared);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105
  ],
  "after-code": "\ttime_t z = *timep;\n\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tint rem = (int)(z - days * 86400);\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60 / 60;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n\treturn gmtime_r(timep, &shared);\n",
  "violation-line": 92,
  "violation-message": "The int type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103
  ],
  "before-code": "\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tunsigned int rem = z - days * 86400;\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60U / 60U;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n\treturn gmtime_r(timep, &shared);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106
  ],
  "after-code": "\tbigint_type days = (z >= 0 ? z : z - 86399) / 86400;\n\tint rem = (int)(z - days * 86400);\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60 / 60;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n\treturn gmtime_r(timep, &shared);\n}\n",
  "violation-line": 93,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "before-lines": [
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103
  ],
  "before-code": "\tunsigned int rem = z - days * 86400;\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60U / 60U;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n\treturn gmtime_r(timep, &shared);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/libc/minimal/source/time/gmtime.c",
  "after-lines": [
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106
  ],
  "after-code": "\tint rem = (int)(z - days * 86400);\n\n\t*result = (struct tm){ 0 };\n\n\ttime_civil_from_days(days, result);\n\n\tresult->tm_hour = rem / 60 / 60;\n\trem -= result->tm_hour * 60 * 60;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem - result->tm_min * 60;\n\n\treturn result;\n}\n\nstruct tm *gmtime(const time_t *timep)\n{\n\tstatic struct tm shared;\n\n\treturn gmtime_r(timep, &shared);\n}\n",
  "violation-line": 94,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50
  ],
  "before-code": "\t\t\t      struct bundle_data *bd,\n\t\t\t      size_t offset, size_t num_bits)\n{\n\tbd->sidx = offset / bundle_bitness(bitarray);\n\tbd->soff = offset % bundle_bitness(bitarray);\n\n\tbd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);\n\tbd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);\n\n\tbd->smask = ~(BIT(bd->soff) - 1);\n\tbd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);\n\n\tif (bd->sidx == bd->eidx) {\n\t\t/* The region lies within the same bundle. So combine the masks. */\n\t\tbd->smask &= bd->emask;\n\t}\n}\n\n/*\n * Find out if the bits in a region is all set or all clear.\n *\n * @param[in]  bitarray  Bitarray struct\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50
  ],
  "after-code": "\t\t\t      struct bundle_data *bd,\n\t\t\t      size_t offset, size_t num_bits)\n{\n\tbd->sidx = offset / bundle_bitness(bitarray);\n\tbd->soff = offset % bundle_bitness(bitarray);\n\n\tbd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);\n\tbd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);\n\n\tbd->smask = ~(BIT32(bd->soff) - 1);\n\tbd->emask = (BIT32(bd->eoff) - 1) | BIT32(bd->eoff);\n\n\tif (bd->sidx == bd->eidx) {\n\t\t/* The region lies within the same bundle. So combine the masks. */\n\t\tbd->smask &= bd->emask;\n\t}\n}\n\n/*\n * Find out if the bits in a region is all set or all clear.\n *\n * @param[in]  bitarray  Bitarray struct\n",
  "violation-line": 39,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50
  ],
  "before-code": "\t\t\t      struct bundle_data *bd,\n\t\t\t      size_t offset, size_t num_bits)\n{\n\tbd->sidx = offset / bundle_bitness(bitarray);\n\tbd->soff = offset % bundle_bitness(bitarray);\n\n\tbd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);\n\tbd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);\n\n\tbd->smask = ~(BIT(bd->soff) - 1);\n\tbd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);\n\n\tif (bd->sidx == bd->eidx) {\n\t\t/* The region lies within the same bundle. So combine the masks. */\n\t\tbd->smask &= bd->emask;\n\t}\n}\n\n/*\n * Find out if the bits in a region is all set or all clear.\n *\n * @param[in]  bitarray  Bitarray struct\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50
  ],
  "after-code": "\t\t\t      struct bundle_data *bd,\n\t\t\t      size_t offset, size_t num_bits)\n{\n\tbd->sidx = offset / bundle_bitness(bitarray);\n\tbd->soff = offset % bundle_bitness(bitarray);\n\n\tbd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);\n\tbd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);\n\n\tbd->smask = ~(BIT32(bd->soff) - 1);\n\tbd->emask = (BIT32(bd->eoff) - 1) | BIT32(bd->eoff);\n\n\tif (bd->sidx == bd->eidx) {\n\t\t/* The region lies within the same bundle. So combine the masks. */\n\t\tbd->smask &= bd->emask;\n\t}\n}\n\n/*\n * Find out if the bits in a region is all set or all clear.\n *\n * @param[in]  bitarray  Bitarray struct\n",
  "violation-line": 40,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138
  ],
  "before-code": "\tif ((bundle & bd->emask) != bd->emask) {\n\t\t/* End bundle not matching to mask. */\n\t\tmismatch_bundle = ~bundle & bd->emask;\n\t\tmismatch_bundle_idx = bd->eidx;\n\t\tmismatch_mask = bd->emask;\n\t\tgoto mismatch;\n\t}\n\n\t/* In-between bundles */\n\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t/* Note that this is opposite from above so that\n\t\t * we are simply checking if bundle == 0.\n\t\t */\n\t\tbundle = bitarray->bundles[idx];\n\t\tif (match_set) {\n\t\t\tbundle = ~bundle;\n\t\t}\n\n\t\tif (bundle != 0U) {\n\t\t\t/* Bits in \"between bundles\" do not match */\n\t\t\tmismatch_bundle = ~bundle;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138
  ],
  "after-code": "\tif ((bundle & bd->emask) != bd->emask) {\n\t\t/* End bundle not matching to mask. */\n\t\tmismatch_bundle = ~bundle & bd->emask;\n\t\tmismatch_bundle_idx = bd->eidx;\n\t\tmismatch_mask = bd->emask;\n\t\tgoto mismatch;\n\t}\n\n\t/* In-between bundles */\n\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t/* Note that this is opposite from above so that\n\t\t * we are simply checking if bundle == 0.\n\t\t */\n\t\tbundle = bitarray->bundles[idx];\n\t\tif (match_set) {\n\t\t\tbundle = ~bundle;\n\t\t}\n\n\t\tif (bundle != 0U) {\n\t\t\t/* Bits in \"between bundles\" do not match */\n\t\t\tmismatch_bundle = ~bundle;\n",
  "violation-line": 128,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150
  ],
  "before-code": "\t\t */\n\t\tbundle = bitarray->bundles[idx];\n\t\tif (match_set) {\n\t\t\tbundle = ~bundle;\n\t\t}\n\n\t\tif (bundle != 0U) {\n\t\t\t/* Bits in \"between bundles\" do not match */\n\t\t\tmismatch_bundle = ~bundle;\n\t\t\tmismatch_bundle_idx = idx;\n\t\t\tmismatch_mask = ~0U;\n\t\t\tgoto mismatch;\n\t\t}\n\t}\n\nout:\n\t/* All bits in region matched. */\n\treturn true;\n\nmismatch:\n\tif (mismatch != NULL) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150
  ],
  "after-code": "\t\t */\n\t\tbundle = bitarray->bundles[idx];\n\t\tif (match_set) {\n\t\t\tbundle = ~bundle;\n\t\t}\n\n\t\tif (bundle != 0U) {\n\t\t\t/* Bits in \"between bundles\" do not match */\n\t\t\tmismatch_bundle = ~bundle;\n\t\t\tmismatch_bundle_idx = idx;\n\t\t\tmismatch_mask = ~0U;\n\t\t\tgoto mismatch;\n\t\t}\n\t}\n\nout:\n\t/* All bits in region matched. */\n\treturn true;\n\nmismatch:\n\tif (mismatch != NULL) {\n",
  "violation-line": 140,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215
  ],
  "before-code": "\t} else {\n\t\t/* Start/end at different bundle.\n\t\t * So set/clear the bits in start and end bundles\n\t\t * separately. For in-between bundles,\n\t\t * set/clear all bits.\n\t\t */\n\t\tif (to_set) {\n\t\t\tbitarray->bundles[bd->sidx] |= bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] |= bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = ~0U;\n\t\t\t}\n\t\t} else {\n\t\t\tbitarray->bundles[bd->sidx] &= ~bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] &= ~bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = 0U;\n\t\t\t}\n\t\t}\n\t}\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215
  ],
  "after-code": "\t} else {\n\t\t/* Start/end at different bundle.\n\t\t * So set/clear the bits in start and end bundles\n\t\t * separately. For in-between bundles,\n\t\t * set/clear all bits.\n\t\t */\n\t\tif (to_set) {\n\t\t\tbitarray->bundles[bd->sidx] |= bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] |= bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = ~0U;\n\t\t\t}\n\t\t} else {\n\t\t\tbitarray->bundles[bd->sidx] &= ~bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] &= ~bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = 0U;\n\t\t\t}\n\t\t}\n\t}\n}\n",
  "violation-line": 205,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221
  ],
  "before-code": "\t\tif (to_set) {\n\t\t\tbitarray->bundles[bd->sidx] |= bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] |= bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = ~0U;\n\t\t\t}\n\t\t} else {\n\t\t\tbitarray->bundles[bd->sidx] &= ~bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] &= ~bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = 0U;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint sys_bitarray_set_bit(sys_bitarray_t *bitarray, size_t bit)\n{\n\tk_spinlock_key_t key;\n\tint ret;\n\tsize_t idx, off;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221
  ],
  "after-code": "\t\tif (to_set) {\n\t\t\tbitarray->bundles[bd->sidx] |= bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] |= bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = ~0U;\n\t\t\t}\n\t\t} else {\n\t\t\tbitarray->bundles[bd->sidx] &= ~bd->smask;\n\t\t\tbitarray->bundles[bd->eidx] &= ~bd->emask;\n\t\t\tfor (idx = bd->sidx + 1; idx < bd->eidx; idx++) {\n\t\t\t\tbitarray->bundles[idx] = 0U;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint sys_bitarray_set_bit(sys_bitarray_t *bitarray, size_t bit)\n{\n\tk_spinlock_key_t key;\n\tint ret;\n\tsize_t idx, off;\n",
  "violation-line": 211,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246
  ],
  "before-code": "\n\tif (bit >= bitarray->num_bits) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tbitarray->bundles[idx] |= BIT(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_clear_bit(sys_bitarray_t *bitarray, size_t bit)\n{\n\tk_spinlock_key_t key;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246
  ],
  "after-code": "\n\tif (bit >= bitarray->num_bits) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tbitarray->bundles[idx] |= BIT32(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_clear_bit(sys_bitarray_t *bitarray, size_t bit)\n{\n\tk_spinlock_key_t key;\n",
  "violation-line": 236,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273
  ],
  "before-code": "\n\tif (bit >= bitarray->num_bits) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tbitarray->bundles[idx] &= ~BIT(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_test_bit(sys_bitarray_t *bitarray, size_t bit, int *val)\n{\n\tk_spinlock_key_t key;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273
  ],
  "after-code": "\n\tif (bit >= bitarray->num_bits) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tbitarray->bundles[idx] &= ~BIT32(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_test_bit(sys_bitarray_t *bitarray, size_t bit, int *val)\n{\n\tk_spinlock_key_t key;\n",
  "violation-line": 263,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "before-code": "\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tif ((bitarray->bundles[idx] & BIT(off)) != 0) {\n\t\t*prev_val = 1;\n\t} else {\n\t\t*prev_val = 0;\n\t}\n\n\tbitarray->bundles[idx] |= BIT(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_test_and_clear_bit(sys_bitarray_t *bitarray, size_t bit, int *prev_val)\n{\n\tk_spinlock_key_t key;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347
  ],
  "after-code": "\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tif ((bitarray->bundles[idx] & BIT32(off)) != 0) {\n\t\t*prev_val = 1;\n\t} else {\n\t\t*prev_val = 0;\n\t}\n\n\tbitarray->bundles[idx] |= BIT32(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_test_and_clear_bit(sys_bitarray_t *bitarray, size_t bit, int *prev_val)\n{\n\tk_spinlock_key_t key;\n",
  "violation-line": 337,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385
  ],
  "before-code": "\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tif ((bitarray->bundles[idx] & BIT(off)) != 0) {\n\t\t*prev_val = 1;\n\t} else {\n\t\t*prev_val = 0;\n\t}\n\n\tbitarray->bundles[idx] &= ~BIT(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_alloc(sys_bitarray_t *bitarray, size_t num_bits,\n\t\t       size_t *offset)\n{\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385
  ],
  "after-code": "\tidx = bit / bundle_bitness(bitarray);\n\toff = bit % bundle_bitness(bitarray);\n\n\tif ((bitarray->bundles[idx] & BIT32(off)) != 0) {\n\t\t*prev_val = 1;\n\t} else {\n\t\t*prev_val = 0;\n\t}\n\n\tbitarray->bundles[idx] &= ~BIT32(off);\n\n\tret = 0;\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_alloc(sys_bitarray_t *bitarray, size_t num_bits,\n\t\t       size_t *offset)\n{\n",
  "violation-line": 375,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429
  ],
  "before-code": "\t/* Find the first non-allocated bit by looking at bundles\n\t * instead of individual bits.\n\t *\n\t * On RISC-V 64-bit, it complains about undefined reference to `ffs`.\n\t * So don't use this on RISCV64.\n\t */\n\tfor (ret = 0; ret < bitarray->num_bundles; ret++) {\n\t\tif (~bitarray->bundles[ret] == 0U) {\n\t\t\t/* bundle is all 1s => all allocated, skip */\n\t\t\tbit_idx += bundle_bitness(bitarray);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (bitarray->bundles[ret] != 0U) {\n\t\t\t/* Find the first free bit in bundle if not all free */\n\t\t\toff_start = find_lsb_set(~bitarray->bundles[ret]) - 1;\n\t\t\tbit_idx += off_start;\n\t\t}\n\n\t\tbreak;\n\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430
  ],
  "after-code": "\t/* Find the first non-allocated bit by looking at bundles\n\t * instead of individual bits.\n\t *\n\t * On RISC-V 64-bit, it complains about undefined reference to `ffs`.\n\t * So don't use this on RISCV64.\n\t */\n\tfor (uint32_t i = 0; i < bitarray->num_bundles; i++) {\n\t\tif (~bitarray->bundles[i] == 0U) {\n\t\t\t/* bundle is all 1s => all allocated, skip */\n\t\t\tbit_idx += bundle_bitness(bitarray);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (bitarray->bundles[i] != 0U) {\n\t\t\t/* Find the first free bit in bundle if not all free */\n\t\t\toff_start = find_lsb_set(~bitarray->bundles[i]) - 1;\n\t\t\tbit_idx += off_start;\n\t\t}\n\n\t\tbreak;\n\t}\n",
  "violation-line": 419,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436
  ],
  "before-code": "\t\tif (~bitarray->bundles[ret] == 0U) {\n\t\t\t/* bundle is all 1s => all allocated, skip */\n\t\t\tbit_idx += bundle_bitness(bitarray);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (bitarray->bundles[ret] != 0U) {\n\t\t\t/* Find the first free bit in bundle if not all free */\n\t\t\toff_start = find_lsb_set(~bitarray->bundles[ret]) - 1;\n\t\t\tbit_idx += off_start;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\toff_end = bitarray->num_bits - num_bits;\n\tret = -ENOSPC;\n\twhile (bit_idx <= off_end) {\n\t\tif (match_region(bitarray, bit_idx, num_bits, false,\n\t\t\t\t &bd, &mismatch)) {\n\t\t\toff_end = bit_idx + num_bits - 1;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437
  ],
  "after-code": "\t\tif (~bitarray->bundles[i] == 0U) {\n\t\t\t/* bundle is all 1s => all allocated, skip */\n\t\t\tbit_idx += bundle_bitness(bitarray);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (bitarray->bundles[i] != 0U) {\n\t\t\t/* Find the first free bit in bundle if not all free */\n\t\t\toff_start = find_lsb_set(~bitarray->bundles[i]) - 1;\n\t\t\tbit_idx += off_start;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\toff_end = bitarray->num_bits - num_bits;\n\tret = -ENOSPC;\n\twhile (bit_idx <= off_end) {\n\t\tif (match_region(bitarray, bit_idx, num_bits, false,\n\t\t\t\t &bd, &mismatch)) {\n\t\t\toff_end = bit_idx + num_bits - 1;\n",
  "violation-line": 426,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/bitarray.c",
  "before-lines": [
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459
  ],
  "before-code": "\n\t\t\t*offset = bit_idx;\n\t\t\tret = 0;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Fast-forward to the bit just after\n\t\t * the mismatched bit.\n\t\t */\n\t\tbit_idx = mismatch + 1;\n\t}\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_free(sys_bitarray_t *bitarray, size_t num_bits,\n\t\t      size_t offset)\n{\n\tk_spinlock_key_t key;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/bitarray.c",
  "after-lines": [
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455,
    456,
    457,
    458,
    459,
    460
  ],
  "after-code": "\n\t\t\t*offset = bit_idx;\n\t\t\tret = 0;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Fast-forward to the bit just after\n\t\t * the mismatched bit.\n\t\t */\n\t\tbit_idx = mismatch + 1;\n\t}\n\nout:\n\tk_spin_unlock(&bitarray->lock, key);\n\treturn ret;\n}\n\nint sys_bitarray_free(sys_bitarray_t *bitarray, size_t num_bits,\n\t\t      size_t offset)\n{\n\tk_spinlock_key_t key;\n",
  "violation-line": 449,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414
  ],
  "before-code": "\t\tconv->width_star = true;\n\t\treturn ++sp;\n\t}\n\n\tconst char *wp = sp;\n\tsize_t width = extract_decimal(&sp);\n\n\tif (sp != wp) {\n\t\tconv->width_present = true;\n\t\tconv->width_value = width;\n\t\tconv->unsupported |= ((conv->width_value < 0)\n\t\t\t\t      || (width != (size_t)conv->width_value));\n\t}\n\n\treturn sp;\n}\n\n/** Extract a C99 conversion specification precision.\n *\n * @param conv pointer to the conversion being defined.\n *\n * @param sp pointer to the first character after the width element of a\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416
  ],
  "after-code": "\t\tconv->width_star = true;\n\t\treturn ++sp;\n\t}\n\n\tconst char *wp = sp;\n\tsize_t width = extract_decimal(&sp);\n\n\tif (sp != wp) {\n\t\tconv->width_present = true;\n\t\tconv->width_value = (int)width;\n\t\tconv->unsupported = (conv->unsupported || (conv->width_value < 0)\n\t\t\t\t      || (width != (size_t)conv->width_value));\n\t}\n\n\treturn sp;\n}\n\n/** Extract a C99 conversion specification precision.\n *\n * @param conv pointer to the conversion being defined.\n *\n * @param sp pointer to the first character after the width element of a\n",
  "violation-line": 403,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448
  ],
  "before-code": "\t++sp;\n\n\tif (*sp == '*') {\n\t\tconv->prec_star = true;\n\t\treturn ++sp;\n\t}\n\n\tsize_t prec = extract_decimal(&sp);\n\n\tconv->prec_value = prec;\n\tconv->unsupported |= ((conv->prec_value < 0)\n\t\t\t      || (prec != (size_t)conv->prec_value));\n\n\treturn sp;\n}\n\n/** Extract a C99 conversion specification length.\n *\n * @param conv pointer to the conversion being defined.\n *\n * @param sp pointer to the first character after the precision element of a\n * conversion specification.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450
  ],
  "after-code": "\t++sp;\n\n\tif (*sp == '*') {\n\t\tconv->prec_star = true;\n\t\treturn ++sp;\n\t}\n\n\tsize_t prec = extract_decimal(&sp);\n\n\tconv->prec_value = (int)prec;\n\tconv->unsupported = (conv->unsupported || (conv->prec_value < 0)\n\t\t\t      || (prec != (size_t)conv->prec_value));\n\n\treturn sp;\n}\n\n/** Extract a C99 conversion specification length.\n *\n * @param conv pointer to the conversion being defined.\n *\n * @param sp pointer to the first character after the precision element of a\n * conversion specification.\n",
  "violation-line": 437,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528
  ],
  "before-code": " * conversion specification.\n *\n * @return a pointer the first character that follows the specifier.\n */\nstatic inline const char *extract_specifier(struct conversion *conv,\n\t\t\t\t\t    const char *sp)\n{\n\tbool unsupported = false;\n\n\tconv->specifier = *sp++;\n\n\tswitch (conv->specifier) {\n\tcase SINT_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_SINT;\n\t\tgoto int_conv;\n\tcase UINT_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_UINT;\nint_conv:\n\t\t/* L length specifier not acceptable */\n\t\tif (conv->length_mod == LENGTH_UPPER_L) {\n\t\t\tconv->invalid = true;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530
  ],
  "after-code": " * conversion specification.\n *\n * @return a pointer the first character that follows the specifier.\n */\nstatic inline const char *extract_specifier(struct conversion *conv,\n\t\t\t\t\t    const char *sp)\n{\n\tbool unsupported = false;\n\n\tconv->specifier = *sp++;\n\n\tswitch (conv->specifier) {\n\tcase SINT_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_SINT;\n\t\tgoto int_conv;\n\tcase UINT_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_UINT;\nint_conv:\n\t\t/* L length specifier not acceptable */\n\t\tif (conv->length_mod == (uint8_t)LENGTH_UPPER_L) {\n\t\t\tconv->invalid = true;\n",
  "violation-line": 518,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531
  ],
  "before-code": " */\nstatic inline const char *extract_specifier(struct conversion *conv,\n\t\t\t\t\t    const char *sp)\n{\n\tbool unsupported = false;\n\n\tconv->specifier = *sp++;\n\n\tswitch (conv->specifier) {\n\tcase SINT_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_SINT;\n\t\tgoto int_conv;\n\tcase UINT_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_UINT;\nint_conv:\n\t\t/* L length specifier not acceptable */\n\t\tif (conv->length_mod == LENGTH_UPPER_L) {\n\t\t\tconv->invalid = true;\n\t\t}\n\n\t\t/* For c LENGTH_NONE and LENGTH_L would be ok,\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533
  ],
  "after-code": " */\nstatic inline const char *extract_specifier(struct conversion *conv,\n\t\t\t\t\t    const char *sp)\n{\n\tbool unsupported = false;\n\n\tconv->specifier = *sp++;\n\n\tswitch (conv->specifier) {\n\tcase SINT_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_SINT;\n\t\tgoto int_conv;\n\tcase UINT_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_UINT;\nint_conv:\n\t\t/* L length specifier not acceptable */\n\t\tif (conv->length_mod == (uint8_t)LENGTH_UPPER_L) {\n\t\t\tconv->invalid = true;\n\t\t}\n\n\t\t/* For c LENGTH_NONE and LENGTH_L would be ok,\n",
  "violation-line": 521,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534
  ],
  "before-code": "{\n\tbool unsupported = false;\n\n\tconv->specifier = *sp++;\n\n\tswitch (conv->specifier) {\n\tcase SINT_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_SINT;\n\t\tgoto int_conv;\n\tcase UINT_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_UINT;\nint_conv:\n\t\t/* L length specifier not acceptable */\n\t\tif (conv->length_mod == LENGTH_UPPER_L) {\n\t\t\tconv->invalid = true;\n\t\t}\n\n\t\t/* For c LENGTH_NONE and LENGTH_L would be ok,\n\t\t * but we don't support formatting wide characters.\n\t\t */\n\t\tif (conv->specifier == 'c') {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536
  ],
  "after-code": "{\n\tbool unsupported = false;\n\n\tconv->specifier = *sp++;\n\n\tswitch (conv->specifier) {\n\tcase SINT_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_SINT;\n\t\tgoto int_conv;\n\tcase UINT_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_UINT;\nint_conv:\n\t\t/* L length specifier not acceptable */\n\t\tif (conv->length_mod == (uint8_t)LENGTH_UPPER_L) {\n\t\t\tconv->invalid = true;\n\t\t}\n\n\t\t/* For c LENGTH_NONE and LENGTH_L would be ok,\n\t\t * but we don't support formatting wide characters.\n\t\t */\n\t\tif (conv->specifier == 'c') {\n",
  "violation-line": 524,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552
  ],
  "before-code": "\t\t * but we don't support formatting wide characters.\n\t\t */\n\t\tif (conv->specifier == 'c') {\n\t\t\tunsupported = (conv->length_mod != LENGTH_NONE);\n\t\t} else if (!(IS_ENABLED(CONFIG_CBPRINTF_FULL_INTEGRAL))) {\n\t\t\t/* Disable conversion that might produce truncated\n\t\t\t * results with buffers sized for 32 bits.\n\t\t\t */\n\t\t\tswitch (conv->length_mod) {\n\t\t\tcase LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554
  ],
  "after-code": "\t\t * but we don't support formatting wide characters.\n\t\t */\n\t\tif (conv->specifier == 'c') {\n\t\t\tunsupported = (conv->length_mod != (uint8_t)LENGTH_NONE);\n\t\t} else if (!(IS_ENABLED(CONFIG_CBPRINTF_FULL_INTEGRAL))) {\n\t\t\t/* Disable conversion that might produce truncated\n\t\t\t * results with buffers sized for 32 bits.\n\t\t\t */\n\t\t\tswitch (conv->length_mod) {\n\t\t\tcase (uint8_t)LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n",
  "violation-line": 542,
  "violation-message": "The enum length_mod_enum type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555
  ],
  "before-code": "\t\t\tunsupported = (conv->length_mod != LENGTH_NONE);\n\t\t} else if (!(IS_ENABLED(CONFIG_CBPRINTF_FULL_INTEGRAL))) {\n\t\t\t/* Disable conversion that might produce truncated\n\t\t\t * results with buffers sized for 32 bits.\n\t\t\t */\n\t\t\tswitch (conv->length_mod) {\n\t\t\tcase LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557
  ],
  "after-code": "\t\t\tunsupported = (conv->length_mod != (uint8_t)LENGTH_NONE);\n\t\t} else if (!(IS_ENABLED(CONFIG_CBPRINTF_FULL_INTEGRAL))) {\n\t\t\t/* Disable conversion that might produce truncated\n\t\t\t * results with buffers sized for 32 bits.\n\t\t\t */\n\t\t\tswitch (conv->length_mod) {\n\t\t\tcase (uint8_t)LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n",
  "violation-line": 545,
  "violation-message": "The enum length_mod_enum type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558
  ],
  "before-code": "\t\t\t * results with buffers sized for 32 bits.\n\t\t\t */\n\t\t\tswitch (conv->length_mod) {\n\t\t\tcase LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t\t * programming. Static analysis tool won't raise a violation\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560
  ],
  "after-code": "\t\t\t * results with buffers sized for 32 bits.\n\t\t\t */\n\t\t\tswitch (conv->length_mod) {\n\t\t\tcase (uint8_t)LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t\t * programming. Static analysis tool won't raise a violation\n",
  "violation-line": 548,
  "violation-message": "The enum length_mod_enum type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561
  ],
  "before-code": "\t\t\tcase LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t\t * programming. Static analysis tool won't raise a violation\n\t\t\t\t * if default is empty, but has that comment.\n\t\t\t\t */\n\t\t\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563
  ],
  "after-code": "\t\t\tcase (uint8_t)LENGTH_L:\n\t\t\t\tunsupported = sizeof(long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t\t * programming. Static analysis tool won't raise a violation\n\t\t\t\t * if default is empty, but has that comment.\n\t\t\t\t */\n\t\t\t\tbreak;\n",
  "violation-line": 551,
  "violation-message": "The enum length_mod_enum type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564
  ],
  "before-code": "\t\t\tcase LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t\t * programming. Static analysis tool won't raise a violation\n\t\t\t\t * if default is empty, but has that comment.\n\t\t\t\t */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566
  ],
  "after-code": "\t\t\tcase (uint8_t)LENGTH_LL:\n\t\t\t\tunsupported = sizeof(long long) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_J:\n\t\t\t\tunsupported = sizeof(uintmax_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_Z:\n\t\t\t\tunsupported = sizeof(size_t) > 4;\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_T:\n\t\t\t\tunsupported = sizeof(ptrdiff_t) > 4;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t\t * programming. Static analysis tool won't raise a violation\n\t\t\t\t * if default is empty, but has that comment.\n\t\t\t\t */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t;\n",
  "violation-line": 554,
  "violation-message": "The enum length_mod_enum type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579
  ],
  "before-code": "\t\t\t\t * if default is empty, but has that comment.\n\t\t\t\t */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t;\n\t\t}\n\t\tbreak;\n\n\tcase FP_CONV_CASES:\n\t\tconv->specifier_cat = SPECIFIER_FP;\n\n\t\t/* Don't support if disabled */\n\t\tif (!(IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT))) {\n\t\t\tunsupported = true;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* When FP enabled %a support is still conditional. */\n\t\tconv->specifier_a = (conv->specifier == 'a')\n\t\t\t|| (conv->specifier == 'A');\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579,
    580,
    581
  ],
  "after-code": "\t\t\t\t * if default is empty, but has that comment.\n\t\t\t\t */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t;\n\t\t}\n\t\tbreak;\n\n\tcase FP_CONV_CASES:\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_FP;\n\n\t\t/* Don't support if disabled */\n\t\tif (!(IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT))) {\n\t\t\tunsupported = true;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* When FP enabled %a support is still conditional. */\n\t\tconv->specifier_a = (conv->specifier == 'a')\n\t\t\t|| (conv->specifier == 'A');\n",
  "violation-line": 569,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612
  ],
  "before-code": "\t\t\t   && (conv->length_mod != LENGTH_UPPER_L)) {\n\t\t\tconv->invalid = true;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tbreak;\n\n\t\t/* PTR cases are distinct */\n\tcase 'n':\n\t\tconv->specifier_cat = SPECIFIER_PTR;\n\t\t/* Anything except L */\n\t\tif (conv->length_mod == LENGTH_UPPER_L) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n\n\tcase 's':\n\tcase 'p':\n\t\tconv->specifier_cat = SPECIFIER_PTR;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614
  ],
  "after-code": "\t\t\t   && (conv->length_mod != (uint8_t)LENGTH_UPPER_L)) {\n\t\t\tconv->invalid = true;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tbreak;\n\n\t\t/* PTR cases are distinct */\n\tcase 'n':\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_PTR;\n\t\t/* Anything except L */\n\t\tif (conv->length_mod == (uint8_t)LENGTH_UPPER_L) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n\n\tcase 's':\n\tcase 'p':\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_PTR;\n\n",
  "violation-line": 602,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620
  ],
  "before-code": "\t\t/* PTR cases are distinct */\n\tcase 'n':\n\t\tconv->specifier_cat = SPECIFIER_PTR;\n\t\t/* Anything except L */\n\t\tif (conv->length_mod == LENGTH_UPPER_L) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n\n\tcase 's':\n\tcase 'p':\n\t\tconv->specifier_cat = SPECIFIER_PTR;\n\n\t\t/* p: only LENGTH_NONE\n\t\t *\n\t\t * s: LENGTH_NONE or LENGTH_L but wide\n\t\t * characters not supported.\n\t\t */\n\t\tif (conv->length_mod != LENGTH_NONE) {\n\t\t\tunsupported = true;\n\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621,
    622
  ],
  "after-code": "\t\t/* PTR cases are distinct */\n\tcase 'n':\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_PTR;\n\t\t/* Anything except L */\n\t\tif (conv->length_mod == (uint8_t)LENGTH_UPPER_L) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n\n\tcase 's':\n\tcase 'p':\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_PTR;\n\n\t\t/* p: only LENGTH_NONE\n\t\t *\n\t\t * s: LENGTH_NONE or LENGTH_L but wide\n\t\t * characters not supported.\n\t\t */\n\t\tif (conv->length_mod != (uint8_t)LENGTH_NONE) {\n\t\t\tunsupported = true;\n\t\t}\n",
  "violation-line": 610,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621
  ],
  "before-code": "\tcase 'n':\n\t\tconv->specifier_cat = SPECIFIER_PTR;\n\t\t/* Anything except L */\n\t\tif (conv->length_mod == LENGTH_UPPER_L) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n\n\tcase 's':\n\tcase 'p':\n\t\tconv->specifier_cat = SPECIFIER_PTR;\n\n\t\t/* p: only LENGTH_NONE\n\t\t *\n\t\t * s: LENGTH_NONE or LENGTH_L but wide\n\t\t * characters not supported.\n\t\t */\n\t\tif (conv->length_mod != LENGTH_NONE) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    603,
    604,
    605,
    606,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    617,
    618,
    619,
    620,
    621,
    622,
    623
  ],
  "after-code": "\tcase 'n':\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_PTR;\n\t\t/* Anything except L */\n\t\tif (conv->length_mod == (uint8_t)LENGTH_UPPER_L) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n\n\tcase 's':\n\tcase 'p':\n\t\tconv->specifier_cat = (uint8_t)SPECIFIER_PTR;\n\n\t\t/* p: only LENGTH_NONE\n\t\t *\n\t\t * s: LENGTH_NONE or LENGTH_L but wide\n\t\t * characters not supported.\n\t\t */\n\t\tif (conv->length_mod != (uint8_t)LENGTH_NONE) {\n\t\t\tunsupported = true;\n\t\t}\n\t\tbreak;\n",
  "violation-line": 611,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665
  ],
  "before-code": "\t   .invalid = false,\n\t};\n\n\t/* Skip over the opening %.  If the conversion specifier is %,\n\t * that's the only thing that should be there, so\n\t * fast-exit.\n\t */\n\t++sp;\n\tif (*sp == '%') {\n\t\tconv->specifier = *sp++;\n\t\treturn sp;\n\t}\n\n\tsp = extract_flags(conv, sp);\n\tsp = extract_width(conv, sp);\n\tsp = extract_prec(conv, sp);\n\tsp = extract_length(conv, sp);\n\tsp = extract_specifier(conv, sp);\n\n\treturn sp;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667
  ],
  "after-code": "\t   .invalid = false,\n\t};\n\n\t/* Skip over the opening %.  If the conversion specifier is %,\n\t * that's the only thing that should be there, so\n\t * fast-exit.\n\t */\n\t++sp;\n\tif (*sp == '%') {\n\t\tconv->specifier = *sp++;\n\t\treturn sp;\n\t}\n\n\tsp = extract_flags(conv, sp);\n\tsp = extract_width(conv, sp);\n\tsp = extract_prec(conv, sp);\n\tsp = extract_length(conv, sp);\n\tsp = extract_specifier(conv, sp);\n\n\treturn sp;\n}\n",
  "violation-line": 655,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    784,
    785,
    786,
    787,
    788,
    789,
    790,
    791,
    792,
    793,
    794,
    795,
    796,
    797,
    798,
    799,
    800,
    801,
    802,
    803,
    804
  ],
  "before-code": " * generated representation.  The returned pointer is to the first\n * character of the representation.\n */\nstatic char *encode_uint(uint_value_type value,\n\t\t\t struct conversion *conv,\n\t\t\t char *bps,\n\t\t\t const char *bpe)\n{\n\tbool upcase = isupper((int)conv->specifier);\n\tconst unsigned int radix = conversion_radix(conv->specifier);\n\tchar *bp = bps + (bpe - bps);\n\n\tdo {\n\t\tunsigned int lsv = (unsigned int)(value % radix);\n\n\t\t*--bp = (lsv <= 9) ? ('0' + lsv)\n\t\t\t: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);\n\t\tvalue /= radix;\n\t} while ((value != 0) && (bps < bp));\n\n\t/* Record required alternate forms.  This can be determined\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    786,
    787,
    788,
    789,
    790,
    791,
    792,
    793,
    794,
    795,
    796,
    797,
    798,
    799,
    800,
    801,
    802,
    803,
    804,
    805,
    806
  ],
  "after-code": " * generated representation.  The returned pointer is to the first\n * character of the representation.\n */\nstatic char *encode_uint(uint_value_type value,\n\t\t\t struct conversion *conv,\n\t\t\t char *bps,\n\t\t\t const char *bpe)\n{\n\tbool upcase = isupper((int)conv->specifier);\n\tconst unsigned int radix = conversion_radix(conv->specifier);\n\tchar *bp = bps + (bpe - bps);\n\n\tdo {\n\t\tunsigned int lsv = (unsigned int)(value % radix);\n\n\t\t*--bp = (lsv <= 9) ? ('0' + lsv)\n\t\t\t: upcase ? ('A' + (lsv - 10)) : ('a' + (lsv - 10));\n\t\tvalue /= radix;\n\t} while ((value != 0) && (bps < bp));\n\n\t/* Record required alternate forms.  This can be determined\n",
  "violation-line": 794,
  "violation-message": "The unsigned char type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    888,
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908
  ],
  "before-code": "\t} else if (conv->flag_space) {\n\t\t*sign = ' ';\n\t} else {\n\t\t;\n\t}\n\n\t/* Extract the non-negative offset exponent and fraction.  Record\n\t * whether the value is subnormal.\n\t */\n\tchar c = conv->specifier;\n\tint expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);\n\tuint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);\n\tbool is_subnormal = (expo == 0) && (fract != 0);\n\n\t/* Exponent of all-ones signals infinity or NaN, which are\n\t * text constants regardless of specifier.\n\t */\n\tif (expo == BIT_MASK(EXPONENT_BITS)) {\n\t\tif (fract == 0) {\n\t\t\tif (isupper((unsigned char)c)) {\n\t\t\t\t*buf++ = 'I';\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910
  ],
  "after-code": "\t} else if (conv->flag_space) {\n\t\t*sign = ' ';\n\t} else {\n\t\t;\n\t}\n\n\t/* Extract the non-negative offset exponent and fraction.  Record\n\t * whether the value is subnormal.\n\t */\n\tchar c = conv->specifier;\n\tuint64_t uexpo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);\n\tint expo = (int)uexpo;\n\tuint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);\n\tbool is_subnormal = (expo == 0) && (fract != 0);\n\n\t/* Exponent of all-ones signals infinity or NaN, which are\n\t * text constants regardless of specifier.\n\t */\n\tif (expo == (int)BIT_MASK(EXPONENT_BITS)) {\n\t\tif (fract == 0) {\n\t\t\tif (isupper((int)(unsigned char)c)) {\n",
  "violation-line": 898,
  "violation-message": "The unsigned char type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    889,
    890,
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909
  ],
  "before-code": "\t\t*sign = ' ';\n\t} else {\n\t\t;\n\t}\n\n\t/* Extract the non-negative offset exponent and fraction.  Record\n\t * whether the value is subnormal.\n\t */\n\tchar c = conv->specifier;\n\tint expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);\n\tuint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);\n\tbool is_subnormal = (expo == 0) && (fract != 0);\n\n\t/* Exponent of all-ones signals infinity or NaN, which are\n\t * text constants regardless of specifier.\n\t */\n\tif (expo == BIT_MASK(EXPONENT_BITS)) {\n\t\tif (fract == 0) {\n\t\t\tif (isupper((unsigned char)c)) {\n\t\t\t\t*buf++ = 'I';\n\t\t\t\t*buf++ = 'N';\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    891,
    892,
    893,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910,
    911,
    912
  ],
  "after-code": "\t\t*sign = ' ';\n\t} else {\n\t\t;\n\t}\n\n\t/* Extract the non-negative offset exponent and fraction.  Record\n\t * whether the value is subnormal.\n\t */\n\tchar c = conv->specifier;\n\tuint64_t uexpo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);\n\tint expo = (int)uexpo;\n\tuint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);\n\tbool is_subnormal = (expo == 0) && (fract != 0);\n\n\t/* Exponent of all-ones signals infinity or NaN, which are\n\t * text constants regardless of specifier.\n\t */\n\tif (expo == (int)BIT_MASK(EXPONENT_BITS)) {\n\t\tif (fract == 0) {\n\t\t\tif (isupper((int)(unsigned char)c)) {\n\t\t\t\t*buf++ = 'I';\n\t\t\t\t*buf++ = 'N';\n",
  "violation-line": 899,
  "violation-message": "The unsigned long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918
  ],
  "before-code": "\tint expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);\n\tuint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);\n\tbool is_subnormal = (expo == 0) && (fract != 0);\n\n\t/* Exponent of all-ones signals infinity or NaN, which are\n\t * text constants regardless of specifier.\n\t */\n\tif (expo == BIT_MASK(EXPONENT_BITS)) {\n\t\tif (fract == 0) {\n\t\t\tif (isupper((unsigned char)c)) {\n\t\t\t\t*buf++ = 'I';\n\t\t\t\t*buf++ = 'N';\n\t\t\t\t*buf++ = 'F';\n\t\t\t} else {\n\t\t\t\t*buf++ = 'i';\n\t\t\t\t*buf++ = 'n';\n\t\t\t\t*buf++ = 'f';\n\t\t\t}\n\t\t} else {\n\t\t\tif (isupper((unsigned char)c)) {\n\t\t\t\t*buf++ = 'N';\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921
  ],
  "after-code": "\tint expo = (int)uexpo;\n\tuint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);\n\tbool is_subnormal = (expo == 0) && (fract != 0);\n\n\t/* Exponent of all-ones signals infinity or NaN, which are\n\t * text constants regardless of specifier.\n\t */\n\tif (expo == (int)BIT_MASK(EXPONENT_BITS)) {\n\t\tif (fract == 0) {\n\t\t\tif (isupper((int)(unsigned char)c)) {\n\t\t\t\t*buf++ = 'I';\n\t\t\t\t*buf++ = 'N';\n\t\t\t\t*buf++ = 'F';\n\t\t\t} else {\n\t\t\t\t*buf++ = 'i';\n\t\t\t\t*buf++ = 'n';\n\t\t\t\t*buf++ = 'f';\n\t\t\t}\n\t\t} else {\n\t\t\tif (isupper((int)(unsigned char)c)) {\n\t\t\t\t*buf++ = 'N';\n",
  "violation-line": 908,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928
  ],
  "before-code": "\t\t\t\t*buf++ = 'I';\n\t\t\t\t*buf++ = 'N';\n\t\t\t\t*buf++ = 'F';\n\t\t\t} else {\n\t\t\t\t*buf++ = 'i';\n\t\t\t\t*buf++ = 'n';\n\t\t\t\t*buf++ = 'f';\n\t\t\t}\n\t\t} else {\n\t\t\tif (isupper((unsigned char)c)) {\n\t\t\t\t*buf++ = 'N';\n\t\t\t\t*buf++ = 'A';\n\t\t\t\t*buf++ = 'N';\n\t\t\t} else {\n\t\t\t\t*buf++ = 'n';\n\t\t\t\t*buf++ = 'a';\n\t\t\t\t*buf++ = 'n';\n\t\t\t}\n\t\t}\n\n\t\t/* No zero-padding with text values */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928,
    929,
    930,
    931
  ],
  "after-code": "\t\t\t\t*buf++ = 'I';\n\t\t\t\t*buf++ = 'N';\n\t\t\t\t*buf++ = 'F';\n\t\t\t} else {\n\t\t\t\t*buf++ = 'i';\n\t\t\t\t*buf++ = 'n';\n\t\t\t\t*buf++ = 'f';\n\t\t\t}\n\t\t} else {\n\t\t\tif (isupper((int)(unsigned char)c)) {\n\t\t\t\t*buf++ = 'N';\n\t\t\t\t*buf++ = 'A';\n\t\t\t\t*buf++ = 'N';\n\t\t\t} else {\n\t\t\t\t*buf++ = 'n';\n\t\t\t\t*buf++ = 'a';\n\t\t\t\t*buf++ = 'n';\n\t\t\t}\n\t\t}\n\n\t\t/* No zero-padding with text values */\n",
  "violation-line": 918,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    990,
    991,
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010
  ],
  "before-code": "\n\t\tif (require_dp || (precision != 0)) {\n\t\t\t*buf++ = '.';\n\t\t}\n\n\t\t/* Get the fractional value as a hexadecimal string, using x\n\t\t * for a and X for A.\n\t\t */\n\t\tstruct conversion aconv = {\n\t\t\t.specifier = isupper((unsigned char)c) ? 'X' : 'x',\n\t\t};\n\t\tconst char *spe = *bpe;\n\t\tchar *sp = bps + (spe - bps);\n\n\t\tif (fract != 0) {\n\t\t\tsp = encode_uint(fract, &aconv, buf, spe);\n\t\t}\n\n\t\t/* Pad out to full range since this is below the decimal\n\t\t * point.\n\t\t */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013
  ],
  "after-code": "\n\t\tif (require_dp || (precision != 0)) {\n\t\t\t*buf++ = '.';\n\t\t}\n\n\t\t/* Get the fractional value as a hexadecimal string, using x\n\t\t * for a and X for A.\n\t\t */\n\t\tstruct conversion aconv = {\n\t\t\t.specifier = isupper((int)(unsigned char)c) ? 'X' : 'x',\n\t\t};\n\t\tconst char *spe = *bpe;\n\t\tchar *sp = bps + (spe - bps);\n\n\t\tif (fract != 0) {\n\t\t\tsp = encode_uint(fract, &aconv, buf, spe);\n\t\t}\n\n\t\t/* Pad out to full range since this is below the decimal\n\t\t * point.\n\t\t */\n",
  "violation-line": 1000,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1029,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049
  ],
  "before-code": "\n\t\t*buf++ = 'p';\n\t\tif (expo >= 0) {\n\t\t\t*buf++ = '+';\n\t\t} else {\n\t\t\t*buf++ = '-';\n\t\t\texpo = -expo;\n\t\t}\n\n\t\taconv.specifier = 'i';\n\t\tsp = encode_uint(expo, &aconv, buf, spe);\n\n\t\twhile (sp < spe) {\n\t\t\t*buf++ = *sp++;\n\t\t}\n\n\t\t*bpe = buf;\n\t\treturn bps;\n\t}\n\n\t/* Remainder of code operates on a 64-bit fraction, so shift up (and\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050,
    1051,
    1052
  ],
  "after-code": "\n\t\t*buf++ = 'p';\n\t\tif (expo >= 0) {\n\t\t\t*buf++ = '+';\n\t\t} else {\n\t\t\t*buf++ = '-';\n\t\t\texpo = -expo;\n\t\t}\n\n\t\taconv.specifier = 'i';\n\t\tsp = encode_uint((unsigned int)expo, &aconv, buf, spe);\n\n\t\twhile (sp < spe) {\n\t\t\t*buf++ = *sp++;\n\t\t}\n\n\t\t*bpe = buf;\n\t\treturn bps;\n\t}\n\n\t/* Remainder of code operates on a 64-bit fraction, so shift up (and\n",
  "violation-line": 1039,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050
  ],
  "before-code": "\t\t*buf++ = 'p';\n\t\tif (expo >= 0) {\n\t\t\t*buf++ = '+';\n\t\t} else {\n\t\t\t*buf++ = '-';\n\t\t\texpo = -expo;\n\t\t}\n\n\t\taconv.specifier = 'i';\n\t\tsp = encode_uint(expo, &aconv, buf, spe);\n\n\t\twhile (sp < spe) {\n\t\t\t*buf++ = *sp++;\n\t\t}\n\n\t\t*bpe = buf;\n\t\treturn bps;\n\t}\n\n\t/* Remainder of code operates on a 64-bit fraction, so shift up (and\n\t * discard garbage from the exponent where the implicit 1 would be\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1033,
    1034,
    1035,
    1036,
    1037,
    1038,
    1039,
    1040,
    1041,
    1042,
    1043,
    1044,
    1045,
    1046,
    1047,
    1048,
    1049,
    1050,
    1051,
    1052,
    1053
  ],
  "after-code": "\t\t*buf++ = 'p';\n\t\tif (expo >= 0) {\n\t\t\t*buf++ = '+';\n\t\t} else {\n\t\t\t*buf++ = '-';\n\t\t\texpo = -expo;\n\t\t}\n\n\t\taconv.specifier = 'i';\n\t\tsp = encode_uint((unsigned int)expo, &aconv, buf, spe);\n\n\t\twhile (sp < spe) {\n\t\t\t*buf++ = *sp++;\n\t\t}\n\n\t\t*bpe = buf;\n\t\treturn bps;\n\t}\n\n\t/* Remainder of code operates on a 64-bit fraction, so shift up (and\n\t * discard garbage from the exponent where the implicit 1 would be\n",
  "violation-line": 1040,
  "violation-message": "The int type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1494,
    1495,
    1496,
    1497,
    1498,
    1499,
    1500,
    1501,
    1502,
    1503,
    1504,
    1505,
    1506,
    1507,
    1508,
    1509,
    1510,
    1511,
    1512,
    1513,
    1514,
    1515,
    1516
  ],
  "before-code": "\t\t\t\t * Assume that size_t and ptrdiff_t are the\n\t\t\t\t * unsigned and signed equivalents of each\n\t\t\t\t * other.  This can be checked in a platform\n\t\t\t\t * test.\n\t\t\t\t */\n\t\t\t\tvalue->sint =\n\t\t\t\t\t(sint_value_type)va_arg(ap, ptrdiff_t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (length_mod == LENGTH_HH) {\n\t\t\t\tvalue->sint = (char)value->sint;\n\t\t\t} else if (length_mod == LENGTH_H) {\n\t\t\t\tvalue->sint = (short)value->sint;\n\t\t\t}\n\t\t} else if (specifier_cat == SPECIFIER_UINT) {\n\t\t\tswitch (length_mod) {\n\t\t\tdefault:\n\t\t\tcase LENGTH_NONE:\n\t\t\tcase LENGTH_HH:\n\t\t\tcase LENGTH_H:\n\t\t\t\tvalue->uint = va_arg(ap, unsigned int);\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_L:\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1493,
    1494,
    1495,
    1496,
    1497,
    1498,
    1499,
    1500,
    1501,
    1502,
    1503,
    1504,
    1505,
    1506,
    1507,
    1508,
    1509,
    1510,
    1511,
    1512,
    1513,
    1514,
    1515
  ],
  "after-code": "\t\t\t\t * Assume that size_t and ptrdiff_t are the\n\t\t\t\t * unsigned and signed equivalents of each\n\t\t\t\t * other.  This can be checked in a platform\n\t\t\t\t * test.\n\t\t\t\t */\n\t\t\t\tvalue->sint =\n\t\t\t\t\t(sint_value_type)va_arg(ap, ptrdiff_t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (conv->length_mod == (uint8_t)LENGTH_HH) {\n\t\t\t\tvalue->sint = (signed char)value->sint;\n\t\t\t} else if (conv->length_mod == (uint8_t)LENGTH_H) {\n\t\t\t\tvalue->sint = (short)value->sint;\n\t\t\t}\n\t\t} else if (conv->specifier_cat == (uint8_t)SPECIFIER_UINT) {\n\t\t\tswitch (conv->length_mod) {\n\t\t\tdefault:\n\t\t\tcase (uint8_t)LENGTH_NONE:\n\t\t\tcase (uint8_t)LENGTH_HH:\n\t\t\tcase (uint8_t)LENGTH_H:\n\t\t\t\tvalue->uint = va_arg(ap, unsigned int);\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_L:\n",
  "violation-line": 1505,
  "violation-message": "The char type has been assigned to the object of long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1510,
    1511,
    1512,
    1513,
    1514,
    1515,
    1516,
    1517,
    1518,
    1519,
    1520,
    1521,
    1522,
    1523,
    1524,
    1525,
    1526,
    1527,
    1528,
    1529,
    1530,
    1531
  ],
  "before-code": "\t\t\tdefault:\n\t\t\tcase LENGTH_NONE:\n\t\t\tcase LENGTH_HH:\n\t\t\tcase LENGTH_H:\n\t\t\t\tvalue->uint = va_arg(ap, unsigned int);\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_L:\n\t\t\t\tif ((!WCHAR_IS_SIGNED)\n\t\t\t\t    && (conv->specifier == 'c')) {\n\t\t\t\t\tvalue->uint = (wchar_t)va_arg(ap,\n\t\t\t\t\t\t\t      WINT_TYPE);\n\t\t\t\t} else {\n\t\t\t\t\tvalue->uint = va_arg(ap, unsigned long);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_LL:\n\t\t\t\tvalue->uint =\n\t\t\t\t\t(uint_value_type)va_arg(ap,\n\t\t\t\t\t\tunsigned long long);\n\t\t\t\tbreak;\n\t\t\tcase LENGTH_J:\n\t\t\t\tvalue->uint =\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1509,
    1510,
    1511,
    1512,
    1513,
    1514,
    1515,
    1516,
    1517,
    1518,
    1519,
    1520,
    1521,
    1522,
    1523,
    1524,
    1525,
    1526,
    1527,
    1528,
    1529,
    1530
  ],
  "after-code": "\t\t\tdefault:\n\t\t\tcase (uint8_t)LENGTH_NONE:\n\t\t\tcase (uint8_t)LENGTH_HH:\n\t\t\tcase (uint8_t)LENGTH_H:\n\t\t\t\tvalue->uint = va_arg(ap, unsigned int);\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_L:\n\t\t\t\tif ((!WCHAR_IS_SIGNED)\n\t\t\t\t    && (conv->specifier == 'c')) {\n\t\t\t\t\tvalue->uint = (uint_value_type)(wchar_t)\n\t\t\t\t\t\tva_arg(ap, WINT_TYPE);\n\t\t\t\t} else {\n\t\t\t\t\tvalue->uint = va_arg(ap, unsigned long);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_LL:\n\t\t\t\tvalue->uint =\n\t\t\t\t\t(uint_value_type)va_arg(ap,\n\t\t\t\t\t\tunsigned long long);\n\t\t\t\tbreak;\n\t\t\tcase (uint8_t)LENGTH_J:\n\t\t\t\tvalue->uint =\n",
  "violation-line": 1520,
  "violation-message": "The int type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1553,
    1554,
    1555,
    1556,
    1557,
    1558,
    1559,
    1560,
    1561,
    1562,
    1563,
    1564,
    1565,
    1566,
    1567,
    1568,
    1569,
    1570,
    1571,
    1572,
    1573
  ],
  "before-code": "\t\t\tvalue->ptr = va_arg(ap, void *);\n\t\t}\n\n\t\t/* We've now consumed all arguments related to this\n\t\t * specification.  If the conversion is invalid, or is\n\t\t * something we don't support, then output the original\n\t\t * specification and move on.\n\t\t */\n\t\tif (conv->invalid || conv->unsupported) {\n\t\t\tOUTS(sp, fp);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Do formatting, either into the buffer or\n\t\t * referencing external data.\n\t\t */\n\t\tswitch (conv->specifier) {\n\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1552,
    1553,
    1554,
    1555,
    1556,
    1557,
    1558,
    1559,
    1560,
    1561,
    1562,
    1563,
    1564,
    1565,
    1566,
    1567,
    1568,
    1569,
    1570,
    1571,
    1572
  ],
  "after-code": "\t\t\tvalue->ptr = va_arg(ap, void *);\n\t\t}\n\n\t\t/* We've now consumed all arguments related to this\n\t\t * specification.  If the conversion is invalid, or is\n\t\t * something we don't support, then output the original\n\t\t * specification and move on.\n\t\t */\n\t\tif (conv->invalid || conv->unsupported) {\n\t\t\tOUTS(sp, fp);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Do formatting, either into the buffer or\n\t\t * referencing external data.\n\t\t */\n\t\tswitch (conv->specifier) {\n\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n",
  "violation-line": 1563,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1561,
    1562,
    1563,
    1564,
    1565,
    1566,
    1567,
    1568,
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581
  ],
  "before-code": "\t\tif (conv->invalid || conv->unsupported) {\n\t\t\tOUTS(sp, fp);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Do formatting, either into the buffer or\n\t\t * referencing external data.\n\t\t */\n\t\tswitch (conv->specifier) {\n\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n\t\t\tbps = (const char *)value->ptr;\n\n\t\t\tsize_t len;\n\n\t\t\tif (precision >= 0) {\n\t\t\t\tlen = strnlen(bps, precision);\n\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1560,
    1561,
    1562,
    1563,
    1564,
    1565,
    1566,
    1567,
    1568,
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580
  ],
  "after-code": "\t\tif (conv->invalid || conv->unsupported) {\n\t\t\tOUTS(sp, fp);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Do formatting, either into the buffer or\n\t\t * referencing external data.\n\t\t */\n\t\tswitch (conv->specifier) {\n\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n\t\t\tbps = (const char *)value->ptr;\n\n\t\t\tsize_t len;\n\n\t\t\tif (precision >= 0) {\n\t\t\t\tlen = strnlen(bps, (size_t)precision);\n\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n",
  "violation-line": 1571,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1564,
    1565,
    1566,
    1567,
    1568,
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584
  ],
  "before-code": "\t\t}\n\n\t\t/* Do formatting, either into the buffer or\n\t\t * referencing external data.\n\t\t */\n\t\tswitch (conv->specifier) {\n\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n\t\t\tbps = (const char *)value->ptr;\n\n\t\t\tsize_t len;\n\n\t\t\tif (precision >= 0) {\n\t\t\t\tlen = strnlen(bps, precision);\n\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n\t\t\t}\n\n\t\t\tbpe = bps + len;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1563,
    1564,
    1565,
    1566,
    1567,
    1568,
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583
  ],
  "after-code": "\t\t}\n\n\t\t/* Do formatting, either into the buffer or\n\t\t * referencing external data.\n\t\t */\n\t\tswitch (conv->specifier) {\n\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n\t\t\tbps = (const char *)value->ptr;\n\n\t\t\tsize_t len;\n\n\t\t\tif (precision >= 0) {\n\t\t\t\tlen = strnlen(bps, (size_t)precision);\n\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n\t\t\t}\n\n\t\t\tbpe = bps + len;\n",
  "violation-line": 1574,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589,
    1590
  ],
  "before-code": "\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n\t\t\tbps = (const char *)value->ptr;\n\n\t\t\tsize_t len;\n\n\t\t\tif (precision >= 0) {\n\t\t\t\tlen = strnlen(bps, precision);\n\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n\t\t\t}\n\n\t\t\tbpe = bps + len;\n\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1569,
    1570,
    1571,
    1572,
    1573,
    1574,
    1575,
    1576,
    1577,
    1578,
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589
  ],
  "after-code": "\t\tcase '%':\n\t\t\tOUTC('%');\n\t\t\tbreak;\n\t\tcase 's': {\n\t\t\tbps = (const char *)value->ptr;\n\n\t\t\tsize_t len;\n\n\t\t\tif (precision >= 0) {\n\t\t\t\tlen = strnlen(bps, (size_t)precision);\n\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n\t\t\t}\n\n\t\t\tbpe = bps + len;\n\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n",
  "violation-line": 1580,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600
  ],
  "before-code": "\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n\t\t\t}\n\n\t\t\tbpe = bps + len;\n\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1579,
    1580,
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599
  ],
  "after-code": "\t\t\t} else {\n\t\t\t\tlen = strlen(bps);\n\t\t\t}\n\n\t\t\tbpe = bps + len;\n\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = (CHAR_IS_SIGNED ? (char)value->sint : (char)value->uint);\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n",
  "violation-line": 1590,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600,
    1601,
    1602
  ],
  "before-code": "\t\t\t}\n\n\t\t\tbpe = bps + len;\n\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n\n\t\t\t/* sint/uint overlay in the union, and so\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1581,
    1582,
    1583,
    1584,
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600,
    1601
  ],
  "after-code": "\t\t\t}\n\n\t\t\tbpe = bps + len;\n\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = (CHAR_IS_SIGNED ? (char)value->sint : (char)value->uint);\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n\n\t\t\t/* sint/uint overlay in the union, and so\n",
  "violation-line": 1592,
  "violation-message": "The unsigned long long type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600,
    1601,
    1602,
    1603,
    1604,
    1605
  ],
  "before-code": "\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n\n\t\t\t/* sint/uint overlay in the union, and so\n\t\t\t * can't appear in read and write operations\n\t\t\t * in the same statement.\n\t\t\t */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1584,
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600,
    1601,
    1602,
    1603,
    1604
  ],
  "after-code": "\t\t\tprecision = -1;\n\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = (CHAR_IS_SIGNED ? (char)value->sint : (char)value->uint);\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n\n\t\t\t/* sint/uint overlay in the union, and so\n\t\t\t * can't appear in read and write operations\n\t\t\t * in the same statement.\n\t\t\t */\n",
  "violation-line": 1595,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600,
    1601,
    1602,
    1603,
    1604,
    1605,
    1606
  ],
  "before-code": "\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n\n\t\t\t/* sint/uint overlay in the union, and so\n\t\t\t * can't appear in read and write operations\n\t\t\t * in the same statement.\n\t\t\t */\n\t\t\tsint = value->sint;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1585,
    1586,
    1587,
    1588,
    1589,
    1590,
    1591,
    1592,
    1593,
    1594,
    1595,
    1596,
    1597,
    1598,
    1599,
    1600,
    1601,
    1602,
    1603,
    1604,
    1605
  ],
  "after-code": "\n\t\t\tbreak;\n\t\t}\n\t\tcase 'c':\n\t\t\tbps = buf;\n\t\t\tbuf[0] = (CHAR_IS_SIGNED ? (char)value->sint : (char)value->uint);\n\t\t\tbpe = buf + 1;\n\t\t\tbreak;\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tif (conv->flag_plus) {\n\t\t\t\tsign = '+';\n\t\t\t} else if (conv->flag_space) {\n\t\t\t\tsign = ' ';\n\t\t\t}\n\n\t\t\t/* sint/uint overlay in the union, and so\n\t\t\t * can't appear in read and write operations\n\t\t\t * in the same statement.\n\t\t\t */\n\t\t\tsint = value->sint;\n",
  "violation-line": 1596,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1606,
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626
  ],
  "before-code": "\t\t\tsint = value->sint;\n\t\t\tif (sint < 0) {\n\t\t\t\tsign = '-';\n\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1605,
    1606,
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625
  ],
  "after-code": "\t\t\tsint = value->sint;\n\t\t\tif (sint < 0) {\n\t\t\t\tsign = '-';\n\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n",
  "violation-line": 1616,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627
  ],
  "before-code": "\t\t\tif (sint < 0) {\n\t\t\t\tsign = '-';\n\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1606,
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626
  ],
  "after-code": "\t\t\tif (sint < 0) {\n\t\t\t\tsign = '-';\n\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n",
  "violation-line": 1617,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627,
    1628
  ],
  "before-code": "\t\t\t\tsign = '-';\n\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n\t\t\t\tsize_t len = bpe - bps;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1607,
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627
  ],
  "after-code": "\t\t\t\tsign = '-';\n\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n\t\t\t\tsize_t len = (size_t)(bpe - bps);\n",
  "violation-line": 1618,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627,
    1628,
    1629
  ],
  "before-code": "\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n\t\t\t\tsize_t len = bpe - bps;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1608,
    1609,
    1610,
    1611,
    1612,
    1613,
    1614,
    1615,
    1616,
    1617,
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627,
    1628
  ],
  "after-code": "\t\t\t\tvalue->uint = (uint_value_type)-sint;\n\t\t\t} else {\n\t\t\t\tvalue->uint = (uint_value_type)sint;\n\t\t\t}\n\n\t\t\t__fallthrough;\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n\t\t\t\tsize_t len = (size_t)(bpe - bps);\n\n",
  "violation-line": 1619,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627,
    1628,
    1629,
    1630,
    1631,
    1632,
    1633,
    1634,
    1635,
    1636,
    1637,
    1638,
    1639
  ],
  "before-code": "\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n\t\t\t\tsize_t len = bpe - bps;\n\n\t\t\t\t/* Zero-padding flag is ignored for integer\n\t\t\t\t * conversions with precision.\n\t\t\t\t */\n\t\t\t\tconv->flag_zero = false;\n\n\t\t\t\t/* Set pad0_value to satisfy precision */\n\t\t\t\tif (len < (size_t)precision) {\n\t\t\t\t\tconv->pad0_value = precision - (int)len;\n\t\t\t\t}\n\t\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1618,
    1619,
    1620,
    1621,
    1622,
    1623,
    1624,
    1625,
    1626,
    1627,
    1628,
    1629,
    1630,
    1631,
    1632,
    1633,
    1634,
    1635,
    1636,
    1637,
    1638
  ],
  "after-code": "\t\t\tbps = encode_uint(value->uint, conv, buf, bpe);\n\n\t\tprec_int_pad0:\n\t\t\t/* Update pad0 values based on precision and converted\n\t\t\t * length.  Note that a non-empty sign is not in the\n\t\t\t * converted sequence, but it does not affect the\n\t\t\t * padding size.\n\t\t\t */\n\t\t\tif (precision >= 0) {\n\t\t\t\tsize_t len = (size_t)(bpe - bps);\n\n\t\t\t\t/* Zero-padding flag is ignored for integer\n\t\t\t\t * conversions with precision.\n\t\t\t\t */\n\t\t\t\tconv->flag_zero = false;\n\n\t\t\t\t/* Set pad0_value to satisfy precision */\n\t\t\t\tif (len < (size_t)precision) {\n\t\t\t\t\tconv->pad0_value = precision - (int)len;\n\t\t\t\t}\n\t\t\t}\n",
  "violation-line": 1629,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1633,
    1634,
    1635,
    1636,
    1637,
    1638,
    1639,
    1640,
    1641,
    1642,
    1643,
    1644,
    1645,
    1646,
    1647,
    1648,
    1649,
    1650,
    1651,
    1652,
    1653
  ],
  "before-code": "\t\t\t\tconv->flag_zero = false;\n\n\t\t\t\t/* Set pad0_value to satisfy precision */\n\t\t\t\tif (len < (size_t)precision) {\n\t\t\t\t\tconv->pad0_value = precision - (int)len;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'p':\n\t\t\t/* Implementation-defined: null is \"(nil)\", non-null\n\t\t\t * has 0x prefix followed by significant address hex\n\t\t\t * digits, no leading zeros.\n\t\t\t */\n\t\t\tif (value->ptr != NULL) {\n\t\t\t\tbps = encode_uint((uintptr_t)value->ptr, conv,\n\t\t\t\t\t\t  buf, bpe);\n\n\t\t\t\t/* Use 0x prefix */\n\t\t\t\tconv->altform_0c = true;\n\t\t\t\tconv->specifier = 'x';\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1632,
    1633,
    1634,
    1635,
    1636,
    1637,
    1638,
    1639,
    1640,
    1641,
    1642,
    1643,
    1644,
    1645,
    1646,
    1647,
    1648,
    1649,
    1650,
    1651,
    1652
  ],
  "after-code": "\t\t\t\tconv->flag_zero = false;\n\n\t\t\t\t/* Set pad0_value to satisfy precision */\n\t\t\t\tif (len < (size_t)precision) {\n\t\t\t\t\tconv->pad0_value = precision - (int)len;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'p':\n\t\t\t/* Implementation-defined: null is \"(nil)\", non-null\n\t\t\t * has 0x prefix followed by significant address hex\n\t\t\t * digits, no leading zeros.\n\t\t\t */\n\t\t\tif (value->ptr != NULL) {\n\t\t\t\tbps = encode_uint((uintptr_t)value->ptr, conv,\n\t\t\t\t\t\t  buf, bpe);\n\n\t\t\t\t/* Use 0x prefix */\n\t\t\t\tconv->altform_0c = true;\n\t\t\t\tconv->specifier = 'x';\n",
  "violation-line": 1643,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1644,
    1645,
    1646,
    1647,
    1648,
    1649,
    1650,
    1651,
    1652,
    1653,
    1654,
    1655,
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663,
    1664
  ],
  "before-code": "\t\t\t * has 0x prefix followed by significant address hex\n\t\t\t * digits, no leading zeros.\n\t\t\t */\n\t\t\tif (value->ptr != NULL) {\n\t\t\t\tbps = encode_uint((uintptr_t)value->ptr, conv,\n\t\t\t\t\t\t  buf, bpe);\n\n\t\t\t\t/* Use 0x prefix */\n\t\t\t\tconv->altform_0c = true;\n\t\t\t\tconv->specifier = 'x';\n\n\t\t\t\tgoto prec_int_pad0;\n\t\t\t}\n\n\t\t\tbps = \"(nil)\";\n\t\t\tbpe = bps + 5;\n\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1643,
    1644,
    1645,
    1646,
    1647,
    1648,
    1649,
    1650,
    1651,
    1652,
    1653,
    1654,
    1655,
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663
  ],
  "after-code": "\t\t\t * has 0x prefix followed by significant address hex\n\t\t\t * digits, no leading zeros.\n\t\t\t */\n\t\t\tif (value->ptr != NULL) {\n\t\t\t\tbps = encode_uint((uintptr_t)value->ptr, conv,\n\t\t\t\t\t\t  buf, bpe);\n\n\t\t\t\t/* Use 0x prefix */\n\t\t\t\tconv->altform_0c = true;\n\t\t\t\tconv->specifier = 'x';\n\n\t\t\t\tgoto prec_int_pad0;\n\t\t\t}\n\n\t\t\tbps = \"(nil)\";\n\t\t\tbpe = bps + 5;\n\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n",
  "violation-line": 1654,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1653,
    1654,
    1655,
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673
  ],
  "before-code": "\t\t\t\tconv->specifier = 'x';\n\n\t\t\t\tgoto prec_int_pad0;\n\t\t\t}\n\n\t\t\tbps = \"(nil)\";\n\t\t\tbpe = bps + 5;\n\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase FP_CONV_CASES:\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {\n\t\t\t\tbps = encode_float(value->dbl, conv, precision,\n\t\t\t\t\t\t   &sign, buf, &bpe);\n\t\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1652,
    1653,
    1654,
    1655,
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672
  ],
  "after-code": "\t\t\t\tconv->specifier = 'x';\n\n\t\t\t\tgoto prec_int_pad0;\n\t\t\t}\n\n\t\t\tbps = \"(nil)\";\n\t\t\tbpe = bps + 5;\n\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase FP_CONV_CASES:\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {\n\t\t\t\tbps = encode_float(value->dbl, conv, precision,\n\t\t\t\t\t\t   &sign, buf, &bpe);\n\t\t\t}\n",
  "violation-line": 1663,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1655,
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673,
    1674,
    1675
  ],
  "before-code": "\t\t\t\tgoto prec_int_pad0;\n\t\t\t}\n\n\t\t\tbps = \"(nil)\";\n\t\t\tbpe = bps + 5;\n\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase FP_CONV_CASES:\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {\n\t\t\t\tbps = encode_float(value->dbl, conv, precision,\n\t\t\t\t\t\t   &sign, buf, &bpe);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1654,
    1655,
    1656,
    1657,
    1658,
    1659,
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673,
    1674
  ],
  "after-code": "\t\t\t\tgoto prec_int_pad0;\n\t\t\t}\n\n\t\t\tbps = \"(nil)\";\n\t\t\tbpe = bps + 5;\n\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase FP_CONV_CASES:\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {\n\t\t\t\tbps = encode_float(value->dbl, conv, precision,\n\t\t\t\t\t\t   &sign, buf, &bpe);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n",
  "violation-line": 1665,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673,
    1674,
    1675,
    1676,
    1677,
    1678,
    1679,
    1680
  ],
  "before-code": "\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase FP_CONV_CASES:\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {\n\t\t\t\tbps = encode_float(value->dbl, conv, precision,\n\t\t\t\t\t\t   &sign, buf, &bpe);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t * programming. Static analysis tool won't raise a violation\n\t\t\t * if default is empty, but has that comment.\n\t\t\t */\n\t\t\tbreak;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1659,
    1660,
    1661,
    1662,
    1663,
    1664,
    1665,
    1666,
    1667,
    1668,
    1669,
    1670,
    1671,
    1672,
    1673,
    1674,
    1675,
    1676,
    1677,
    1678,
    1679
  ],
  "after-code": "\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {\n\t\t\t\tstore_count(conv, value->ptr, count);\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase FP_CONV_CASES:\n\t\t\tif (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {\n\t\t\t\tbps = encode_float(value->dbl, conv, precision,\n\t\t\t\t\t\t   &sign, buf, &bpe);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/* Add an empty default with break, this is a defensive\n\t\t\t * programming. Static analysis tool won't raise a violation\n\t\t\t * if default is empty, but has that comment.\n\t\t\t */\n\t\t\tbreak;\n",
  "violation-line": 1670,
  "violation-message": "The char type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1700,
    1701,
    1702,
    1703,
    1704,
    1705,
    1706,
    1707,
    1708,
    1709,
    1710,
    1711,
    1712,
    1713,
    1714,
    1715,
    1716,
    1717,
    1718,
    1719,
    1720
  ],
  "before-code": "\t\t *   * any decimal point in the converted value\n\t\t *   * any pad0_value padding (postdp)\n\t\t *   * any pre-exponent content from the converted value\n\t\t *   * any pad0_pre_exp padding\n\t\t *   * any exponent content from the converted value\n\t\t * * for non-FP:\n\t\t *   * any pad0_prefix\n\t\t *   * the converted value\n\t\t */\n\t\tsize_t nj_len = (bpe - bps);\n\t\tint pad_len = 0;\n\n\t\tif (sign != 0) {\n\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tif (conv->altform_0c) {\n\t\t\tnj_len += 2U;\n\t\t} else if (conv->altform_0) {\n\t\t\tnj_len += 1U;\n\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1699,
    1700,
    1701,
    1702,
    1703,
    1704,
    1705,
    1706,
    1707,
    1708,
    1709,
    1710,
    1711,
    1712,
    1713,
    1714,
    1715,
    1716,
    1717,
    1718,
    1719
  ],
  "after-code": "\t\t *   * any decimal point in the converted value\n\t\t *   * any pad0_value padding (postdp)\n\t\t *   * any pre-exponent content from the converted value\n\t\t *   * any pad0_pre_exp padding\n\t\t *   * any exponent content from the converted value\n\t\t * * for non-FP:\n\t\t *   * any pad0_prefix\n\t\t *   * the converted value\n\t\t */\n\t\tsize_t nj_len = (size_t)(bpe - bps);\n\t\tint pad_len = 0;\n\n\t\tif (sign != '\\0') {\n\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tif (conv->altform_0c) {\n\t\t\tnj_len += 2U;\n\t\t} else if (conv->altform_0) {\n\t\t\tnj_len += 1U;\n\t\t}\n",
  "violation-line": 1710,
  "violation-message": "The long type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1713,
    1714,
    1715,
    1716,
    1717,
    1718,
    1719,
    1720,
    1721,
    1722,
    1723,
    1724,
    1725,
    1726,
    1727,
    1728,
    1729,
    1730,
    1731,
    1732,
    1733
  ],
  "before-code": "\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tif (conv->altform_0c) {\n\t\t\tnj_len += 2U;\n\t\t} else if (conv->altform_0) {\n\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tnj_len += conv->pad0_value;\n\t\tif (conv->pad_fp) {\n\t\t\tnj_len += conv->pad0_pre_exp;\n\t\t}\n\n\t\t/* If we have a width update width to hold the padding we need\n\t\t * for justification.  The result may be negative, which will\n\t\t * result in no padding.\n\t\t *\n\t\t * If a non-negative padding width is present and we're doing\n\t\t * right-justification, emit the padding now.\n\t\t */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1712,
    1713,
    1714,
    1715,
    1716,
    1717,
    1718,
    1719,
    1720,
    1721,
    1722,
    1723,
    1724,
    1725,
    1726,
    1727,
    1728,
    1729,
    1730,
    1731,
    1732
  ],
  "after-code": "\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tif (conv->altform_0c) {\n\t\t\tnj_len += 2U;\n\t\t} else if (conv->altform_0) {\n\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tnj_len += (size_t)conv->pad0_value;\n\t\tif (conv->pad_fp) {\n\t\t\tnj_len += (size_t)conv->pad0_pre_exp;\n\t\t}\n\n\t\t/* If we have a width update width to hold the padding we need\n\t\t * for justification.  The result may be negative, which will\n\t\t * result in no padding.\n\t\t *\n\t\t * If a non-negative padding width is present and we're doing\n\t\t * right-justification, emit the padding now.\n\t\t */\n",
  "violation-line": 1723,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1715,
    1716,
    1717,
    1718,
    1719,
    1720,
    1721,
    1722,
    1723,
    1724,
    1725,
    1726,
    1727,
    1728,
    1729,
    1730,
    1731,
    1732,
    1733,
    1734,
    1735
  ],
  "before-code": "\n\t\tif (conv->altform_0c) {\n\t\t\tnj_len += 2U;\n\t\t} else if (conv->altform_0) {\n\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tnj_len += conv->pad0_value;\n\t\tif (conv->pad_fp) {\n\t\t\tnj_len += conv->pad0_pre_exp;\n\t\t}\n\n\t\t/* If we have a width update width to hold the padding we need\n\t\t * for justification.  The result may be negative, which will\n\t\t * result in no padding.\n\t\t *\n\t\t * If a non-negative padding width is present and we're doing\n\t\t * right-justification, emit the padding now.\n\t\t */\n\t\tif (width > 0) {\n\t\t\twidth -= (int)nj_len;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1714,
    1715,
    1716,
    1717,
    1718,
    1719,
    1720,
    1721,
    1722,
    1723,
    1724,
    1725,
    1726,
    1727,
    1728,
    1729,
    1730,
    1731,
    1732,
    1733,
    1734
  ],
  "after-code": "\n\t\tif (conv->altform_0c) {\n\t\t\tnj_len += 2U;\n\t\t} else if (conv->altform_0) {\n\t\t\tnj_len += 1U;\n\t\t}\n\n\t\tnj_len += (size_t)conv->pad0_value;\n\t\tif (conv->pad_fp) {\n\t\t\tnj_len += (size_t)conv->pad0_pre_exp;\n\t\t}\n\n\t\t/* If we have a width update width to hold the padding we need\n\t\t * for justification.  The result may be negative, which will\n\t\t * result in no padding.\n\t\t *\n\t\t * If a non-negative padding width is present and we're doing\n\t\t * right-justification, emit the padding now.\n\t\t */\n\t\tif (width > 0) {\n\t\t\twidth -= (int)nj_len;\n",
  "violation-line": 1725,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1764,
    1765,
    1766,
    1767,
    1768,
    1769,
    1770,
    1771,
    1772,
    1773,
    1774,
    1775,
    1776,
    1777,
    1778,
    1779,
    1780,
    1781,
    1782,
    1783,
    1784
  ],
  "before-code": "\t\tif ((IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) && conv->pad_fp) {\n\t\t\tconst char *cp = bps;\n\n\t\t\tif (conv->specifier_a) {\n\t\t\t\t/* Only padding is pre_exp */\n\t\t\t\twhile (*cp != 'p') {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (isdigit((unsigned char)*cp)) {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\n\t\t\t\tpad_len = conv->pad0_value;\n\t\t\t\tif (!conv->pad_postdp) {\n\t\t\t\t\twhile (pad_len-- > 0) {\n\t\t\t\t\t\tOUTC('0');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (*cp == '.') {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1763,
    1764,
    1765,
    1766,
    1767,
    1768,
    1769,
    1770,
    1771,
    1772,
    1773,
    1774,
    1775,
    1776,
    1777,
    1778,
    1779,
    1780,
    1781,
    1782,
    1783
  ],
  "after-code": "\t\tif ((IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) && conv->pad_fp) {\n\t\t\tconst char *cp = bps;\n\n\t\t\tif (conv->specifier_a) {\n\t\t\t\t/* Only padding is pre_exp */\n\t\t\t\twhile (*cp != 'p') {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (isdigit((int)(unsigned char)*cp)) {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\n\t\t\t\tpad_len = conv->pad0_value;\n\t\t\t\tif (!conv->pad_postdp) {\n\t\t\t\t\twhile (pad_len-- > 0) {\n\t\t\t\t\t\tOUTC('0');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (*cp == '.') {\n",
  "violation-line": 1774,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1784,
    1785,
    1786,
    1787,
    1788,
    1789,
    1790,
    1791,
    1792,
    1793,
    1794,
    1795,
    1796,
    1797,
    1798,
    1799,
    1800,
    1801,
    1802,
    1803,
    1804
  ],
  "before-code": "\t\t\t\tif (*cp == '.') {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t\t/* Remaining padding is\n\t\t\t\t\t * post-dp.\n\t\t\t\t\t */\n\t\t\t\t\twhile (pad_len-- > 0) {\n\t\t\t\t\t\tOUTC('0');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (isdigit((unsigned char)*cp)) {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_pre_exp;\n\t\t\twhile (pad_len-- > 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tOUTS(cp, bpe);\n\t\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1783,
    1784,
    1785,
    1786,
    1787,
    1788,
    1789,
    1790,
    1791,
    1792,
    1793,
    1794,
    1795,
    1796,
    1797,
    1798,
    1799,
    1800,
    1801,
    1802,
    1803
  ],
  "after-code": "\t\t\t\tif (*cp == '.') {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t\t/* Remaining padding is\n\t\t\t\t\t * post-dp.\n\t\t\t\t\t */\n\t\t\t\t\twhile (pad_len-- > 0) {\n\t\t\t\t\t\tOUTC('0');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (isdigit((int)(unsigned char)*cp)) {\n\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_pre_exp;\n\t\t\twhile (pad_len-- > 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tOUTS(cp, bpe);\n\t\t} else {\n",
  "violation-line": 1794,
  "violation-message": "The unsigned char type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1794,
    1795,
    1796,
    1797,
    1798,
    1799,
    1800,
    1801,
    1802,
    1803,
    1804,
    1805,
    1806,
    1807,
    1808,
    1809,
    1810,
    1811,
    1812,
    1813,
    1814
  ],
  "before-code": "\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_pre_exp;\n\t\t\twhile (pad_len-- > 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tOUTS(cp, bpe);\n\t\t} else {\n\t\t\tif ((conv->altform_0c | conv->altform_0) != 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tif (conv->altform_0c) {\n\t\t\t\tOUTC(conv->specifier);\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_value;\n\t\t\twhile (pad_len-- > 0) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1793,
    1794,
    1795,
    1796,
    1797,
    1798,
    1799,
    1800,
    1801,
    1802,
    1803,
    1804,
    1805,
    1806,
    1807,
    1808,
    1809,
    1810,
    1811,
    1812,
    1813
  ],
  "after-code": "\t\t\t\t\tOUTC(*cp++);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_pre_exp;\n\t\t\twhile (pad_len-- > 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tOUTS(cp, bpe);\n\t\t} else {\n\t\t\tif (conv->altform_0c || conv->altform_0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tif (conv->altform_0c) {\n\t\t\t\tOUTC(conv->specifier);\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_value;\n\t\t\twhile (pad_len-- > 0) {\n",
  "violation-line": 1804,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1809,
    1810,
    1811,
    1812,
    1813,
    1814,
    1815,
    1816,
    1817,
    1818,
    1819,
    1820,
    1821,
    1822,
    1823,
    1824,
    1825,
    1826,
    1827,
    1828,
    1829
  ],
  "before-code": "\t\t\tif (conv->altform_0c) {\n\t\t\t\tOUTC(conv->specifier);\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_value;\n\t\t\twhile (pad_len-- > 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tOUTS(bps, bpe);\n\t\t}\n\n\t\t/* Finish left justification */\n\t\twhile (width > 0) {\n\t\t\tOUTC(' ');\n\t\t\t--width;\n\t\t}\n\t}\n\n\treturn count;\n#undef OUTS\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1808,
    1809,
    1810,
    1811,
    1812,
    1813,
    1814,
    1815,
    1816,
    1817,
    1818,
    1819,
    1820,
    1821,
    1822,
    1823,
    1824,
    1825,
    1826,
    1827,
    1828
  ],
  "after-code": "\t\t\tif (conv->altform_0c) {\n\t\t\t\tOUTC(conv->specifier);\n\t\t\t}\n\n\t\t\tpad_len = conv->pad0_value;\n\t\t\twhile (pad_len-- > 0) {\n\t\t\t\tOUTC('0');\n\t\t\t}\n\n\t\t\tOUTS(bps, bpe);\n\t\t}\n\n\t\t/* Finish left justification */\n\t\twhile (width > 0) {\n\t\t\tOUTC(' ');\n\t\t\t--width;\n\t\t}\n\t}\n\n\treturn count;\n#undef OUTS\n",
  "violation-line": 1819,
  "violation-message": "The int type has been assigned to the object of unsigned long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "before-lines": [
    1819,
    1820,
    1821,
    1822,
    1823,
    1824,
    1825,
    1826,
    1827,
    1828,
    1829,
    1830,
    1831
  ],
  "before-code": "\t\t}\n\n\t\t/* Finish left justification */\n\t\twhile (width > 0) {\n\t\t\tOUTC(' ');\n\t\t\t--width;\n\t\t}\n\t}\n\n\treturn count;\n#undef OUTS\n#undef OUTC\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_complete.c",
  "after-lines": [
    1818,
    1819,
    1820,
    1821,
    1822,
    1823,
    1824,
    1825,
    1826,
    1827,
    1828,
    1829,
    1830
  ],
  "after-code": "\t\t}\n\n\t\t/* Finish left justification */\n\t\twhile (width > 0) {\n\t\t\tOUTC(' ');\n\t\t\t--width;\n\t\t}\n\t}\n\n\treturn count;\n#undef OUTS\n#undef OUTC\n}\n",
  "violation-line": 1829,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269
  ],
  "before-code": "\t/*\n\t * Then process the format string itself.\n\t * Here we branch directly into the code processing strings\n\t * which is in the middle of the following while() loop. That's the\n\t * reason for the post-decrement on fmt as it will be incremented\n\t * prior to the next (actually first) round of that loop.\n\t */\n\ts = fmt--;\n\talign = VA_STACK_ALIGN(char *);\n\tsize = sizeof(char *);\n\tgoto process_string;\n\n\t/* Scan the format string */\n\twhile (*++fmt != '\\0') {\n\t\tif (!parsing) {\n\t\t\tif (*fmt == '%') {\n\t\t\t\tparsing = true;\n\t\t\t\talign = VA_STACK_ALIGN(int);\n\t\t\t\tsize = sizeof(int);\n\t\t\t}\n\t\t\tcontinue;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272
  ],
  "after-code": "\t/*\n\t * Then process the format string itself.\n\t * Here we branch directly into the code processing strings\n\t * which is in the middle of the following while() loop. That's the\n\t * reason for the post-decrement on fmt as it will be incremented\n\t * prior to the next (actually first) round of that loop.\n\t */\n\ts = fmt--;\n\talign = VA_STACK_ALIGN(char *);\n\tsize = sizeof(char *);\n\tgoto process_string;\n\n\t/* Scan the format string */\n\twhile (*++fmt != '\\0') {\n\t\tif (!parsing) {\n\t\t\tif (*fmt == '%') {\n\t\t\t\tparsing = true;\n\t\t\t\talign = VA_STACK_ALIGN(int);\n\t\t\t\tsize = sizeof(int);\n\t\t\t}\n\t\t\tcontinue;\n",
  "violation-line": 259,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278
  ],
  "before-code": "\tsize = sizeof(char *);\n\tgoto process_string;\n\n\t/* Scan the format string */\n\twhile (*++fmt != '\\0') {\n\t\tif (!parsing) {\n\t\t\tif (*fmt == '%') {\n\t\t\t\tparsing = true;\n\t\t\t\talign = VA_STACK_ALIGN(int);\n\t\t\t\tsize = sizeof(int);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tswitch (*fmt) {\n\t\tcase '%':\n\t\t\tparsing = false;\n\t\t\tcontinue;\n\n\t\tcase '#':\n\t\tcase '-':\n\t\tcase '+':\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281
  ],
  "after-code": "\tsize = sizeof(char *);\n\tgoto process_string;\n\n\t/* Scan the format string */\n\twhile (*++fmt != '\\0') {\n\t\tif (!parsing) {\n\t\t\tif (*fmt == '%') {\n\t\t\t\tparsing = true;\n\t\t\t\talign = VA_STACK_ALIGN(int);\n\t\t\t\tsize = sizeof(int);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tswitch (*fmt) {\n\t\tcase '%':\n\t\t\tparsing = false;\n\t\t\tcontinue;\n\n\t\tcase '#':\n\t\tcase '-':\n\t\tcase '+':\n",
  "violation-line": 268,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312
  ],
  "before-code": "\t\tcase 'l':\n\t\tcase 'L':\n\t\t\tcontinue;\n\n\t\tcase '*':\n\t\t\tbreak;\n\n\t\tcase 'j':\n\t\t\talign = VA_STACK_ALIGN(intmax_t);\n\t\t\tsize = sizeof(intmax_t);\n\t\t\tcontinue;\n\n\t\tcase 'z':\n\t\t\talign = VA_STACK_ALIGN(size_t);\n\t\t\tsize = sizeof(size_t);\n\t\t\tcontinue;\n\n\t\tcase 't':\n\t\t\talign = VA_STACK_ALIGN(ptrdiff_t);\n\t\t\tsize = sizeof(ptrdiff_t);\n\t\t\tcontinue;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315
  ],
  "after-code": "\t\tcase 'l':\n\t\tcase 'L':\n\t\t\tcontinue;\n\n\t\tcase '*':\n\t\t\tbreak;\n\n\t\tcase 'j':\n\t\t\talign = VA_STACK_ALIGN(intmax_t);\n\t\t\tsize = sizeof(intmax_t);\n\t\t\tcontinue;\n\n\t\tcase 'z':\n\t\t\talign = VA_STACK_ALIGN(size_t);\n\t\t\tsize = sizeof(size_t);\n\t\t\tcontinue;\n\n\t\tcase 't':\n\t\t\talign = VA_STACK_ALIGN(ptrdiff_t);\n\t\t\tsize = sizeof(ptrdiff_t);\n\t\t\tcontinue;\n",
  "violation-line": 302,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317
  ],
  "before-code": "\t\t\tbreak;\n\n\t\tcase 'j':\n\t\t\talign = VA_STACK_ALIGN(intmax_t);\n\t\t\tsize = sizeof(intmax_t);\n\t\t\tcontinue;\n\n\t\tcase 'z':\n\t\t\talign = VA_STACK_ALIGN(size_t);\n\t\t\tsize = sizeof(size_t);\n\t\t\tcontinue;\n\n\t\tcase 't':\n\t\t\talign = VA_STACK_ALIGN(ptrdiff_t);\n\t\t\tsize = sizeof(ptrdiff_t);\n\t\t\tcontinue;\n\n\t\tcase 'c':\n\t\tcase 'd':\n\t\tcase 'i':\n\t\tcase 'o':\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320
  ],
  "after-code": "\t\t\tbreak;\n\n\t\tcase 'j':\n\t\t\talign = VA_STACK_ALIGN(intmax_t);\n\t\t\tsize = sizeof(intmax_t);\n\t\t\tcontinue;\n\n\t\tcase 'z':\n\t\t\talign = VA_STACK_ALIGN(size_t);\n\t\t\tsize = sizeof(size_t);\n\t\t\tcontinue;\n\n\t\tcase 't':\n\t\t\talign = VA_STACK_ALIGN(ptrdiff_t);\n\t\t\tsize = sizeof(ptrdiff_t);\n\t\t\tcontinue;\n\n\t\tcase 'c':\n\t\tcase 'd':\n\t\tcase 'i':\n\t\tcase 'o':\n",
  "violation-line": 307,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322
  ],
  "before-code": "\t\t\tcontinue;\n\n\t\tcase 'z':\n\t\t\talign = VA_STACK_ALIGN(size_t);\n\t\t\tsize = sizeof(size_t);\n\t\t\tcontinue;\n\n\t\tcase 't':\n\t\t\talign = VA_STACK_ALIGN(ptrdiff_t);\n\t\t\tsize = sizeof(ptrdiff_t);\n\t\t\tcontinue;\n\n\t\tcase 'c':\n\t\tcase 'd':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tif (fmt[-1] == 'l') {\n\t\t\t\tif (fmt[-2] == 'l') {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325
  ],
  "after-code": "\t\t\tcontinue;\n\n\t\tcase 'z':\n\t\t\talign = VA_STACK_ALIGN(size_t);\n\t\t\tsize = sizeof(size_t);\n\t\t\tcontinue;\n\n\t\tcase 't':\n\t\t\talign = VA_STACK_ALIGN(ptrdiff_t);\n\t\t\tsize = sizeof(ptrdiff_t);\n\t\t\tcontinue;\n\n\t\tcase 'c':\n\t\tcase 'd':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tif (fmt[-1] == 'l') {\n\t\t\t\tif (fmt[-2] == 'l') {\n",
  "violation-line": 312,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335
  ],
  "before-code": "\t\tcase 'd':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tif (fmt[-1] == 'l') {\n\t\t\t\tif (fmt[-2] == 'l') {\n\t\t\t\t\talign = VA_STACK_ALIGN(long long);\n\t\t\t\t\tsize = sizeof(long long);\n\t\t\t\t} else {\n\t\t\t\t\talign = VA_STACK_ALIGN(long);\n\t\t\t\t\tsize = sizeof(long);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\tcase 'p':\n\t\tcase 'n':\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338
  ],
  "after-code": "\t\tcase 'd':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tif (fmt[-1] == 'l') {\n\t\t\t\tif (fmt[-2] == 'l') {\n\t\t\t\t\talign = VA_STACK_ALIGN(long long);\n\t\t\t\t\tsize = sizeof(long long);\n\t\t\t\t} else {\n\t\t\t\t\talign = VA_STACK_ALIGN(long);\n\t\t\t\t\tsize = sizeof(long);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\tcase 'p':\n\t\tcase 'n':\n",
  "violation-line": 325,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338
  ],
  "before-code": "\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tif (fmt[-1] == 'l') {\n\t\t\t\tif (fmt[-2] == 'l') {\n\t\t\t\t\talign = VA_STACK_ALIGN(long long);\n\t\t\t\t\tsize = sizeof(long long);\n\t\t\t\t} else {\n\t\t\t\t\talign = VA_STACK_ALIGN(long);\n\t\t\t\t\tsize = sizeof(long);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\tcase 'p':\n\t\tcase 'n':\n\t\t\talign = VA_STACK_ALIGN(void *);\n\t\t\tsize = sizeof(void *);\n\t\t\tparsing = false;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341
  ],
  "after-code": "\t\tcase 'u':\n\t\tcase 'x':\n\t\tcase 'X':\n\t\t\tif (fmt[-1] == 'l') {\n\t\t\t\tif (fmt[-2] == 'l') {\n\t\t\t\t\talign = VA_STACK_ALIGN(long long);\n\t\t\t\t\tsize = sizeof(long long);\n\t\t\t\t} else {\n\t\t\t\t\talign = VA_STACK_ALIGN(long);\n\t\t\t\t\tsize = sizeof(long);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\tcase 'p':\n\t\tcase 'n':\n\t\t\talign = VA_STACK_ALIGN(void *);\n\t\t\tsize = sizeof(void *);\n\t\t\tparsing = false;\n",
  "violation-line": 328,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348
  ],
  "before-code": "\t\t\t\t}\n\t\t\t}\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\tcase 'p':\n\t\tcase 'n':\n\t\t\talign = VA_STACK_ALIGN(void *);\n\t\t\tsize = sizeof(void *);\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 'a':\n\t\tcase 'A':\n\t\tcase 'e':\n\t\tcase 'E':\n\t\tcase 'f':\n\t\tcase 'F':\n\t\tcase 'g':\n\t\tcase 'G': {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    331,
    332,
    333,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    347,
    348,
    349,
    350,
    351
  ],
  "after-code": "\t\t\t\t}\n\t\t\t}\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\tcase 'p':\n\t\tcase 'n':\n\t\t\talign = VA_STACK_ALIGN(void *);\n\t\t\tsize = sizeof(void *);\n\t\t\tparsing = false;\n\t\t\tbreak;\n\n\t\tcase 'a':\n\t\tcase 'A':\n\t\tcase 'e':\n\t\tcase 'E':\n\t\tcase 'f':\n\t\tcase 'F':\n\t\tcase 'g':\n\t\tcase 'G': {\n",
  "violation-line": 338,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    349,
    350,
    351,
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369
  ],
  "before-code": "\t\t\t/*\n\t\t\t * Handle floats separately as they may be\n\t\t\t * held in a different register set.\n\t\t\t */\n\t\t\tunion { double d; long double ld; } v;\n\n\t\t\tif (fmt[-1] == 'L') {\n\t\t\t\tv.ld = va_arg(ap, long double);\n\t\t\t\talign = VA_STACK_ALIGN(long double);\n\t\t\t\tsize = sizeof(long double);\n\t\t\t} else {\n\t\t\t\tv.d = va_arg(ap, double);\n\t\t\t\talign = VA_STACK_ALIGN(double);\n\t\t\t\tsize = sizeof(double);\n\t\t\t}\n\t\t\t/* align destination buffer location */\n\t\t\tbuf = (void *) ROUND_UP(buf, align);\n\t\t\tif (buf0 != NULL) {\n\t\t\t\t/* make sure it fits */\n\t\t\t\tif (buf - buf0 + size > len) {\n\t\t\t\t\treturn -ENOSPC;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    352,
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372
  ],
  "after-code": "\t\t\t/*\n\t\t\t * Handle floats separately as they may be\n\t\t\t * held in a different register set.\n\t\t\t */\n\t\t\tunion { double d; long double ld; } v;\n\n\t\t\tif (fmt[-1] == 'L') {\n\t\t\t\tv.ld = va_arg(ap, long double);\n\t\t\t\talign = VA_STACK_ALIGN(long double);\n\t\t\t\tsize = sizeof(long double);\n\t\t\t} else {\n\t\t\t\tv.d = va_arg(ap, double);\n\t\t\t\talign = VA_STACK_ALIGN(double);\n\t\t\t\tsize = sizeof(double);\n\t\t\t}\n\t\t\t/* align destination buffer location */\n\t\t\tbuf = (void *) ROUND_UP(buf, align);\n\t\t\tif (buf0 != NULL) {\n\t\t\t\t/* make sure it fits */\n\t\t\t\tif ((size_t)(buf - buf0) + size > len) {\n\t\t\t\t\treturn -ENOSPC;\n",
  "violation-line": 359,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    353,
    354,
    355,
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373
  ],
  "before-code": "\t\t\tunion { double d; long double ld; } v;\n\n\t\t\tif (fmt[-1] == 'L') {\n\t\t\t\tv.ld = va_arg(ap, long double);\n\t\t\t\talign = VA_STACK_ALIGN(long double);\n\t\t\t\tsize = sizeof(long double);\n\t\t\t} else {\n\t\t\t\tv.d = va_arg(ap, double);\n\t\t\t\talign = VA_STACK_ALIGN(double);\n\t\t\t\tsize = sizeof(double);\n\t\t\t}\n\t\t\t/* align destination buffer location */\n\t\t\tbuf = (void *) ROUND_UP(buf, align);\n\t\t\tif (buf0 != NULL) {\n\t\t\t\t/* make sure it fits */\n\t\t\t\tif (buf - buf0 + size > len) {\n\t\t\t\t\treturn -ENOSPC;\n\t\t\t\t}\n\t\t\t\tif (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {\n\t\t\t\t\tmemcpy(buf, &v, size);\n\t\t\t\t} else if (fmt[-1] == 'L') {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    356,
    357,
    358,
    359,
    360,
    361,
    362,
    363,
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376
  ],
  "after-code": "\t\t\tunion { double d; long double ld; } v;\n\n\t\t\tif (fmt[-1] == 'L') {\n\t\t\t\tv.ld = va_arg(ap, long double);\n\t\t\t\talign = VA_STACK_ALIGN(long double);\n\t\t\t\tsize = sizeof(long double);\n\t\t\t} else {\n\t\t\t\tv.d = va_arg(ap, double);\n\t\t\t\talign = VA_STACK_ALIGN(double);\n\t\t\t\tsize = sizeof(double);\n\t\t\t}\n\t\t\t/* align destination buffer location */\n\t\t\tbuf = (void *) ROUND_UP(buf, align);\n\t\t\tif (buf0 != NULL) {\n\t\t\t\t/* make sure it fits */\n\t\t\t\tif ((size_t)(buf - buf0) + size > len) {\n\t\t\t\t\treturn -ENOSPC;\n\t\t\t\t}\n\t\t\t\tif (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {\n\t\t\t\t\tmemcpy(buf, &v, size);\n\t\t\t\t} else if (fmt[-1] == 'L') {\n",
  "violation-line": 363,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420
  ],
  "before-code": "process_string:\n\t\t\tif (buf0 != NULL) {\n\t\t\t\t*(const char **)buf = s;\n\t\t\t}\n\n\t\t\t/* Bother about read only strings only if storing\n\t\t\t * string indexes is requested.\n\t\t\t */\n\t\t\tbool is_ro = ptr_in_rodata(s);\n\t\t\tbool str_idxs = flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS;\n\t\t\tbool need_ro = is_ro && str_idxs;\n\n\t\t\tif (ptr_in_rodata(s) && !str_idxs) {\n\t\t\t\t/* do nothing special */\n\t\t\t} else if (buf0 != NULL) {\n\n\t\t\t\t/*\n\t\t\t\t * Remember string pointer location.\n\t\t\t\t * We will append it later.\n\t\t\t\t */\n\t\t\t\tif (s_idx >= ARRAY_SIZE(str_ptr_pos)) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423
  ],
  "after-code": "process_string:\n\t\t\tif (buf0 != NULL) {\n\t\t\t\t*(const char **)buf = s;\n\t\t\t}\n\n\t\t\t/* Bother about read only strings only if storing\n\t\t\t * string indexes is requested.\n\t\t\t */\n\t\t\tbool is_ro = ptr_in_rodata(s);\n\t\t\tbool str_idxs = (flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS) != 0;\n\t\t\tbool need_ro = is_ro && str_idxs;\n\n\t\t\tif (ptr_in_rodata(s) && !str_idxs) {\n\t\t\t\t/* do nothing special */\n\t\t\t} else if (buf0 != NULL) {\n\n\t\t\t\t/*\n\t\t\t\t * Remember string pointer location.\n\t\t\t\t * We will append it later.\n\t\t\t\t */\n\t\t\t\tif (s_idx >= ARRAY_SIZE(str_ptr_pos)) {\n",
  "violation-line": 410,
  "violation-message": "The unsigned long type has been assigned to the object of bool which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    422,
    423,
    424,
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442
  ],
  "before-code": "\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\n\t\t\t\tif ((buf - buf0) > CBPRINTF_STR_POS_MASK) {\n\t\t\t\t\t__ASSERT(false, \"String with too many arguments\");\n\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\n\t\t\t\t/* Add marking to identify if read only string. */\n\t\t\t\tuint8_t ro_flag = need_ro ?\n\t\t\t\t\t\t  CBPRINTF_STR_POS_RO_FLAG : 0;\n\n\t\t\t\tif (ro_flag != 0U) {\n\t\t\t\t\ts_ro_cnt++;\n\t\t\t\t} else {\n\t\t\t\t\ts_rw_cnt++;\n\t\t\t\t}\n\n\t\t\t\t/* Use same multiple as the arg list size. */\n\t\t\t\tstr_ptr_pos[s_idx++] = ro_flag |\n\t\t\t\t\t\t       (buf - buf0) / sizeof(int);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445
  ],
  "after-code": "\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\n\t\t\t\tif ((size_t)(buf - buf0) > CBPRINTF_STR_POS_MASK) {\n\t\t\t\t\t__ASSERT(false, \"String with too many arguments\");\n\t\t\t\t\treturn -EINVAL;\n\t\t\t\t}\n\n\t\t\t\t/* Add marking to identify if read only string. */\n\t\t\t\tuint8_t ro_flag = need_ro ?\n\t\t\t\t\t\t  CBPRINTF_STR_POS_RO_FLAG : 0U;\n\n\t\t\t\tif (ro_flag != 0U) {\n\t\t\t\t\ts_ro_cnt++;\n\t\t\t\t} else {\n\t\t\t\t\ts_rw_cnt++;\n\t\t\t\t}\n\n\t\t\t\t/* Use same multiple as the arg list size. */\n\t\t\t\tstr_ptr_pos[s_idx++] = ro_flag |\n\t\t\t\t\t(uint8_t)((size_t)(buf - buf0) / sizeof(int));\n",
  "violation-line": 432,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452
  ],
  "before-code": "\t\t\t\t\t\t  CBPRINTF_STR_POS_RO_FLAG : 0;\n\n\t\t\t\tif (ro_flag != 0U) {\n\t\t\t\t\ts_ro_cnt++;\n\t\t\t\t} else {\n\t\t\t\t\ts_rw_cnt++;\n\t\t\t\t}\n\n\t\t\t\t/* Use same multiple as the arg list size. */\n\t\t\t\tstr_ptr_pos[s_idx++] = ro_flag |\n\t\t\t\t\t\t       (buf - buf0) / sizeof(int);\n\t\t\t} else {\n\t\t\t\tif (!is_ro) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Add the string length, the final '\\0'\n\t\t\t\t\t * and size of the pointer position prefix.\n\t\t\t\t\t */\n\t\t\t\t\tlen += strlen(s) + 1 + 1;\n\t\t\t\t} else if (need_ro) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Add only pointer position prefix for\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453,
    454,
    455
  ],
  "after-code": "\t\t\t\t\t\t  CBPRINTF_STR_POS_RO_FLAG : 0U;\n\n\t\t\t\tif (ro_flag != 0U) {\n\t\t\t\t\ts_ro_cnt++;\n\t\t\t\t} else {\n\t\t\t\t\ts_rw_cnt++;\n\t\t\t\t}\n\n\t\t\t\t/* Use same multiple as the arg list size. */\n\t\t\t\tstr_ptr_pos[s_idx++] = ro_flag |\n\t\t\t\t\t(uint8_t)((size_t)(buf - buf0) / sizeof(int));\n\t\t\t} else {\n\t\t\t\tif (!is_ro) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Add the string length, the final '\\0'\n\t\t\t\t\t * and size of the pointer position prefix.\n\t\t\t\t\t */\n\t\t\t\t\tlen += strlen(s) + 1 + 1;\n\t\t\t\t} else if (need_ro) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Add only pointer position prefix for\n",
  "violation-line": 442,
  "violation-message": "The long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524
  ],
  "before-code": "\t */\n\tif (!buf0) {\n\t\treturn len + buf - buf0;\n\t}\n\n\t/* Clear our buffer header. We made room for it initially. */\n\t*(char **)buf0 = NULL;\n\n\t/* Record end of argument list and number of appended strings. */\n\tbuf0[0] = (buf - buf0) / sizeof(int);\n\tbuf0[1] = s_rw_cnt;\n\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif (!(str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528
  ],
  "after-code": "\tif (buf0 == NULL) {\n\t\t/*? BUG HERE: a null pointer is subtracted */\n\t\treturn len + buf - buf0;\n\t}\n\n\t/* Clear our buffer header. We made room for it initially. */\n\t*(char **)buf0 = NULL;\n\n\t/* Record end of argument list and number of appended strings. */\n\tbuf0[0] = (uint8_t)((size_t)(buf - buf0) / sizeof(int));\n\tbuf0[1] = s_rw_cnt;\n\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n",
  "violation-line": 514,
  "violation-message": "The long type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525
  ],
  "before-code": "\tif (!buf0) {\n\t\treturn len + buf - buf0;\n\t}\n\n\t/* Clear our buffer header. We made room for it initially. */\n\t*(char **)buf0 = NULL;\n\n\t/* Record end of argument list and number of appended strings. */\n\tbuf0[0] = (buf - buf0) / sizeof(int);\n\tbuf0[1] = s_rw_cnt;\n\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif (!(str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529
  ],
  "after-code": "\t\t/*? BUG HERE: a null pointer is subtracted */\n\t\treturn len + buf - buf0;\n\t}\n\n\t/* Clear our buffer header. We made room for it initially. */\n\t*(char **)buf0 = NULL;\n\n\t/* Record end of argument list and number of appended strings. */\n\tbuf0[0] = (uint8_t)((size_t)(buf - buf0) / sizeof(int));\n\tbuf0[1] = s_rw_cnt;\n\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n",
  "violation-line": 515,
  "violation-message": "The unsigned int type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    506,
    507,
    508,
    509,
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526
  ],
  "before-code": "\t\treturn len + buf - buf0;\n\t}\n\n\t/* Clear our buffer header. We made room for it initially. */\n\t*(char **)buf0 = NULL;\n\n\t/* Record end of argument list and number of appended strings. */\n\tbuf0[0] = (buf - buf0) / sizeof(int);\n\tbuf0[1] = s_rw_cnt;\n\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif (!(str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n\t\t\t/* make sure it fits */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    510,
    511,
    512,
    513,
    514,
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530
  ],
  "after-code": "\t\treturn len + buf - buf0;\n\t}\n\n\t/* Clear our buffer header. We made room for it initially. */\n\t*(char **)buf0 = NULL;\n\n\t/* Record end of argument list and number of appended strings. */\n\tbuf0[0] = (uint8_t)((size_t)(buf - buf0) / sizeof(int));\n\tbuf0[1] = s_rw_cnt;\n\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n\t\t\t/* make sure it fits */\n",
  "violation-line": 516,
  "violation-message": "The unsigned int type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    515,
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535
  ],
  "before-code": "\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif (!(str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n\t\t\t/* make sure it fits */\n\t\t\tif (buf - buf0 + 1 > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t/* store the pointer position prefix */\n\t\t\t*buf++ = pos;\n\t\t}\n\t}\n\n\t/* Store strings prefixed by their pointer location. */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539
  ],
  "after-code": "\tbuf0[2] = s_ro_cnt;\n\n\t/* Store strings pointer locations of read only strings. */\n\tif (s_ro_cnt != 0U) {\n\t\tfor (i = 0; i < s_idx; i++) {\n\t\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n\t\t\t/* make sure it fits */\n\t\t\tif ((size_t)(buf - buf0) + 1 > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t/* store the pointer position prefix */\n\t\t\t*buf++ = pos;\n\t\t}\n\t}\n\n\t/* Store strings prefixed by their pointer location. */\n",
  "violation-line": 525,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542
  ],
  "before-code": "\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n\t\t\t/* make sure it fits */\n\t\t\tif (buf - buf0 + 1 > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t/* store the pointer position prefix */\n\t\t\t*buf++ = pos;\n\t\t}\n\t}\n\n\t/* Store strings prefixed by their pointer location. */\n\tfor (i = 0; i < s_idx; i++) {\n\t\t/* Process only RW strings. */\n\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) != 0UL) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* retrieve the string pointer */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546
  ],
  "after-code": "\t\t\t}\n\n\t\t\tuint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;\n\n\t\t\t/* make sure it fits */\n\t\t\tif ((size_t)(buf - buf0) + 1 > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t/* store the pointer position prefix */\n\t\t\t*buf++ = pos;\n\t\t}\n\t}\n\n\t/* Store strings prefixed by their pointer location. */\n\tfor (i = 0; i < s_idx; i++) {\n\t\t/* Process only RW strings. */\n\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) != 0UL) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* retrieve the string pointer */\n",
  "violation-line": 532,
  "violation-message": "The unsigned char type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558
  ],
  "before-code": "\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) != 0UL) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* retrieve the string pointer */\n\t\ts = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));\n\t\t/* clear the in-buffer pointer (less entropy if compressed) */\n\t\t*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;\n\t\t/* find the string length including terminating '\\0' */\n\t\tsize = strlen(s) + 1;\n\t\t/* make sure it fits */\n\t\tif (buf - buf0 + 1 + size > len) {\n\t\t\treturn -ENOSPC;\n\t\t}\n\t\t/* store the pointer position prefix */\n\t\t*buf++ = str_ptr_pos[i];\n\t\t/* copy the string with its terminating '\\0' */\n\t\tmemcpy(buf, s, size);\n\t\tbuf += size;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    542,
    543,
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562
  ],
  "after-code": "\t\tif ((str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) != 0UL) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* retrieve the string pointer */\n\t\ts = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));\n\t\t/* clear the in-buffer pointer (less entropy if compressed) */\n\t\t*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;\n\t\t/* find the string length including terminating '\\0' */\n\t\tsize = strlen(s) + 1;\n\t\t/* make sure it fits */\n\t\tif ((size_t)(buf - buf0) + 1 + size > len) {\n\t\t\treturn -ENOSPC;\n\t\t}\n\t\t/* store the pointer position prefix */\n\t\t*buf++ = str_ptr_pos[i];\n\t\t/* copy the string with its terminating '\\0' */\n\t\tmemcpy(buf, s, size);\n\t\tbuf += size;\n\t}\n\n",
  "violation-line": 548,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    544,
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564
  ],
  "before-code": "\t\t/* clear the in-buffer pointer (less entropy if compressed) */\n\t\t*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;\n\t\t/* find the string length including terminating '\\0' */\n\t\tsize = strlen(s) + 1;\n\t\t/* make sure it fits */\n\t\tif (buf - buf0 + 1 + size > len) {\n\t\t\treturn -ENOSPC;\n\t\t}\n\t\t/* store the pointer position prefix */\n\t\t*buf++ = str_ptr_pos[i];\n\t\t/* copy the string with its terminating '\\0' */\n\t\tmemcpy(buf, s, size);\n\t\tbuf += size;\n\t}\n\n\t/*\n\t * TODO: remove pointers for appended strings since they're useless.\n\t * TODO: explore leveraging same mechanism to remove alignment padding\n\t */\n\n\treturn buf - buf0;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568
  ],
  "after-code": "\t\t/* clear the in-buffer pointer (less entropy if compressed) */\n\t\t*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;\n\t\t/* find the string length including terminating '\\0' */\n\t\tsize = strlen(s) + 1;\n\t\t/* make sure it fits */\n\t\tif ((size_t)(buf - buf0) + 1 + size > len) {\n\t\t\treturn -ENOSPC;\n\t\t}\n\t\t/* store the pointer position prefix */\n\t\t*buf++ = str_ptr_pos[i];\n\t\t/* copy the string with its terminating '\\0' */\n\t\tmemcpy(buf, s, size);\n\t\tbuf += size;\n\t}\n\n\t/*\n\t * TODO: remove pointers for appended strings since they're useless.\n\t * TODO: explore leveraging same mechanism to remove alignment padding\n\t */\n\n\treturn (int)(buf - buf0);\n",
  "violation-line": 554,
  "violation-message": "The unsigned char type has been assigned to the object of char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575
  ],
  "before-code": "\t\tmemcpy(buf, s, size);\n\t\tbuf += size;\n\t}\n\n\t/*\n\t * TODO: remove pointers for appended strings since they're useless.\n\t * TODO: explore leveraging same mechanism to remove alignment padding\n\t */\n\n\treturn buf - buf0;\n\n#undef CBPRINTF_STR_POS_RO_FLAG\n#undef CBPRINTF_STR_POS_MASK\n}\n\nint cbprintf_package(void *packaged, size_t len, uint32_t flags,\n\t\t     const char *format, ...)\n{\n\tva_list ap;\n\tint ret;\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    572,
    573,
    574,
    575,
    576,
    577,
    578,
    579
  ],
  "after-code": "\t\tmemcpy(buf, s, size);\n\t\tbuf += size;\n\t}\n\n\t/*\n\t * TODO: remove pointers for appended strings since they're useless.\n\t * TODO: explore leveraging same mechanism to remove alignment padding\n\t */\n\n\treturn (int)(buf - buf0);\n\n#undef CBPRINTF_STR_POS_RO_FLAG\n#undef CBPRINTF_STR_POS_MASK\n}\n\nint cbprintf_package(void *packaged, size_t len, uint32_t flags,\n\t\t     const char *format, ...)\n{\n\tva_list ap;\n\tint ret;\n\n",
  "violation-line": 565,
  "violation-message": "The long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    583,
    584,
    585,
    586,
    587,
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603
  ],
  "before-code": "{\n\tchar *buf = packaged, *fmt, *s, **ps;\n\tunsigned int i, args_size, s_nbr, ros_nbr, s_idx;\n\n\tif (!buf) {\n\t\treturn -EINVAL;\n\t}\n\n\t/* Retrieve the size of the arg list and number of strings. */\n\targs_size = ((uint8_t *)buf)[0] * sizeof(int);\n\ts_nbr     = ((uint8_t *)buf)[1];\n\tros_nbr   = ((uint8_t *)buf)[2];\n\n\t/* Locate the string table */\n\ts = buf + args_size + ros_nbr;\n\n\t/*\n\t * Patch in string pointers.\n\t */\n\tfor (i = 0; i < s_nbr; i++) {\n\t\t/* Locate pointer location for this string */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    588,
    589,
    590,
    591,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    602,
    603,
    604,
    605,
    606,
    607,
    608
  ],
  "after-code": "\tchar *buf = packaged, *fmt, *s, **ps;\n\tuint8_t s_idx, s_nbr, ros_nbr;\n\tunsigned int args_size;\n\n\tif (buf == NULL) {\n\t\treturn -EINVAL;\n\t}\n\n\t/* Retrieve the size of the arg list and number of strings. */\n\targs_size = (unsigned int)(((uint8_t *)buf)[0] * sizeof(int));\n\ts_nbr     = ((uint8_t *)buf)[1];\n\tros_nbr   = ((uint8_t *)buf)[2];\n\n\t/* Locate the string table */\n\ts = buf + args_size + ros_nbr;\n\n\t/*\n\t * Patch in string pointers.\n\t */\n\tfor (uint8_t i = 0; i < s_nbr; i++) {\n\t\t/* Locate pointer location for this string */\n",
  "violation-line": 593,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    633,
    634,
    635,
    636,
    637,
    638,
    639,
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653
  ],
  "before-code": "\tif (!buf) {\n\t\treturn -EINVAL;\n\t}\n\n\tif (packaged && (len < in_len)) {\n\t\treturn -ENOSPC;\n\t}\n\n\t/* Retrieve the size of the arg list and number of strings. */\n\targs_size = buf[0] * sizeof(int);\n\ts_nbr     = buf[1];\n\tros_nbr   = buf[2];\n\n\tout_len = in_len;\n\n\tif (packaged != NULL) {\n\t\tunsigned int rw_strs_len = in_len - (args_size + ros_nbr);\n\n\t\tmemcpy(out, buf, args_size);\n\t\tout[1] = s_nbr + ros_nbr;\n\t\tout[2] = 0;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    639,
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659
  ],
  "after-code": "\tif (buf == NULL) {\n\t\treturn -EINVAL;\n\t}\n\n\tif ((packaged != NULL) && (len < in_len)) {\n\t\treturn -ENOSPC;\n\t}\n\n\t/* Retrieve the size of the arg list and number of strings. */\n\targs_size = (buf[0] * sizeof(int));\n\ts_nbr     = buf[1];\n\tros_nbr   = buf[2];\n\n\tout_len = in_len;\n\n\tif (packaged != NULL) {\n\t\tsize_t rw_strs_len = in_len - (args_size + ros_nbr);\n\n\t\tmemcpy(out, buf, args_size);\n\t\tout[1] = s_nbr + ros_nbr;\n\t\tout[2] = 0;\n",
  "violation-line": 643,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660
  ],
  "before-code": "\n\t/* Retrieve the size of the arg list and number of strings. */\n\targs_size = buf[0] * sizeof(int);\n\ts_nbr     = buf[1];\n\tros_nbr   = buf[2];\n\n\tout_len = in_len;\n\n\tif (packaged != NULL) {\n\t\tunsigned int rw_strs_len = in_len - (args_size + ros_nbr);\n\n\t\tmemcpy(out, buf, args_size);\n\t\tout[1] = s_nbr + ros_nbr;\n\t\tout[2] = 0;\n\t\tout += args_size;\n\n\t\t/* Append all strings that were already part of the package. */\n\t\tmemcpy(out, &buf[args_size + ros_nbr], rw_strs_len);\n\t\tout += rw_strs_len;\n\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666
  ],
  "after-code": "\n\t/* Retrieve the size of the arg list and number of strings. */\n\targs_size = (buf[0] * sizeof(int));\n\ts_nbr     = buf[1];\n\tros_nbr   = buf[2];\n\n\tout_len = in_len;\n\n\tif (packaged != NULL) {\n\t\tsize_t rw_strs_len = in_len - (args_size + ros_nbr);\n\n\t\tmemcpy(out, buf, args_size);\n\t\tout[1] = s_nbr + ros_nbr;\n\t\tout[2] = 0;\n\t\tout += args_size;\n\n\t\t/* Append all strings that were already part of the package. */\n\t\tmemcpy(out, &buf[args_size + ros_nbr], rw_strs_len);\n\t\tout += rw_strs_len;\n\t}\n\n",
  "violation-line": 650,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    643,
    644,
    645,
    646,
    647,
    648,
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663
  ],
  "before-code": "\ts_nbr     = buf[1];\n\tros_nbr   = buf[2];\n\n\tout_len = in_len;\n\n\tif (packaged != NULL) {\n\t\tunsigned int rw_strs_len = in_len - (args_size + ros_nbr);\n\n\t\tmemcpy(out, buf, args_size);\n\t\tout[1] = s_nbr + ros_nbr;\n\t\tout[2] = 0;\n\t\tout += args_size;\n\n\t\t/* Append all strings that were already part of the package. */\n\t\tmemcpy(out, &buf[args_size + ros_nbr], rw_strs_len);\n\t\tout += rw_strs_len;\n\t}\n\n\tfor (unsigned int i = 0; i < ros_nbr; i++) {\n\t\t/* Get string address location */\n\t\ts_idx = buf[args_size + i];\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    649,
    650,
    651,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669
  ],
  "after-code": "\ts_nbr     = buf[1];\n\tros_nbr   = buf[2];\n\n\tout_len = in_len;\n\n\tif (packaged != NULL) {\n\t\tsize_t rw_strs_len = in_len - (args_size + ros_nbr);\n\n\t\tmemcpy(out, buf, args_size);\n\t\tout[1] = s_nbr + ros_nbr;\n\t\tout[2] = 0;\n\t\tout += args_size;\n\n\t\t/* Append all strings that were already part of the package. */\n\t\tmemcpy(out, &buf[args_size + ros_nbr], rw_strs_len);\n\t\tout += rw_strs_len;\n\t}\n\n\tfor (uint8_t i = 0; i < ros_nbr; i++) {\n\t\t/* Get string address location */\n\t\ts_idx = buf[args_size + i];\n",
  "violation-line": 653,
  "violation-message": "The unsigned int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681,
    682
  ],
  "before-code": "\t\t/* Get string length */\n\t\tslen = strlen(*ps) + 1;\n\t\tout_len += slen;\n\n\t\t/* Copy string into the buffer (if provided) and enough space. */\n\t\tif (packaged != NULL) {\n\t\t\tif (out_len > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t*out++ = s_idx;\n\t\t\tmemcpy(out, *ps, slen);\n\t\t\tout += slen;\n\t\t}\n\t}\n\n\treturn out_len;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681,
    682,
    683,
    684,
    685,
    686,
    687,
    688
  ],
  "after-code": "\t\t/* Get string length */\n\t\tslen = strlen(*ps) + 1;\n\t\tout_len += slen;\n\n\t\t/* Copy string into the buffer (if provided) and enough space. */\n\t\tif (packaged != NULL) {\n\t\t\tif (out_len > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t*out++ = s_idx;\n\t\t\tmemcpy(out, *ps, slen);\n\t\t\tout += slen;\n\t\t}\n\t}\n\n\treturn (int)out_len;\n}\n",
  "violation-line": 676,
  "violation-message": "The unsigned int type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "before-lines": [
    672,
    673,
    674,
    675,
    676,
    677,
    678,
    679,
    680,
    681,
    682
  ],
  "before-code": "\t\t\tif (out_len > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t*out++ = s_idx;\n\t\t\tmemcpy(out, *ps, slen);\n\t\t\tout += slen;\n\t\t}\n\t}\n\n\treturn out_len;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/cbprintf_packaged.c",
  "after-lines": [
    678,
    679,
    680,
    681,
    682,
    683,
    684,
    685,
    686,
    687,
    688
  ],
  "after-code": "\t\t\tif (out_len > len) {\n\t\t\t\treturn -ENOSPC;\n\t\t\t}\n\t\t\t*out++ = s_idx;\n\t\t\tmemcpy(out, *ps, slen);\n\t\t\tout += slen;\n\t\t}\n\t}\n\n\treturn (int)out_len;\n}\n",
  "violation-line": 682,
  "violation-message": "The unsigned long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/crc16_sw.c",
  "before-lines": [
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30
  ],
  "before-code": "{\n\tuint16_t crc = initial_value;\n\tsize_t padding = pad ? sizeof(crc) : 0;\n\tsize_t i, b;\n\n\t/* src length + padding (if required) */\n\tfor (i = 0; i < len + padding; i++) {\n\n\t\tfor (b = 0; b < 8; b++) {\n\t\t\tuint16_t divide = crc & 0x8000UL;\n\n\t\t\tcrc = (crc << 1U);\n\n\t\t\t/* choose input bytes or implicit trailing zeros */\n\t\t\tif (i < len) {\n\t\t\t\tcrc |= !!(src[i] & (0x80U >> b));\n\t\t\t}\n\n\t\t\tif (divide != 0U) {\n\t\t\t\tcrc = crc ^ polynomial;\n\t\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/crc16_sw.c",
  "after-lines": [
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30
  ],
  "after-code": "{\n\tuint16_t crc = initial_value;\n\tsize_t padding = pad ? sizeof(crc) : 0U;\n\tsize_t i, b;\n\n\t/* src length + padding (if required) */\n\tfor (i = 0; i < len + padding; i++) {\n\n\t\tfor (b = 0; b < 8; b++) {\n\t\t\tuint16_t divide = crc & 0x8000U;\n\n\t\t\tcrc = (crc << 1U);\n\n\t\t\t/* choose input bytes or implicit trailing zeros */\n\t\t\tif ((i < len) && ((src[i] & (0x80U >> b)) != 0)) {\n\t\t\t\tcrc |= 1U;\n\t\t\t}\n\n\t\t\tif (divide != 0U) {\n\t\t\t\tcrc = crc ^ polynomial;\n\t\t\t}\n",
  "violation-line": 20,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/crc16_sw.c",
  "before-lines": [
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36
  ],
  "before-code": "\t/* src length + padding (if required) */\n\tfor (i = 0; i < len + padding; i++) {\n\n\t\tfor (b = 0; b < 8; b++) {\n\t\t\tuint16_t divide = crc & 0x8000UL;\n\n\t\t\tcrc = (crc << 1U);\n\n\t\t\t/* choose input bytes or implicit trailing zeros */\n\t\t\tif (i < len) {\n\t\t\t\tcrc |= !!(src[i] & (0x80U >> b));\n\t\t\t}\n\n\t\t\tif (divide != 0U) {\n\t\t\t\tcrc = crc ^ polynomial;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn crc;\n}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/crc16_sw.c",
  "after-lines": [
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36
  ],
  "after-code": "\t/* src length + padding (if required) */\n\tfor (i = 0; i < len + padding; i++) {\n\n\t\tfor (b = 0; b < 8; b++) {\n\t\t\tuint16_t divide = crc & 0x8000U;\n\n\t\t\tcrc = (crc << 1U);\n\n\t\t\t/* choose input bytes or implicit trailing zeros */\n\t\t\tif ((i < len) && ((src[i] & (0x80U >> b)) != 0)) {\n\t\t\t\tcrc |= 1U;\n\t\t\t}\n\n\t\t\tif (divide != 0U) {\n\t\t\t\tcrc = crc ^ polynomial;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn crc;\n}\n\n",
  "violation-line": 26,
  "violation-message": "The bool type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/crc16_sw.c",
  "before-lines": [
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53
  ],
  "before-code": "\n\treturn crc;\n}\n\nuint16_t crc16_ccitt(uint16_t seed, const uint8_t *src, size_t len)\n{\n\tfor (; len > 0; len--) {\n\t\tuint8_t e, f;\n\n\t\te = seed ^ *src++;\n\t\tf = e ^ (e << 4);\n\t\tseed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);\n\t}\n\n\treturn seed;\n}\n\nuint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)\n{\n\tfor (; len > 0; len--) {\n\t\tseed = (seed >> 8U) | (seed << 8U);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/crc16_sw.c",
  "after-lines": [
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53
  ],
  "after-code": "\n\treturn crc;\n}\n\nuint16_t crc16_ccitt(uint16_t seed, const uint8_t *src, size_t len)\n{\n\tfor (; len > 0; len--) {\n\t\tuint8_t e, f;\n\n\t\te = (uint8_t)(seed ^ *src++);\n\t\tf = e ^ (e << 4);\n\t\tseed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);\n\t}\n\n\treturn seed;\n}\n\nuint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)\n{\n\tfor (; len > 0; len--) {\n\t\tseed = (seed >> 8U) | (seed << 8U);\n",
  "violation-line": 43,
  "violation-message": "The unsigned short type has been assigned to the object of unsigned char which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/crc32c_sw.c",
  "before-lines": [
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39
  ],
  "before-code": "/* The crc32c algorithm requires the below value as Init value at the\n * beginning of the stream.\n */\n#define CRC32C_INIT\t0xFFFFFFFFUL\n\nuint32_t crc32_c(uint32_t crc, const uint8_t *data,\n\t\t size_t len, bool first_pkt, bool last_pkt)\n{\n\tif (first_pkt) {\n\t\tcrc = CRC32C_INIT;\n\t}\n\n\tfor (size_t i = 0; i < len; i++) {\n\t\tcrc = crc32c_table[(crc ^ data[i]) & 0x0F] ^ (crc >> 4);\n\t\tcrc = crc32c_table[(crc ^ ((uint32_t)data[i] >> 4)) & 0x0F] ^ (crc >> 4);\n\t}\n\n\treturn last_pkt ? (crc ^ CRC32C_XOR_OUT) : crc;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/crc32c_sw.c",
  "after-lines": [
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39
  ],
  "after-code": "/* The crc32c algorithm requires the below value as Init value at the\n * beginning of the stream.\n */\n#define CRC32C_INIT\t0xFFFFFFFFU\n\nuint32_t crc32_c(uint32_t crc, const uint8_t *data,\n\t\t size_t len, bool first_pkt, bool last_pkt)\n{\n\tif (first_pkt) {\n\t\tcrc = CRC32C_INIT;\n\t}\n\n\tfor (size_t i = 0; i < len; i++) {\n\t\tcrc = crc32c_table[(crc ^ data[i]) & 0x0FU] ^ (crc >> 4);\n\t\tcrc = crc32c_table[(crc ^ ((uint32_t)data[i] >> 4)) & 0x0FU] ^ (crc >> 4);\n\t}\n\n\treturn last_pkt ? (crc ^ CRC32C_XOR_OUT) : crc;\n}\n",
  "violation-line": 31,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/crc32c_sw.c",
  "before-lines": [
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39
  ],
  "before-code": "\tif (first_pkt) {\n\t\tcrc = CRC32C_INIT;\n\t}\n\n\tfor (size_t i = 0; i < len; i++) {\n\t\tcrc = crc32c_table[(crc ^ data[i]) & 0x0F] ^ (crc >> 4);\n\t\tcrc = crc32c_table[(crc ^ ((uint32_t)data[i] >> 4)) & 0x0F] ^ (crc >> 4);\n\t}\n\n\treturn last_pkt ? (crc ^ CRC32C_XOR_OUT) : crc;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/crc32c_sw.c",
  "after-lines": [
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39
  ],
  "after-code": "\tif (first_pkt) {\n\t\tcrc = CRC32C_INIT;\n\t}\n\n\tfor (size_t i = 0; i < len; i++) {\n\t\tcrc = crc32c_table[(crc ^ data[i]) & 0x0FU] ^ (crc >> 4);\n\t\tcrc = crc32c_table[(crc ^ ((uint32_t)data[i] >> 4)) & 0x0FU] ^ (crc >> 4);\n\t}\n\n\treturn last_pkt ? (crc ^ CRC32C_XOR_OUT) : crc;\n}\n",
  "violation-line": 39,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129
  ],
  "before-code": "\t * process_event() when state ERROR is confirmed with a\n\t * non-empty client (reset) list.\n\t */\n\tEVT_RESET,\n};\n\nstatic void set_state(struct onoff_manager *mgr,\n\t\t      uint32_t state)\n{\n\tmgr->flags = (state & ONOFF_STATE_MASK)\n\t\t     | (mgr->flags & ~ONOFF_STATE_MASK);\n}\n\nstatic int validate_args(const struct onoff_manager *mgr,\n\t\t\t struct onoff_client *cli)\n{\n\tif ((mgr == NULL) || (cli == NULL)) {\n\t\treturn -EINVAL;\n\t}\n\n\tint rv = sys_notify_validate(&cli->notify);\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129
  ],
  "after-code": "\t * process_event() when state ERROR is confirmed with a\n\t * non-empty client (reset) list.\n\t */\n\tEVT_RESET,\n};\n\nstatic void set_state(struct onoff_manager *mgr,\n\t\t      uint32_t state)\n{\n\tmgr->flags = (uint16_t)(state & ONOFF_STATE_MASK)\n\t\t     | (mgr->flags & (uint16_t)~ONOFF_STATE_MASK);\n}\n\nstatic int validate_args(const struct onoff_manager *mgr,\n\t\t\t struct onoff_client *cli)\n{\n\tif ((mgr == NULL) || (cli == NULL)) {\n\t\treturn -EINVAL;\n\t}\n\n\tint rv = sys_notify_validate(&cli->notify);\n\n",
  "violation-line": 118,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217
  ],
  "before-code": "\t\t\t  int evt,\n\t\t\t  k_spinlock_key_t key);\n\nstatic void transition_complete(struct onoff_manager *mgr,\n\t\t\t\tint res)\n{\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\n\tmgr->last_res = res;\n\tprocess_event(mgr, EVT_COMPLETE, key);\n}\n\n/* Detect whether static state requires a transition. */\nstatic int process_recheck(struct onoff_manager *mgr)\n{\n\tint evt = EVT_NOP;\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217
  ],
  "after-code": "\t\t\t  enum event_type evt,\n\t\t\t  k_spinlock_key_t key);\n\nstatic void transition_complete(struct onoff_manager *mgr,\n\t\t\t\tint res)\n{\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\n\tmgr->last_res = res;\n\tprocess_event(mgr, EVT_COMPLETE, key);\n}\n\n/* Detect whether static state requires a transition. */\nstatic enum event_type process_recheck(struct onoff_manager *mgr)\n{\n\tenum event_type evt = EVT_NOP;\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n",
  "violation-line": 207,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224
  ],
  "before-code": "\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\n\tmgr->last_res = res;\n\tprocess_event(mgr, EVT_COMPLETE, key);\n}\n\n/* Detect whether static state requires a transition. */\nstatic int process_recheck(struct onoff_manager *mgr)\n{\n\tint evt = EVT_NOP;\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224
  ],
  "after-code": "\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\n\tmgr->last_res = res;\n\tprocess_event(mgr, EVT_COMPLETE, key);\n}\n\n/* Detect whether static state requires a transition. */\nstatic enum event_type process_recheck(struct onoff_manager *mgr)\n{\n\tenum event_type evt = EVT_NOP;\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n",
  "violation-line": 213,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224
  ],
  "before-code": "\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\n\tmgr->last_res = res;\n\tprocess_event(mgr, EVT_COMPLETE, key);\n}\n\n/* Detect whether static state requires a transition. */\nstatic int process_recheck(struct onoff_manager *mgr)\n{\n\tint evt = EVT_NOP;\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224
  ],
  "after-code": "\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\n\tmgr->last_res = res;\n\tprocess_event(mgr, EVT_COMPLETE, key);\n}\n\n/* Detect whether static state requires a transition. */\nstatic enum event_type process_recheck(struct onoff_manager *mgr)\n{\n\tenum event_type evt = EVT_NOP;\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n",
  "violation-line": 214,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228
  ],
  "before-code": "\n/* Detect whether static state requires a transition. */\nstatic int process_recheck(struct onoff_manager *mgr)\n{\n\tint evt = EVT_NOP;\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n\t\t;\n\t}\n\n\treturn evt;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228
  ],
  "after-code": "\n/* Detect whether static state requires a transition. */\nstatic enum event_type process_recheck(struct onoff_manager *mgr)\n{\n\tenum event_type evt = EVT_NOP;\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n\t\t;\n\t}\n\n\treturn evt;\n",
  "violation-line": 218,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231
  ],
  "before-code": "{\n\tint evt = EVT_NOP;\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n\t\t;\n\t}\n\n\treturn evt;\n}\n\n/* Process a transition completion.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231
  ],
  "after-code": "{\n\tenum event_type evt = EVT_NOP;\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n\t\t;\n\t}\n\n\treturn evt;\n}\n\n/* Process a transition completion.\n",
  "violation-line": 221,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234
  ],
  "before-code": "\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n\t\t;\n\t}\n\n\treturn evt;\n}\n\n/* Process a transition completion.\n *\n * If the completion requires notifying clients, the clients are moved\n * from the manager to the output list for notification.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234
  ],
  "after-code": "\n\tif ((state == ONOFF_STATE_OFF)\n\t    && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_START;\n\t} else if ((state == ONOFF_STATE_ON)\n\t\t   && (mgr->refs == 0U)) {\n\t\tevt = EVT_STOP;\n\t} else if ((state == ONOFF_STATE_ERROR)\n\t\t   && !sys_slist_is_empty(&mgr->clients)) {\n\t\tevt = EVT_RESET;\n\t} else {\n\t\t;\n\t}\n\n\treturn evt;\n}\n\n/* Process a transition completion.\n *\n * If the completion requires notifying clients, the clients are moved\n * from the manager to the output list for notification.\n",
  "violation-line": 224,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251
  ],
  "before-code": "/* Process a transition completion.\n *\n * If the completion requires notifying clients, the clients are moved\n * from the manager to the output list for notification.\n */\nstatic void process_complete(struct onoff_manager *mgr,\n\t\t\t     sys_slist_t *clients,\n\t\t\t     int res)\n{\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif (res < 0) {\n\t\t/* Enter ERROR state and notify all clients. */\n\t\t*clients = mgr->clients;\n\t\tsys_slist_init(&mgr->clients);\n\t\tset_state(mgr, ONOFF_STATE_ERROR);\n\t} else if ((state == ONOFF_STATE_TO_ON)\n\t\t   || (state == ONOFF_STATE_RESETTING)) {\n\t\t*clients = mgr->clients;\n\t\tsys_slist_init(&mgr->clients);\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251
  ],
  "after-code": "/* Process a transition completion.\n *\n * If the completion requires notifying clients, the clients are moved\n * from the manager to the output list for notification.\n */\nstatic void process_complete(struct onoff_manager *mgr,\n\t\t\t     sys_slist_t *clients,\n\t\t\t     int res)\n{\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif (res < 0) {\n\t\t/* Enter ERROR state and notify all clients. */\n\t\t*clients = mgr->clients;\n\t\tsys_slist_init(&mgr->clients);\n\t\tset_state(mgr, ONOFF_STATE_ERROR);\n\t} else if ((state == ONOFF_STATE_TO_ON)\n\t\t   || (state == ONOFF_STATE_RESETTING)) {\n\t\t*clients = mgr->clients;\n\t\tsys_slist_init(&mgr->clients);\n\n",
  "violation-line": 241,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280
  ],
  "before-code": "\t\t\t}\n\n\t\t\tset_state(mgr, ONOFF_STATE_ON);\n\t\t} else {\n\t\t\t__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);\n\n\t\t\tset_state(mgr, ONOFF_STATE_OFF);\n\t\t}\n\t\tif (process_recheck(mgr) != EVT_NOP) {\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\t} else if (state == ONOFF_STATE_TO_OFF) {\n\t\t/* Any active clients are requests waiting for this\n\t\t * transition to complete.  Queue a RECHECK event to\n\t\t * ensure we don't miss them if we don't unlock to\n\t\t * tell anybody about the completion.\n\t\t */\n\t\tset_state(mgr, ONOFF_STATE_OFF);\n\t\tif (process_recheck(mgr) != EVT_NOP) {\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280
  ],
  "after-code": "\t\t\t}\n\n\t\t\tset_state(mgr, ONOFF_STATE_ON);\n\t\t} else {\n\t\t\t__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);\n\n\t\t\tset_state(mgr, ONOFF_STATE_OFF);\n\t\t}\n\t\tif (process_recheck(mgr) != EVT_NOP) {\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\t} else if (state == ONOFF_STATE_TO_OFF) {\n\t\t/* Any active clients are requests waiting for this\n\t\t * transition to complete.  Queue a RECHECK event to\n\t\t * ensure we don't miss them if we don't unlock to\n\t\t * tell anybody about the completion.\n\t\t */\n\t\tset_state(mgr, ONOFF_STATE_OFF);\n\t\tif (process_recheck(mgr) != EVT_NOP) {\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n",
  "violation-line": 270,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290
  ],
  "before-code": "\t\t}\n\t} else if (state == ONOFF_STATE_TO_OFF) {\n\t\t/* Any active clients are requests waiting for this\n\t\t * transition to complete.  Queue a RECHECK event to\n\t\t * ensure we don't miss them if we don't unlock to\n\t\t * tell anybody about the completion.\n\t\t */\n\t\tset_state(mgr, ONOFF_STATE_OFF);\n\t\tif (process_recheck(mgr) != EVT_NOP) {\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\t} else {\n\t\t__ASSERT_NO_MSG(false);\n\t}\n}\n\n/* There are two points in the state machine where the machine is\n * unlocked to perform some external action:\n * * Initiation of an transition due to some event;\n * * Invocation of the user-specified callback when a stable state is\n *   reached or an error detected.\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290
  ],
  "after-code": "\t\t}\n\t} else if (state == ONOFF_STATE_TO_OFF) {\n\t\t/* Any active clients are requests waiting for this\n\t\t * transition to complete.  Queue a RECHECK event to\n\t\t * ensure we don't miss them if we don't unlock to\n\t\t * tell anybody about the completion.\n\t\t */\n\t\tset_state(mgr, ONOFF_STATE_OFF);\n\t\tif (process_recheck(mgr) != EVT_NOP) {\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\t} else {\n\t\t__ASSERT_NO_MSG(false);\n\t}\n}\n\n/* There are two points in the state machine where the machine is\n * unlocked to perform some external action:\n * * Initiation of an transition due to some event;\n * * Invocation of the user-specified callback when a stable state is\n *   reached or an error detected.\n",
  "violation-line": 280,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313
  ],
  "before-code": " * state, but processing is deferred to the top-level invocation which\n * will loop to handle any events that occurred during the unlocked\n * regions.\n */\nstatic void process_event(struct onoff_manager *mgr,\n\t\t\t  int evt,\n\t\t\t  k_spinlock_key_t key)\n{\n\tsys_slist_t clients;\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\tint res = 0;\n\tbool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);\n\n\t__ASSERT_NO_MSG(evt != EVT_NOP);\n\n\t/* If this is a nested call record the event for processing in\n\t * the top invocation.\n\t */\n\tif (processing) {\n\t\tif (evt == EVT_COMPLETE) {\n\t\t\tmgr->flags |= ONOFF_FLAG_COMPLETE;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313
  ],
  "after-code": " * state, but processing is deferred to the top-level invocation which\n * will loop to handle any events that occurred during the unlocked\n * regions.\n */\nstatic void process_event(struct onoff_manager *mgr,\n\t\t\t  enum event_type evt,\n\t\t\t  k_spinlock_key_t key)\n{\n\tsys_slist_t clients;\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\tint res = 0;\n\tbool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);\n\n\t__ASSERT_NO_MSG(evt != EVT_NOP);\n\n\t/* If this is a nested call record the event for processing in\n\t * the top invocation.\n\t */\n\tif (processing) {\n\t\tif (evt == EVT_COMPLETE) {\n\t\t\tmgr->flags |= ONOFF_FLAG_COMPLETE;\n",
  "violation-line": 303,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324
  ],
  "before-code": "\tbool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);\n\n\t__ASSERT_NO_MSG(evt != EVT_NOP);\n\n\t/* If this is a nested call record the event for processing in\n\t * the top invocation.\n\t */\n\tif (processing) {\n\t\tif (evt == EVT_COMPLETE) {\n\t\t\tmgr->flags |= ONOFF_FLAG_COMPLETE;\n\t\t} else {\n\t\t\t__ASSERT_NO_MSG(evt == EVT_RECHECK);\n\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\n\t\tgoto out;\n\t}\n\n\tsys_slist_init(&clients);\n\tdo {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    304,
    305,
    306,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324
  ],
  "after-code": "\tbool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);\n\n\t__ASSERT_NO_MSG(evt != EVT_NOP);\n\n\t/* If this is a nested call record the event for processing in\n\t * the top invocation.\n\t */\n\tif (processing) {\n\t\tif (evt == EVT_COMPLETE) {\n\t\t\tmgr->flags |= ONOFF_FLAG_COMPLETE;\n\t\t} else {\n\t\t\t__ASSERT_NO_MSG(evt == EVT_RECHECK);\n\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\n\t\tgoto out;\n\t}\n\n\tsys_slist_init(&clients);\n\tdo {\n",
  "violation-line": 314,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328
  ],
  "before-code": "\t/* If this is a nested call record the event for processing in\n\t * the top invocation.\n\t */\n\tif (processing) {\n\t\tif (evt == EVT_COMPLETE) {\n\t\t\tmgr->flags |= ONOFF_FLAG_COMPLETE;\n\t\t} else {\n\t\t\t__ASSERT_NO_MSG(evt == EVT_RECHECK);\n\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\n\t\tgoto out;\n\t}\n\n\tsys_slist_init(&clients);\n\tdo {\n\t\tonoff_transition_fn transit = NULL;\n\n\t\tif (evt == EVT_RECHECK) {\n\t\t\tevt = process_recheck(mgr);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    327,
    328
  ],
  "after-code": "\t/* If this is a nested call record the event for processing in\n\t * the top invocation.\n\t */\n\tif (processing) {\n\t\tif (evt == EVT_COMPLETE) {\n\t\t\tmgr->flags |= ONOFF_FLAG_COMPLETE;\n\t\t} else {\n\t\t\t__ASSERT_NO_MSG(evt == EVT_RECHECK);\n\n\t\t\tmgr->flags |= ONOFF_FLAG_RECHECK;\n\t\t}\n\n\t\tgoto out;\n\t}\n\n\tsys_slist_init(&clients);\n\tdo {\n\t\tonoff_transition_fn transit = NULL;\n\n\t\tif (evt == EVT_RECHECK) {\n\t\t\tevt = process_recheck(mgr);\n",
  "violation-line": 318,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384
  ],
  "before-code": "\n\t\t/* Have to unlock and do something if any of:\n\t\t * * We changed state and there are monitors;\n\t\t * * We completed a transition and there are clients to notify;\n\t\t * * We need to initiate a transition.\n\t\t */\n\t\tbool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))\n\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    364,
    365,
    366,
    367,
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384
  ],
  "after-code": "\n\t\t/* Have to unlock and do something if any of:\n\t\t * * We changed state and there are monitors;\n\t\t * * We completed a transition and there are clients to notify;\n\t\t * * We need to initiate a transition.\n\t\t */\n\t\tbool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))\n\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint16_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n",
  "violation-line": 374,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388
  ],
  "before-code": "\t\t * * We need to initiate a transition.\n\t\t */\n\t\tbool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))\n\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n\t\t\t\tnotify_monitors(mgr, state, res);\n\t\t\t}\n\n\t\t\tif (!sys_slist_is_empty(&clients)) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    368,
    369,
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388
  ],
  "after-code": "\t\t * * We need to initiate a transition.\n\t\t */\n\t\tbool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))\n\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint16_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n\t\t\t\tnotify_monitors(mgr, state, res);\n\t\t\t}\n\n\t\t\tif (!sys_slist_is_empty(&clients)) {\n",
  "violation-line": 378,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390
  ],
  "before-code": "\t\tbool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))\n\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n\t\t\t\tnotify_monitors(mgr, state, res);\n\t\t\t}\n\n\t\t\tif (!sys_slist_is_empty(&clients)) {\n\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    370,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390
  ],
  "after-code": "\t\tbool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))\n\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint16_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n\t\t\t\tnotify_monitors(mgr, state, res);\n\t\t\t}\n\n\t\t\tif (!sys_slist_is_empty(&clients)) {\n\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n",
  "violation-line": 380,
  "violation-message": "The unsigned int type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391
  ],
  "before-code": "\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n\t\t\t\tnotify_monitors(mgr, state, res);\n\t\t\t}\n\n\t\t\tif (!sys_slist_is_empty(&clients)) {\n\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    380,
    381,
    382,
    383,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    391
  ],
  "after-code": "\t\t\t\t   && !sys_slist_is_empty(&mgr->monitors);\n\n\t\tevt = EVT_NOP;\n\t\tif (do_monitors\n\t\t    || !sys_slist_is_empty(&clients)\n\t\t    || (transit != NULL)) {\n\t\t\tuint16_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;\n\n\t\t\tmgr->flags = flags;\n\t\t\tstate = flags & ONOFF_STATE_MASK;\n\n\t\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\t\tif (do_monitors) {\n\t\t\t\tnotify_monitors(mgr, state, res);\n\t\t\t}\n\n\t\t\tif (!sys_slist_is_empty(&clients)) {\n\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n\n",
  "violation-line": 381,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408
  ],
  "before-code": "\t\t\tif (!sys_slist_is_empty(&clients)) {\n\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n\n\t\t\tif (transit != NULL) {\n\t\t\t\ttransit(mgr, transition_complete);\n\t\t\t}\n\n\t\t\tkey = k_spin_lock(&mgr->lock);\n\t\t\tmgr->flags &= ~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408
  ],
  "after-code": "\t\t\tif (!sys_slist_is_empty(&clients)) {\n\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n\n\t\t\tif (transit != NULL) {\n\t\t\t\ttransit(mgr, transition_complete);\n\t\t\t}\n\n\t\t\tkey = k_spin_lock(&mgr->lock);\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n",
  "violation-line": 398,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409
  ],
  "before-code": "\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n\n\t\t\tif (transit != NULL) {\n\t\t\t\ttransit(mgr, transition_complete);\n\t\t\t}\n\n\t\t\tkey = k_spin_lock(&mgr->lock);\n\t\t\tmgr->flags &= ~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409
  ],
  "after-code": "\t\t\t\tnotify_all(mgr, &clients, state, res);\n\t\t\t}\n\n\t\t\tif (transit != NULL) {\n\t\t\t\ttransit(mgr, transition_complete);\n\t\t\t}\n\n\t\t\tkey = k_spin_lock(&mgr->lock);\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n",
  "violation-line": 399,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416
  ],
  "before-code": "\t\t\tkey = k_spin_lock(&mgr->lock);\n\t\t\tmgr->flags &= ~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416
  ],
  "after-code": "\t\t\tkey = k_spin_lock(&mgr->lock);\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\n",
  "violation-line": 406,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417
  ],
  "before-code": "\t\t\tmgr->flags &= ~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417
  ],
  "after-code": "\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_PROCESSING;\n\t\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n",
  "violation-line": 407,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419
  ],
  "before-code": "\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n\tk_spin_unlock(&mgr->lock, key);\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419
  ],
  "after-code": "\t\t}\n\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n\tk_spin_unlock(&mgr->lock, key);\n}\n",
  "violation-line": 409,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned short which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420
  ],
  "before-code": "\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n\tk_spin_unlock(&mgr->lock, key);\n}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420
  ],
  "after-code": "\n\t\t/* Process deferred events.  Completion takes priority\n\t\t * over recheck.\n\t\t */\n\t\tif ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n\tk_spin_unlock(&mgr->lock, key);\n}\n\n",
  "violation-line": 410,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425
  ],
  "before-code": "\t\t\tmgr->flags &= ~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= ~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n\tk_spin_unlock(&mgr->lock, key);\n}\n\nint onoff_request(struct onoff_manager *mgr,\n\t\t  struct onoff_client *cli)\n{\n\tbool add_client = false;        /* add client to pending list */\n\tbool start = false;             /* trigger a start transition */\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425
  ],
  "after-code": "\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_COMPLETE;\n\t\t\tevt = EVT_COMPLETE;\n\t\t} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {\n\t\t\tmgr->flags &= (uint16_t)~ONOFF_FLAG_RECHECK;\n\t\t\tevt = EVT_RECHECK;\n\t\t} else {\n\t\t\t;\n\t\t}\n\n\t\tstate = mgr->flags & ONOFF_STATE_MASK;\n\t} while (evt != EVT_NOP);\n\nout:\n\tk_spin_unlock(&mgr->lock, key);\n}\n\nint onoff_request(struct onoff_manager *mgr,\n\t\t  struct onoff_client *cli)\n{\n\tbool add_client = false;        /* add client to pending list */\n\tbool start = false;             /* trigger a start transition */\n",
  "violation-line": 415,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445
  ],
  "before-code": "\tbool start = false;             /* trigger a start transition */\n\tbool notify = false;            /* do client notification */\n\tint rv = validate_args(mgr, cli);\n\n\tif (rv < 0) {\n\t\treturn rv;\n\t}\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\t/* Reject if this would overflow the reference count. */\n\tif (mgr->refs == SERVICE_REFS_MAX) {\n\t\trv = -EAGAIN;\n\t\tgoto out;\n\t}\n\n\trv = state;\n\tif (state == ONOFF_STATE_ON) {\n\t\t/* Increment reference count, notify in exit */\n\t\tnotify = true;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    425,
    426,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445
  ],
  "after-code": "\tbool start = false;             /* trigger a start transition */\n\tbool notify = false;            /* do client notification */\n\tint rv = validate_args(mgr, cli);\n\n\tif (rv < 0) {\n\t\treturn rv;\n\t}\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\t/* Reject if this would overflow the reference count. */\n\tif (mgr->refs == SERVICE_REFS_MAX) {\n\t\trv = -EAGAIN;\n\t\tgoto out;\n\t}\n\n\trv = (int)state;\n\tif (state == ONOFF_STATE_ON) {\n\t\t/* Increment reference count, notify in exit */\n\t\tnotify = true;\n",
  "violation-line": 435,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453
  ],
  "before-code": "\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\t/* Reject if this would overflow the reference count. */\n\tif (mgr->refs == SERVICE_REFS_MAX) {\n\t\trv = -EAGAIN;\n\t\tgoto out;\n\t}\n\n\trv = state;\n\tif (state == ONOFF_STATE_ON) {\n\t\t/* Increment reference count, notify in exit */\n\t\tnotify = true;\n\t\tmgr->refs += 1U;\n\t} else if ((state == ONOFF_STATE_OFF)\n\t\t   || (state == ONOFF_STATE_TO_OFF)\n\t\t   || (state == ONOFF_STATE_TO_ON)) {\n\t\t/* Start if OFF, queue client */\n\t\tstart = (state == ONOFF_STATE_OFF);\n\t\tadd_client = true;\n\t} else if (state == ONOFF_STATE_RESETTING) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    433,
    434,
    435,
    436,
    437,
    438,
    439,
    440,
    441,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    452,
    453
  ],
  "after-code": "\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\t/* Reject if this would overflow the reference count. */\n\tif (mgr->refs == SERVICE_REFS_MAX) {\n\t\trv = -EAGAIN;\n\t\tgoto out;\n\t}\n\n\trv = (int)state;\n\tif (state == ONOFF_STATE_ON) {\n\t\t/* Increment reference count, notify in exit */\n\t\tnotify = true;\n\t\tmgr->refs += 1U;\n\t} else if ((state == ONOFF_STATE_OFF)\n\t\t   || (state == ONOFF_STATE_TO_OFF)\n\t\t   || (state == ONOFF_STATE_TO_ON)) {\n\t\t/* Start if OFF, queue client */\n\t\tstart = (state == ONOFF_STATE_OFF);\n\t\tadd_client = true;\n\t} else if (state == ONOFF_STATE_RESETTING) {\n",
  "violation-line": 443,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477
  ],
  "before-code": "\t\trv = -EIO;\n\t}\n\nout:\n\tif (add_client) {\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (start) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\tif (notify) {\n\t\t\tnotify_one(mgr, cli, state, 0);\n\t\t}\n\t}\n\n\treturn rv;\n}\n\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    467,
    468,
    469,
    470,
    471,
    472,
    473,
    474,
    475,
    476,
    477
  ],
  "after-code": "\t\trv = -EIO;\n\t}\n\nout:\n\tif (add_client) {\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (start) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n\t\tk_spin_unlock(&mgr->lock, key);\n\n\t\tif (notify) {\n\t\t\tnotify_one(mgr, cli, state, 0);\n\t\t}\n\t}\n\n\treturn rv;\n}\n\n",
  "violation-line": 467,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483,
    484,
    485,
    486,
    487,
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495
  ],
  "before-code": "\n\treturn rv;\n}\n\nint onoff_release(struct onoff_manager *mgr)\n{\n\tbool stop = false;      /* trigger a stop transition */\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\tint rv = state;\n\n\tif (state != ONOFF_STATE_ON) {\n\t\tif (state == ONOFF_STATE_ERROR) {\n\t\t\trv = -EIO;\n\t\t} else {\n\t\t\trv = -ENOTSUP;\n\t\t}\n\t\tgoto out;\n\t}\n\n\t__ASSERT_NO_MSG(mgr->refs > 0);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483,
    484,
    485,
    486,
    487,
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495
  ],
  "after-code": "\n\treturn rv;\n}\n\nint onoff_release(struct onoff_manager *mgr)\n{\n\tbool stop = false;      /* trigger a stop transition */\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\tint rv = (int)state;\n\n\tif (state != ONOFF_STATE_ON) {\n\t\tif (state == ONOFF_STATE_ERROR) {\n\t\t\trv = -EIO;\n\t\t} else {\n\t\t\trv = -ENOTSUP;\n\t\t}\n\t\tgoto out;\n\t}\n\n\t__ASSERT_NO_MSG(mgr->refs > 0);\n",
  "violation-line": 484,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483,
    484,
    485,
    486,
    487,
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495
  ],
  "before-code": "\n\treturn rv;\n}\n\nint onoff_release(struct onoff_manager *mgr)\n{\n\tbool stop = false;      /* trigger a stop transition */\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\tint rv = state;\n\n\tif (state != ONOFF_STATE_ON) {\n\t\tif (state == ONOFF_STATE_ERROR) {\n\t\t\trv = -EIO;\n\t\t} else {\n\t\t\trv = -ENOTSUP;\n\t\t}\n\t\tgoto out;\n\t}\n\n\t__ASSERT_NO_MSG(mgr->refs > 0);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    482,
    483,
    484,
    485,
    486,
    487,
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495
  ],
  "after-code": "\n\treturn rv;\n}\n\nint onoff_release(struct onoff_manager *mgr)\n{\n\tbool stop = false;      /* trigger a stop transition */\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\tint rv = (int)state;\n\n\tif (state != ONOFF_STATE_ON) {\n\t\tif (state == ONOFF_STATE_ERROR) {\n\t\t\trv = -EIO;\n\t\t} else {\n\t\t\trv = -ENOTSUP;\n\t\t}\n\t\tgoto out;\n\t}\n\n\t__ASSERT_NO_MSG(mgr->refs > 0);\n",
  "violation-line": 485,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    492,
    493,
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512
  ],
  "before-code": "\t\tgoto out;\n\t}\n\n\t__ASSERT_NO_MSG(mgr->refs > 0);\n\tmgr->refs -= 1U;\n\tstop = (mgr->refs == 0);\n\nout:\n\tif (stop) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n\t\tk_spin_unlock(&mgr->lock, key);\n\t}\n\n\treturn rv;\n}\n\nint onoff_reset(struct onoff_manager *mgr,\n\t\tstruct onoff_client *cli)\n{\n\tbool reset = false;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    492,
    493,
    494,
    495,
    496,
    497,
    498,
    499,
    500,
    501,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    512
  ],
  "after-code": "\t\tgoto out;\n\t}\n\n\t__ASSERT_NO_MSG(mgr->refs > 0);\n\tmgr->refs -= 1U;\n\tstop = (mgr->refs == 0);\n\nout:\n\tif (stop) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n\t\tk_spin_unlock(&mgr->lock, key);\n\t}\n\n\treturn rv;\n}\n\nint onoff_reset(struct onoff_manager *mgr,\n\t\tstruct onoff_client *cli)\n{\n\tbool reset = false;\n",
  "violation-line": 502,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536
  ],
  "before-code": "\t    && (mgr->transitions->reset == NULL)) {\n\t\trv = -ENOTSUP;\n\t}\n\n\tif (rv < 0) {\n\t\treturn rv;\n\t}\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\trv = state;\n\n\tif ((state & ONOFF_FLAG_ERROR) == 0) {\n\t\trv = -EALREADY;\n\t} else {\n\t\treset = (state != ONOFF_STATE_RESETTING);\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (reset) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    516,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536
  ],
  "after-code": "\t    && (mgr->transitions->reset == NULL)) {\n\t\trv = -ENOTSUP;\n\t}\n\n\tif (rv < 0) {\n\t\treturn rv;\n\t}\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\trv = (int)state;\n\n\tif ((state & ONOFF_FLAG_ERROR) == 0) {\n\t\trv = -EALREADY;\n\t} else {\n\t\treset = (state != ONOFF_STATE_RESETTING);\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (reset) {\n",
  "violation-line": 526,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538
  ],
  "before-code": "\t}\n\n\tif (rv < 0) {\n\t\treturn rv;\n\t}\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\trv = state;\n\n\tif ((state & ONOFF_FLAG_ERROR) == 0) {\n\t\trv = -EALREADY;\n\t} else {\n\t\treset = (state != ONOFF_STATE_RESETTING);\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (reset) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    527,
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538
  ],
  "after-code": "\t}\n\n\tif (rv < 0) {\n\t\treturn rv;\n\t}\n\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\trv = (int)state;\n\n\tif ((state & ONOFF_FLAG_ERROR) == 0) {\n\t\trv = -EALREADY;\n\t} else {\n\t\treset = (state != ONOFF_STATE_RESETTING);\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (reset) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n",
  "violation-line": 528,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548
  ],
  "before-code": "\n\tif ((state & ONOFF_FLAG_ERROR) == 0) {\n\t\trv = -EALREADY;\n\t} else {\n\t\treset = (state != ONOFF_STATE_RESETTING);\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (reset) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n\t\tk_spin_unlock(&mgr->lock, key);\n\t}\n\n\treturn rv;\n}\n\nint onoff_cancel(struct onoff_manager *mgr,\n\t\t struct onoff_client *cli)\n{\n\tif ((mgr == NULL) || (cli == NULL)) {\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    528,
    529,
    530,
    531,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    542,
    543,
    544,
    545,
    546,
    547,
    548
  ],
  "after-code": "\n\tif ((state & ONOFF_FLAG_ERROR) == 0) {\n\t\trv = -EALREADY;\n\t} else {\n\t\treset = (state != ONOFF_STATE_RESETTING);\n\t\tsys_slist_append(&mgr->clients, &cli->node);\n\t}\n\n\tif (reset) {\n\t\tprocess_event(mgr, EVT_RECHECK, key);\n\t} else {\n\t\tk_spin_unlock(&mgr->lock, key);\n\t}\n\n\treturn rv;\n}\n\nint onoff_cancel(struct onoff_manager *mgr,\n\t\t struct onoff_client *cli)\n{\n\tif ((mgr == NULL) || (cli == NULL)) {\n",
  "violation-line": 538,
  "violation-message": "The enum event_type type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565
  ],
  "before-code": "int onoff_cancel(struct onoff_manager *mgr,\n\t\t struct onoff_client *cli)\n{\n\tif ((mgr == NULL) || (cli == NULL)) {\n\t\treturn -EINVAL;\n\t}\n\n\tint rv = -EALREADY;\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {\n\t\t__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)\n\t\t\t\t|| (state == ONOFF_STATE_TO_OFF)\n\t\t\t\t|| (state == ONOFF_STATE_RESETTING));\n\t\trv = state;\n\t}\n\n\tk_spin_unlock(&mgr->lock, key);\n\n\treturn rv;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    545,
    546,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565
  ],
  "after-code": "int onoff_cancel(struct onoff_manager *mgr,\n\t\t struct onoff_client *cli)\n{\n\tif ((mgr == NULL) || (cli == NULL)) {\n\t\treturn -EINVAL;\n\t}\n\n\tint rv = -EALREADY;\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {\n\t\t__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)\n\t\t\t\t|| (state == ONOFF_STATE_TO_OFF)\n\t\t\t\t|| (state == ONOFF_STATE_RESETTING));\n\t\trv = (int)state;\n\t}\n\n\tk_spin_unlock(&mgr->lock, key);\n\n\treturn rv;\n",
  "violation-line": 555,
  "violation-message": "The unsigned long type has been assigned to the object of unsigned int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/os/onoff.c",
  "before-lines": [
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571
  ],
  "before-code": "\n\tint rv = -EALREADY;\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint32_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {\n\t\t__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)\n\t\t\t\t|| (state == ONOFF_STATE_TO_OFF)\n\t\t\t\t|| (state == ONOFF_STATE_RESETTING));\n\t\trv = state;\n\t}\n\n\tk_spin_unlock(&mgr->lock, key);\n\n\treturn rv;\n}\n\nint onoff_monitor_register(struct onoff_manager *mgr,\n\t\t\t   struct onoff_monitor *mon)\n{\n\tif ((mgr == NULL)\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/os/onoff.c",
  "after-lines": [
    551,
    552,
    553,
    554,
    555,
    556,
    557,
    558,
    559,
    560,
    561,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571
  ],
  "after-code": "\n\tint rv = -EALREADY;\n\tk_spinlock_key_t key = k_spin_lock(&mgr->lock);\n\tuint16_t state = mgr->flags & ONOFF_STATE_MASK;\n\n\tif (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {\n\t\t__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)\n\t\t\t\t|| (state == ONOFF_STATE_TO_OFF)\n\t\t\t\t|| (state == ONOFF_STATE_RESETTING));\n\t\trv = (int)state;\n\t}\n\n\tk_spin_unlock(&mgr->lock, key);\n\n\treturn rv;\n}\n\nint onoff_monitor_register(struct onoff_manager *mgr,\n\t\t\t   struct onoff_monitor *mon)\n{\n\tif ((mgr == NULL)\n",
  "violation-line": 561,
  "violation-message": "The unsigned int type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/posix/nanosleep.c",
  "before-lines": [
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52
  ],
  "before-code": "\t\t|| rqtp->tv_nsec >= NSEC_PER_SEC) {\n\t\terrno = EINVAL;\n\t\treturn -1;\n\t}\n\n\tif (rqtp->tv_sec == 0 && rqtp->tv_nsec == 0) {\n\t\tgoto do_rmtp_update;\n\t}\n\n\tif (unlikely(rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ k_sleep(K_SECONDS(rqtp->tv_sec - 1)) * NSEC_PER_MSEC;\n\t} else {\n\t\tns = rqtp->tv_sec * NSEC_PER_SEC + rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/posix/nanosleep.c",
  "after-lines": [
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52
  ],
  "after-code": "\t\t|| rqtp->tv_nsec >= (long)NSEC_PER_SEC) {\n\t\terrno = EINVAL;\n\t\treturn -1;\n\t}\n\n\tif (rqtp->tv_sec == 0 && rqtp->tv_nsec == 0) {\n\t\tgoto do_rmtp_update;\n\t}\n\n\tif (unlikely((unsigned long long)rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = (uint64_t)rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ (uint64_t)k_sleep(K_SECONDS(((uint64_t)rqtp->tv_sec - 1)))\n\t\t\t\t* NSEC_PER_MSEC;\n\t} else {\n\t\tns = (uint64_t)rqtp->tv_sec * NSEC_PER_SEC + (uint64_t)rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n",
  "violation-line": 42,
  "violation-message": "The bool type has been assigned to the object of long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/posix/nanosleep.c",
  "before-lines": [
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57
  ],
  "before-code": "\n\tif (rqtp->tv_sec == 0 && rqtp->tv_nsec == 0) {\n\t\tgoto do_rmtp_update;\n\t}\n\n\tif (unlikely(rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ k_sleep(K_SECONDS(rqtp->tv_sec - 1)) * NSEC_PER_MSEC;\n\t} else {\n\t\tns = rqtp->tv_sec * NSEC_PER_SEC + rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\tdo {\n\t\tus = k_usleep(us);\n\t} while (us != 0);\n\ndo_rmtp_update:\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/posix/nanosleep.c",
  "after-lines": [
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58
  ],
  "after-code": "\n\tif (rqtp->tv_sec == 0 && rqtp->tv_nsec == 0) {\n\t\tgoto do_rmtp_update;\n\t}\n\n\tif (unlikely((unsigned long long)rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = (uint64_t)rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ (uint64_t)k_sleep(K_SECONDS(((uint64_t)rqtp->tv_sec - 1)))\n\t\t\t\t* NSEC_PER_MSEC;\n\t} else {\n\t\tns = (uint64_t)rqtp->tv_sec * NSEC_PER_SEC + (uint64_t)rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\t/*? Possible overflow? Why k_usleep takes a signed integer? */\n\tint32_t remaining = (int32_t)us;\n\tdo {\n\t\tremaining = k_usleep(remaining);\n\t} while (remaining != 0);\n",
  "violation-line": 46,
  "violation-message": "The long type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/posix/nanosleep.c",
  "before-lines": [
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57
  ],
  "before-code": "\n\tif (rqtp->tv_sec == 0 && rqtp->tv_nsec == 0) {\n\t\tgoto do_rmtp_update;\n\t}\n\n\tif (unlikely(rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ k_sleep(K_SECONDS(rqtp->tv_sec - 1)) * NSEC_PER_MSEC;\n\t} else {\n\t\tns = rqtp->tv_sec * NSEC_PER_SEC + rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\tdo {\n\t\tus = k_usleep(us);\n\t} while (us != 0);\n\ndo_rmtp_update:\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/posix/nanosleep.c",
  "after-lines": [
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58
  ],
  "after-code": "\n\tif (rqtp->tv_sec == 0 && rqtp->tv_nsec == 0) {\n\t\tgoto do_rmtp_update;\n\t}\n\n\tif (unlikely((unsigned long long)rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = (uint64_t)rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ (uint64_t)k_sleep(K_SECONDS(((uint64_t)rqtp->tv_sec - 1)))\n\t\t\t\t* NSEC_PER_MSEC;\n\t} else {\n\t\tns = (uint64_t)rqtp->tv_sec * NSEC_PER_SEC + (uint64_t)rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\t/*? Possible overflow? Why k_usleep takes a signed integer? */\n\tint32_t remaining = (int32_t)us;\n\tdo {\n\t\tremaining = k_usleep(remaining);\n\t} while (remaining != 0);\n",
  "violation-line": 47,
  "violation-message": "The long long type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/posix/nanosleep.c",
  "before-lines": [
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59
  ],
  "before-code": "\t}\n\n\tif (unlikely(rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ k_sleep(K_SECONDS(rqtp->tv_sec - 1)) * NSEC_PER_MSEC;\n\t} else {\n\t\tns = rqtp->tv_sec * NSEC_PER_SEC + rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\tdo {\n\t\tus = k_usleep(us);\n\t} while (us != 0);\n\ndo_rmtp_update:\n\tif (update_rmtp) {\n\t\trmtp->tv_sec = 0;\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/posix/nanosleep.c",
  "after-lines": [
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60
  ],
  "after-code": "\n\tif (unlikely((unsigned long long)rqtp->tv_sec >= ULLONG_MAX / NSEC_PER_SEC)) {\n\t\t/* If a user passes this in, we could be here a while, but\n\t\t * at least it's technically correct-ish\n\t\t */\n\t\tns = (uint64_t)rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ (uint64_t)k_sleep(K_SECONDS(((uint64_t)rqtp->tv_sec - 1)))\n\t\t\t\t* NSEC_PER_MSEC;\n\t} else {\n\t\tns = (uint64_t)rqtp->tv_sec * NSEC_PER_SEC + (uint64_t)rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\t/*? Possible overflow? Why k_usleep takes a signed integer? */\n\tint32_t remaining = (int32_t)us;\n\tdo {\n\t\tremaining = k_usleep(remaining);\n\t} while (remaining != 0);\n\ndo_rmtp_update:\n",
  "violation-line": 49,
  "violation-message": "The long long type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/posix/nanosleep.c",
  "before-lines": [
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64
  ],
  "before-code": "\t\tns = rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ k_sleep(K_SECONDS(rqtp->tv_sec - 1)) * NSEC_PER_MSEC;\n\t} else {\n\t\tns = rqtp->tv_sec * NSEC_PER_SEC + rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\tdo {\n\t\tus = k_usleep(us);\n\t} while (us != 0);\n\ndo_rmtp_update:\n\tif (update_rmtp) {\n\t\trmtp->tv_sec = 0;\n\t\trmtp->tv_nsec = 0;\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/posix/nanosleep.c",
  "after-lines": [
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67
  ],
  "after-code": "\t} else {\n\t\tns = (uint64_t)rqtp->tv_sec * NSEC_PER_SEC + (uint64_t)rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\t/*? Possible overflow? Why k_usleep takes a signed integer? */\n\tint32_t remaining = (int32_t)us;\n\tdo {\n\t\tremaining = k_usleep(remaining);\n\t} while (remaining != 0);\n\ndo_rmtp_update:\n\tif (update_rmtp) {\n\t\trmtp->tv_sec = 0;\n\t\trmtp->tv_nsec = 0;\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 55,
  "violation-message": "The int type has been assigned to the object of unsigned long long which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
},{
  "before-filepath": "/home/suhyun/zephyr_before_MISRA/zephyr/lib/posix/nanosleep.c",
  "before-lines": [
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64
  ],
  "before-code": "\t\tns = rqtp->tv_nsec + NSEC_PER_SEC\n\t\t\t+ k_sleep(K_SECONDS(rqtp->tv_sec - 1)) * NSEC_PER_MSEC;\n\t} else {\n\t\tns = rqtp->tv_sec * NSEC_PER_SEC + rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\tdo {\n\t\tus = k_usleep(us);\n\t} while (us != 0);\n\ndo_rmtp_update:\n\tif (update_rmtp) {\n\t\trmtp->tv_sec = 0;\n\t\trmtp->tv_nsec = 0;\n\t}\n\n\treturn 0;\n}\n",
  "after-filepath": "/home/suhyun/zephyr_after_MISRA/zephyr/lib/posix/nanosleep.c",
  "after-lines": [
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67
  ],
  "after-code": "\t} else {\n\t\tns = (uint64_t)rqtp->tv_sec * NSEC_PER_SEC + (uint64_t)rqtp->tv_nsec;\n\t}\n\n\t/* TODO: improve upper bound when hr timers are available */\n\tus = ceiling_fraction(ns, NSEC_PER_USEC);\n\t/*? Possible overflow? Why k_usleep takes a signed integer? */\n\tint32_t remaining = (int32_t)us;\n\tdo {\n\t\tremaining = k_usleep(remaining);\n\t} while (remaining != 0);\n\ndo_rmtp_update:\n\tif (update_rmtp) {\n\t\trmtp->tv_sec = 0;\n\t\trmtp->tv_nsec = 0;\n\t}\n\n\treturn 0;\n}\n",
  "violation-line": 55,
  "violation-message": "The unsigned long long type has been assigned to the object of int which is the smaller or the other essential type.",
  "violation-rule": "MISRA_C_2012_10_03",
  "before-version": "40cf447b5aba81b22a25df2ac19efb66ef40752b",
  "after-version": "d03fa8d8e9d90f104e5dadafea0f773a67862659"
}]
